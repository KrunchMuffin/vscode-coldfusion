[
	{
		"prefix": "abs",
		"body": "abs(${1:number})",
		"description": " Absolute-value function. The absolute value of a number is\n the number without its sign.\n\nUSAGE:\nnumeric abs(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "acos",
		"body": "acos(${1:number})",
		"description": " Returns the angle whose cosine is the value passed as the argument.\n\nUSAGE:\nnumeric acos(number)\n\nPARAMETERS:\n\nnumber (numeric) - The value to be converted into an angle. Must be between -1 and 1.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "addSOAPRequestHeader",
		"body": "addSOAPRequestHeader(${1:webservice}, ${2:namespace}, ${3:name}, ${4:value}, ${5:mustunderstand})",
		"description": " Adds a SOAP header to a web service request before making the request.\n\nUSAGE:\nboolean addSOAPRequestHeader(webservice, namespace, name, value, mustunderstand)\n\nPARAMETERS:\n\nwebservice (string) - No Help Available\n\nnamespace (string) - No Help Available\n\nname (string) - No Help Available\n\nvalue (string) - No Help Available\n\nmustunderstand (boolean) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "addSOAPResponseHeader",
		"body": "addSOAPResponseHeader(${1:namespace}, ${2:name}, ${3:value})",
		"description": " Adds a SOAP response header to a web service response. Call only from within a CFC web service function that is processing a request as a SOAP web service.\n\nUSAGE:\nboolean addSOAPResponseHeader(namespace, name, value [, mustunderstand])\n\nPARAMETERS:\n\nnamespace (string) - No Help Available\n\nname (string) - No Help Available\n\nvalue (string) - No Help Available\n\nmustunderstand (boolean) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ajaxLink",
		"body": "ajaxLink(${1:url})",
		"description": " Causes an HTML href attribute to display link results in the current Ajax container.\n\nUSAGE:\nvoid ajaxLink(url)\n\nPARAMETERS:\n\nurl (string) - The URL of the link.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ajaxOnLoad",
		"body": "ajaxOnLoad(${1:functionname})",
		"description": " Causes the specified JavaScript function to run when the page loads.\n\nUSAGE:\nvoid ajaxOnLoad(functionname)\n\nPARAMETERS:\n\nfunctionname (string) - The name of the function to run when the page loads.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "applicationStartTime",
		"body": "applicationStartTime()",
		"description": "Provides information about the time when the current application scope was created.\n\nUSAGE:\ndate applicationStartTime()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "applicationStop",
		"body": "applicationStop()",
		"description": " stops current application\n\nUSAGE:\nvoid applicationStop()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "array",
		"body": "array()",
		"description": "Creates a new array populated with any arguments that have been passed to the function.\n\nUSAGE:\narray array( [values])\n\nPARAMETERS:\n\nvalues (any) - One or more values that can be used in the initialization of the array.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayAppend",
		"body": "arrayAppend(${1:array}, ${2:value})",
		"description": "Appends an element to the end of an array.\n\nUSAGE:\nboolean arrayAppend(array, value [, merge])\n\nPARAMETERS:\n\narray (array) - The array to which the element should be appended.\n\nvalue (any) - The element to append. Can be any type.\n\nmerge (boolean) - CF10+ When true appends array elements individually to the specified array. When false (default), the new array is appended as a single element. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayAvg",
		"body": "arrayAvg(${1:array})",
		"description": " Calculates the average of the values in an array.\n All elements in the array must contain values that can be\n automatically converted to numeric.\n\nUSAGE:\nnumeric arrayAvg(array)\n\nPARAMETERS:\n\narray (array) - An array which to determine average\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayClear",
		"body": "arrayClear(${1:array})",
		"description": " Removes all elements from an array.\n\nUSAGE:\nboolean arrayClear(array)\n\nPARAMETERS:\n\narray (array) - An array name or variable name\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayContains",
		"body": "arrayContains(${1:array}, ${2:object})",
		"description": "Used to determine if an object is in the given array, case sensitive. Adobe CF and OpenBD return boolean. Lucee / Railo returns the numeric index if the object is found, 0 if not.\n\nUSAGE:\nboolean arrayContains(array, object [, substringMatch])\n\nPARAMETERS:\n\narray (array) - The array in which to search.\n\nobject (any) - The object to search for in the array.\n\nsubstringMatch (any) -  Lucee4.5+ If set to true then a substring match will also return an array position. This will only work with simple values. Passing true with complex objects will throw an exception.. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayContainsNoCase",
		"body": "arrayContainsNoCase(${1:array}, ${2:object})",
		"description": "Used to determine if an object is in the given array, case insensitive.\n\nUSAGE:\nboolean arrayContainsNoCase(array, object)\n\nPARAMETERS:\n\narray (array)\n\nobject (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayDelete",
		"body": "arrayDelete(${1:array}, ${2:object})",
		"description": "Deletes the first element in an array that matches the value of `object`.\nThe search is case sensitive.\nReturns `true` if the element was found and removed.\nThe array will be resized, so that the deleted element doesn't leave a gap.\n\nUSAGE:\nboolean arrayDelete(array, object [, scope])\n\nPARAMETERS:\n\narray (array)\n\nobject (any) - A string, numeric or boolean value on which to search. Case sensitive.\n\nscope (string) - Lucee4.5+ remove one (default) or all occurances of the object. Default: one. Values: one, all.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayDeleteAt",
		"body": "arrayDeleteAt(${1:array}, ${2:position})",
		"description": "Deletes the element at `position` from an array\nThe array will be resized, so that the deleted element doesn't leave a gap.\n\nUSAGE:\nboolean arrayDeleteAt(array, position)\n\nPARAMETERS:\n\narray (array) - The array that the element will be deleted from.\n\nposition (numeric) - The numeric position of the element. Remember that ColdFusion arrays start at 1 not 0.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayDeleteNoCase",
		"body": "arrayDeleteNoCase(${1:array}, ${2:object})",
		"description": "Deletes the first element in an array that matches the value of `object`.\nThe search is case insensitive.\nReturns `true` if the element was found and removed.\nThe array will be resized, so that the deleted element doesn't leave a gap.\n\nUSAGE:\nboolean arrayDeleteNoCase(array, object)\n\nPARAMETERS:\n\narray (array)\n\nobject (any) - A string, numeric or boolean value on which to search. Case insensitive.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayEach",
		"body": "arrayEach(${1:array}, ${2:closure})",
		"description": "Used to iterate over an array and run the function closure for each item in the array.\n\nUSAGE:\nvoid arrayEach(array, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\narray (array)\n\nclosure (function) - function / closure with the signature: any function (any item, [numeric index], [array array]) - will be executed once per item in the array\n\nparallel (boolean) - Railo only option, true or false if the items can be executed in parallel. Default: false. Values: true, false.\n\nmaxThreads (boolean) - Railo only option, the number of threads to use when parallel = true. Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayEvery",
		"body": "arrayEvery(${1:array}, ${2:closure})",
		"description": "returns true if every closure returns true, otherwise false\n\nUSAGE:\nboolean arrayEvery(array, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\narray (array)\n\nclosure (function) - A function / closure with the signature: `boolean function (any item, [numeric index], [array array])`\n\nparallel (boolean) - When `true` the items can be executed in parallel. Default: false. Values: true, false.\n\nmaxThreads (boolean) - The number of threads to use when `parallel=true`. Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayFilter",
		"body": "arrayFilter(${1:array}, ${2:function})",
		"description": "Used to filter an array to items for which the closure function returns true.\n\nUSAGE:\narray arrayFilter(array, function [, parallel] [, maxThreads])\n\nPARAMETERS:\n\narray (array)\n\nfunction (function) - Inline closure function executed for each element in the array. Returns true if the array element should be included in the filtered array. Support for passing the original array to the closure function added in CF11 Update 5.\n\nparallel (boolean) - Lucee only option, true or false if the items can be executed in parallel. Default: false. Values: true, false.\n\nmaxThreads (boolean) - Lucee only option, the number of threads to use when parallel = true. Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayFind",
		"body": "arrayFind(${1:array}, ${2:object})",
		"description": " These functions searches the array for the specified object. Returns the index in the array of the first match, or 0 if there is no match.\n\nUSAGE:\nnumeric arrayFind(array, object)\n\nPARAMETERS:\n\narray (array) - The array you are searching.\n\nobject (any) - The value you are looking for in the array. CF10+ or Lucee4.5+ support passing a closure function in this argument as well.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayFindAll",
		"body": "arrayFindAll(${1:array}, ${2:object or closure})",
		"description": "Searches an array for all positions of a specified object. The function searches for simple objects such as strings and numbers or for complex objects such as structures. When the second parameter is a simple object, string searches are case-sensitive\n\nUSAGE:\narray arrayFindAll(array, object or closure)\n\nPARAMETERS:\n\narray (array) - The source array to search through\n\nobject or closure (variableName) - If string, case sensitive value to search for; if closure, use signature function (item, index, array) : boolean\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayFindAllNoCase",
		"body": "arrayFindAllNoCase(${1:array}, ${2:object or closure})",
		"description": "Searches an array for all positions of a specified object. The function searches for simple objects such as strings and numbers or for complex objects such as structures. When the second parameter is a simple object, string searches are case-sensitive\n\nUSAGE:\narray arrayFindAllNoCase(array, object or closure)\n\nPARAMETERS:\n\narray (array) - The source array to search through\n\nobject or closure (variableName) - If string, case insensitive value to search for; if closure, use signature function (item, index, array) : boolean\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayFindNoCase",
		"body": "arrayFindNoCase(${1:array}, ${2:object})",
		"description": " These functions performs a case-insensitive search in the array for the specified object. Returns the array index of the first match; 0 if not found.\n\nUSAGE:\nnumeric arrayFindNoCase(array, object)\n\nPARAMETERS:\n\narray (array) - The array to search\n\nobject (any) - The value you are looking for in the array.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayFirst",
		"body": "arrayFirst(${1:array})",
		"description": "Returns the first item from an array.\n\nUSAGE:\nany arrayFirst(array)\n\nPARAMETERS:\n\narray (array)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayIndexExists",
		"body": "arrayIndexExists(${1:array}, ${2:index})",
		"description": "Returns whether there exists an item in the array at the selected index.\n\nUSAGE:\nboolean arrayIndexExists(array, index)\n\nPARAMETERS:\n\narray (array)\n\nindex (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayInsertAt",
		"body": "arrayInsertAt(${1:array}, ${2:position}, ${3:value})",
		"description": " Inserts a value at the specified position in the array. If\n the element is inserted before the end of the array, ColdFusion\n shifts the positions of all elements with a higher index to make room.\n\nUSAGE:\nboolean arrayInsertAt(array, position, value)\n\nPARAMETERS:\n\narray (array) - The array which will have the new element inserted.\n\nposition (numeric) - The numerical index in the array where the new element will be inserted.\n Must be less than or equal to the length of the array.\n Remember ColdFusion arrays start at 1 not 0.\n\nvalue (any) - The new element to insert.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayIsDefined",
		"body": "arrayIsDefined(${1:array}, ${2:elementIndex})",
		"description": " Determines whether an array element is defined.\n\nUSAGE:\nboolean arrayIsDefined(array, elementIndex)\n\nPARAMETERS:\n\narray (string) - The array object\n\nelementIndex (numeric) - The key value/index to check.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayIsEmpty",
		"body": "arrayIsEmpty(${1:array})",
		"description": " Determines whether an array is empty. Equivalent to arrayLen().\n Calling this function on an array with 10 undefined elements\n will return false.\n CFML MX: this function can be used on XML objects.\n\nUSAGE:\nboolean arrayIsEmpty(array)\n\nPARAMETERS:\n\narray (array) - An array name or variable name\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayLast",
		"body": "arrayLast(${1:array})",
		"description": "Returns the first item from an array. Throws an error if the array is empty.\n\nUSAGE:\nany arrayLast(array)\n\nPARAMETERS:\n\narray (array)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayLen",
		"body": "arrayLen(${1:array})",
		"description": " Determines the number of elements in an array.\n CFML MX: this function can be used on child XML objects.\n\nUSAGE:\nnumeric arrayLen(array)\n\nPARAMETERS:\n\narray (array) - An array which to determine length\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayMap",
		"body": "arrayMap(${1:array}, ${2:function})",
		"description": "Iterates over every entry of the array and calls the closure function to work on the element of the array. The returned value will be set at the same index in a new array and the new array will be returned\n\nUSAGE:\narray arrayMap(array, function)\n\nPARAMETERS:\n\narray (array) - The input array\n\nfunction (any) - Closure or a function reference that will be called for each of the iteration. The arguments passed to the callback are\r\n\r\nitem: item in the array\r\nindex: index of the array\r\narray: a reference of the original arrray\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayMax",
		"body": "arrayMax(${1:array})",
		"description": " Returns the largest numeric value in an array. If the array\n parameter value is an empty array, returns zero.\n All elements must contain values that can be automatically\n converted to numeric values.\n\nUSAGE:\nnumeric arrayMax(array)\n\nPARAMETERS:\n\narray (array) - An array or variable name\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayMedian",
		"body": "arrayMedian(${1:array})",
		"description": "Calculates the Median value of items in an array. All elements in the array must contain values that can be converted to numeric.\n\nUSAGE:\nnumeric arrayMedian(array)\n\nPARAMETERS:\n\narray (array)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayMerge",
		"body": "arrayMerge(${1:array1}, ${2:array2})",
		"description": "This function creates a new array with data from the two passed arrays. To add all the data from one array into another without creating a new array see the built in function ArrayAppend(arr1, arr2, true).\n\nUSAGE:\narray arrayMerge(array1, array2 [, leaveIndex])\n\nPARAMETERS:\n\narray1 (array)\n\narray2 (array)\n\nleaveIndex (boolean)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayMid",
		"body": "arrayMid(${1:array}, ${2:start})",
		"description": "Extracts a sub array from an existing array.\n\nUSAGE:\narray arrayMid(array, start [, count])\n\nPARAMETERS:\n\narray (array) - Array to extract data from\n\nstart (numeric) - The position of the first element to retrieve\n\ncount (numeric) - The number of elements to extract. If not set, all elements up to the end of the array will be returned.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayMin",
		"body": "arrayMin(${1:array})",
		"description": " Returns the smallest numeric value in an array. If the array\n parameter value is an empty array, returns zero.\n All elements must contain values that can be automatically\n converted to numeric values.\n\nUSAGE:\nnumeric arrayMin(array)\n\nPARAMETERS:\n\narray (array) - An array or variable name\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayNew",
		"body": "arrayNew(${1|1,2,3|})",
		"description": "Creates an array of 1-3 dimensions. Index array elements with square brackets: [ ]. CFML arrays expand dynamically as data is added.\n\nUSAGE:\narray arrayNew(dimension [, unsynchronized])\n\nPARAMETERS:\n\ndimension (numeric). Default: 1. Values: 1, 2, 3.\n\nunsynchronized (boolean) - CF2016+ When true creates an unsynchronized array. Unsynchronized arrays are not thread safe so they should not be used within shared scopes (application, session, etc). According to the CF2016 Performance whitepaper: Unsynchronized arrays are about 93% faster due to lock avoidance. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayPrepend",
		"body": "arrayPrepend(${1:array}, ${2:value})",
		"description": " Inserts an array element at the beginning of an array\n and shifts the positions of the existing elements to\n make room.\n\nUSAGE:\nboolean arrayPrepend(array, value)\n\nPARAMETERS:\n\narray (array)\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayReduce",
		"body": "arrayReduce(${1:array}, ${2:function})",
		"description": "Iterates over every entry of the array and calls the closure to work on the elements of the array. This function will reduce the array to a single value and will return the value.\n\nUSAGE:\nany arrayReduce(array, function [, initialValue])\n\nPARAMETERS:\n\narray (array) - the input array\n\nfunction (function) - Closure or a function reference that will be called for each of the iteration. The arguments passed to the callback are\r\n\r\nresult: result of the reduce operation after the previous iteration\r\nitem: item in the array\r\nindex : current index for the iteration\r\narray : reference of the original array\n\ninitialValue (any) - Initial value which will be used for the reduce operation. The type is any.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayResize",
		"body": "arrayResize(${1:array}, ${2:size})",
		"description": " Resets an array to a specified minimum number of elements.\n This can improve performance, if used to size an array to its\n expected maximum. For more than 500 elements, use arrayResize\n immediately after using the ArrayNew tag.\n\nUSAGE:\nboolean arrayResize(array, size)\n\nPARAMETERS:\n\narray (array)\n\nsize (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayReverse",
		"body": "arrayReverse(${1:array})",
		"description": "Returns an array with all of the elements reversed. The value in [0] within the input array will then exist in [n] in the output array, where n is the amount of elements in the array minus one.\n\nUSAGE:\narray arrayReverse(array)\n\nPARAMETERS:\n\narray (array) - The array to reverse\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arraySet",
		"body": "arraySet(${1:array}, ${2:start_pos}, ${3:end_pos}, ${4:value})",
		"description": " In a one-dimensional array, sets the elements in a specified\n index range to a value. Useful for initializing an array after\n a call to ArrayNew.\n\nUSAGE:\nboolean arraySet(array, start_pos, end_pos, value)\n\nPARAMETERS:\n\narray (array)\n\nstart_pos (numeric)\n\nend_pos (numeric)\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arraySlice",
		"body": "arraySlice(${1:array}, ${2:offset})",
		"description": "Returns a new array, from the start position up to the count of elements.\n\nUSAGE:\narray arraySlice(array, offset [, length])\n\nPARAMETERS:\n\narray (array) - Name of the array that you want to slice\n\noffset (numeric) - Specifies the position from which to slice the array. Negative value indicates that the array is sliced, with sequence starting from array's end.\n\nlength (numeric) - Maximum elements to slice. Default: Length of Array.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arraySome",
		"body": "arraySome(${1:array}, ${2:closure})",
		"description": "Calls a given closure/function with every element in a given array and returns true if one of the closure calls returns true\n\nUSAGE:\nboolean arraySome(array, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\narray (array) - Array to iterate\n\nclosure (function) - Function/closure that implements the following constructor [function(any value[,numeric index,array array]):boolean].\n\nparallel (boolean) - Execute closures parallel\n\nmaxThreads (numeric) - Maximum number of threads executed, ignored when argument \"parallel\" is set to false. Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arraySort",
		"body": "arraySort(${1:array}, ${2|numeric,text,textnocase|})",
		"description": " Sorts array elements numerically or alphanumerically.\n\nUSAGE:\nboolean arraySort(array, sort_type [, sort_order] [, callback])\n\nPARAMETERS:\n\narray (array) - Name of an array\n\nsort_type (string) - numeric: sorts numbers\n text: sorts text alphabetically, taking case into account\n (also known as case sensitive). All letters of one case\n precede the first letter of the other case:\n - aabzABZ, if sort_order = \"asc\" (ascending sort)\n - ZBAzbaa, if sort_order = \"desc\" (descending sort)\n\n textnocase: sorts text alphabetically, without regard to\n case (also known as case-insensitive). A letter in varying\n cases precedes the next letter:\n - aAaBbBzzZ, in an ascending sort; preserves original\n intra-letter order\n - ZzzBbBaAa, in a descending sort; reverses original\n intra-letter order Values: numeric, text, textnocase.\n\nsort_order (string) - asc: ascending sort order. Default.\n - aabzABZ or aAaBbBzzZ, depending on value of sort_type,\n for letters\n - from smaller to larger, for numbers\n\n desc: descending sort order.\n - ZBAzbaa or ZzzBbBaAa, depending on value of sort_type,\n for letters\n - from larger to smaller, for numbers. Default: asc. Values: asc, desc.\n\ncallback (any) - The callback function which take two elements of an array, Returns whether the first is less than (-1), equal to (0) or greater than (1) the second one(like as compare function).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arraySum",
		"body": "arraySum(${1:array})",
		"description": " The sum of values in an array. If the array parameter value is\n an empty array, returns zero.\n\nUSAGE:\nnumeric arraySum(array)\n\nPARAMETERS:\n\narray (array) - An array name or variable name\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arraySwap",
		"body": "arraySwap(${1:array}, ${2:position1}, ${3:position2})",
		"description": " Swaps array values of an array at specified positions. This\n function is more efficient than multiple cfset tags\n\nUSAGE:\nboolean arraySwap(array, position1, position2)\n\nPARAMETERS:\n\narray (array) - The array in which postions will be swapped\n\nposition1 (numeric) - Positon of 1st element to swap.\n\nposition2 (numeric) - Postion of 2nd element to swap.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayToList",
		"body": "arrayToList(${1:array})",
		"description": " Converts a one-dimensional array to a list.\n\nUSAGE:\nstring arrayToList(array [, delimiter])\n\nPARAMETERS:\n\narray (array)\n\ndelimiter (string). Default: ,. Values: ,, |, _, ;, :.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "arrayToStruct",
		"body": "arrayToStruct(${1:array})",
		"description": "Transform the array to a struct, the index of the array is the key of the struct\n\nUSAGE:\nstruct arrayToStruct(array)\n\nPARAMETERS:\n\narray (array)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "asc",
		"body": "asc(${1:String})",
		"description": " Determines the value of a character.\n\nUSAGE:\nnumeric asc(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "asin",
		"body": "asin(${1:number})",
		"description": " Determines the arcsine of a number. The arcsine is the angle\n whose sine is number.\n\nUSAGE:\nnumeric asin(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "atn",
		"body": "atn(${1:number})",
		"description": " Arctangent function. The arctangent is the angle whose tangent\n is number.\n\nUSAGE:\nnumeric atn(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "beat",
		"body": "beat()",
		"description": "Outputs the swatch internet time (or beat time) of the passed local time.\n\nUSAGE:\nnumeric beat( [time])\n\nPARAMETERS:\n\ntime (any) - The local time to get beat time from\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "binaryDecode",
		"body": "binaryDecode(${1:String}, ${2|hex,uu,base64|})",
		"description": " Converts a string to a binary object. Used to convert\n binary data that has been encoded into string format\n back into binary data.\n\nUSAGE:\nbinary binaryDecode(String, binaryencoding)\n\nPARAMETERS:\n\nString (string) - A string containing encoded binary data.\n\nbinaryencoding (string) - A string specifying the algorithm used to encode the original\n binary data into a string; must be one of the following:\n - hex: characters 0-9 and A-F represent the hexadecimal value\n of each byte; for example, 3A.\n - UU: data is encoded using the UNIX UUencode algorithm.\n - base64: data is encoded using the Base64 algorithm. Values: hex, uu, base64.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "binaryEncode",
		"body": "binaryEncode(${1:binarydata}, ${2|hex,uu,base64|})",
		"description": " Converts binary data to a string.\n\nUSAGE:\nstring binaryEncode(binarydata, encoding)\n\nPARAMETERS:\n\nbinarydata (binary) - A string containing encoded binary data.\n\nencoding (string) - A string specifying the encoding method to use to represent\n the data; one of the following:\n - hex: use characters 0-9 and A-F represent the hexadecimal value\n of each byte; for example, 3A.\n - UU: use the UNIX UUencode algorithm to convert the data.\n - base64: use the Base64 algorithm to convert the data. Values: hex, uu, base64.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "bitAnd",
		"body": "bitAnd(${1:number1}, ${2:number2})",
		"description": " Performs a bitwise logical AND operation.\n\nUSAGE:\nnumeric bitAnd(number1, number2)\n\nPARAMETERS:\n\nnumber1 (numeric) - Integer\n\nnumber2 (numeric) - Integer\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "bitMaskClear",
		"body": "bitMaskClear(${1:number}, ${2:start}, ${3:length})",
		"description": " Performs a bitwise mask clear operation.\n\nUSAGE:\nnumeric bitMaskClear(number, start, length)\n\nPARAMETERS:\n\nnumber (numeric) - Integer\n\nstart (numeric) - Start bit for the mask (Integer in the range 0-31, inclusive)\n\nlength (numeric) - Length of bits in the mask (Integer in the range 0-31, inclusive)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "bitMaskRead",
		"body": "bitMaskRead(${1:number}, ${2:start}, ${3:length})",
		"description": " Performs a bitwise mask read operation.\n Returns an integer representation of the corresponding bits specified in the mask.\n\nUSAGE:\nnumeric bitMaskRead(number, start, length)\n\nPARAMETERS:\n\nnumber (numeric) - Integer\n\nstart (numeric) - Start bit for the read mask (Integer in the range 0-31, inclusive)\n\nlength (numeric) - Length of bits in the read mask (Integer in the range 0-31, inclusive)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "bitMaskSet",
		"body": "bitMaskSet(${1:number}, ${2:mask}, ${3:start}, ${4:length})",
		"description": " Performs a bitwise mask set operation.\n\nUSAGE:\nnumeric bitMaskSet(number, mask, start, length)\n\nPARAMETERS:\n\nnumber (numeric) - Integer\n\nmask (numeric) - Integer mask\n\nstart (numeric) - Start bit for the set mask (Integer in the range 0-31, inclusive)\n\nlength (numeric) - Length of bits in the set mask (Integer in the range 0-31, inclusive)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "bitNot",
		"body": "bitNot(${1:number})",
		"description": " Performs a bitwise logical NOT operation.\n\nUSAGE:\nnumeric bitNot(number)\n\nPARAMETERS:\n\nnumber (numeric) - Integer\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "bitOr",
		"body": "bitOr(${1:number1}, ${2:number2})",
		"description": " Performs a bitwise logical OR operation.\n\nUSAGE:\nnumeric bitOr(number1, number2)\n\nPARAMETERS:\n\nnumber1 (numeric) - Integer\n\nnumber2 (numeric) - Integer\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "bitShln",
		"body": "bitShln(${1:number}, ${2:count})",
		"description": " Performs a bitwise shift-left, no-rotation operation.\n\nUSAGE:\nnumeric bitShln(number, count)\n\nPARAMETERS:\n\nnumber (numeric) - Integer\n\ncount (numeric) - Number of bits to shift to the left (Integer in the range 0-31, inclusive)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "bitShrn",
		"body": "bitShrn(${1:number}, ${2:count})",
		"description": " Performs a bitwise shift-right, no-rotation operation.\n\nUSAGE:\nnumeric bitShrn(number, count)\n\nPARAMETERS:\n\nnumber (numeric) - Integer\n\ncount (numeric) - Number of bits to shift to the right (Integer in the range 0-31, inclusive)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "bitXor",
		"body": "bitXor(${1:number1}, ${2:number2})",
		"description": " Performs a bitwise logical XOR operation.\n\nUSAGE:\nnumeric bitXor(number1, number2)\n\nPARAMETERS:\n\nnumber1 (numeric) - Integer\n\nnumber2 (numeric) - Integer\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "booleanFormat",
		"body": "booleanFormat(${1:number})",
		"description": "Evaluates the input as a boolean, and outputs either true or false. If not a boolean throws an exception.\n\nUSAGE:\nnumeric booleanFormat(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "bundleInfo",
		"body": "bundleInfo(${1:obj})",
		"description": "Returns information from the class of the given bundle object comes from\n\nUSAGE:\nstructure bundleInfo(obj)\n\nPARAMETERS:\n\nobj (any) - Object from bundle\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheClear",
		"body": "cacheClear()",
		"description": "Flushes the cache\n\nUSAGE:\nnumeric cacheClear( [filterOrTags] [, cacheName])\n\nPARAMETERS:\n\nfilterOrTags (any) - A String containing a key filter for the elements in the cache to flush, the filter follow the same rules as for cfdirectory-filter OR an Array containing tags defined when put into the cache\n\ncacheName (string) - definition of the cache used by name, when not set the \"default Object Cache\" defined in Lucee Administrator is used instead\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheCount",
		"body": "cacheCount()",
		"description": "Returns the amount (integer) of keys stored in the cache.\n\nUSAGE:\nnumeric cacheCount( [cacheName])\n\nPARAMETERS:\n\ncacheName (string) - Definition of the cache used by name, when not set the \"default Object Cache\" defined in Lucee Administrator is used instead\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheDelete",
		"body": "cacheDelete(${1:id})",
		"description": "Deletes a single element from the cache.\n\nUSAGE:\nvoid cacheDelete(id [, throwOnError] [, cacheName])\n\nPARAMETERS:\n\nid (string) - The id of the element to delete, can also contain a \",\" (not used as separator)\n\nthrowOnError (boolean) - Define if the functions throws an exception when the element does not exist (default is false)\n\ncacheName (string) - Definition of the cache used by name, when not set the \"default Object Cache\" defined in Lucee Administrator is used instead\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheGet",
		"body": "cacheGet(${1:id})",
		"description": " Gets an object that is stored in the cache.\n\nUSAGE:\nany cacheGet(id [, region] [, cacheName] [, throwWhenNotExist])\n\nPARAMETERS:\n\nid (string) - The ID value assigned to the cache object when it was created\n\nregion (string) - CF10+ The name of the cache region where the object was stored. Applies only to ACF.\n\ncacheName (string) - Lucee4.5+ The name of the cache where the object was stored. Applies only to Lucee.\n\nthrowWhenNotExist (boolean) - Lucee4.5+ Enable/Disable throwing an error if element not exists. Default: false. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheGetAll",
		"body": "cacheGetAll()",
		"description": "Returns a structure containing all elements inside the cache.\n\nUSAGE:\nstruct cacheGetAll( [filter] [, cacheName])\n\nPARAMETERS:\n\nfilter (string) - Key filter for the elements, the filter follows the same rules as the cfdirectory-filter\n\ncacheName (string) - Definition of the cache used by name, when not set the \"default Object Cache\" defined in Lucee Administrator is used instead\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheGetAllIds",
		"body": "cacheGetAllIds()",
		"description": " Gets the IDs of all objects stored in the cache.\n\nUSAGE:\narray cacheGetAllIds()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheGetDefaultCacheName",
		"body": "cacheGetDefaultCacheName(${1|object,resource,template,query|})",
		"description": "Returns the default cache name for the specified type.\n\nUSAGE:\nstring cacheGetDefaultCacheName(type)\n\nPARAMETERS:\n\ntype (string) - Cache type Values: object, resource, template, query.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheGetMetadata",
		"body": "cacheGetMetadata(${1:id})",
		"description": " Gets the metadata values for a cached object.\n\nUSAGE:\nstruct cacheGetMetadata(id [, template] [, region])\n\nPARAMETERS:\n\nid (string) - The ID of the cached object.\n\ntemplate (string) - Gets metadata for template caches.\n\nregion (string) - The name of the cache region\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheGetProperties",
		"body": "cacheGetProperties(${1|object,template,resource,query|})",
		"description": " Gets the cache properties for the object cache, the page cache, or both. The information is application-specific.\n\nUSAGE:\narray cacheGetProperties(type)\n\nPARAMETERS:\n\ntype (string) - Properties to get information for\n\n\"\" or not set - information to all default caches\nobject - information to \"Default Object\" Cache\ntemplate - information to \"Default Template\" Cache\nquery - information to \"Default Query\" Cache\nresource - information to \"Default Resource\" Cache\n{cache name} - information to a specific cache Values: object, template, resource, query.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheGetSession",
		"body": "cacheGetSession(${1:objectType})",
		"description": "Lets you retrieve the underlying cache object to access additional cache functionality that is not implemented in the tag cfcache.\n\nNote: Caution! Using the cacheGetSession function might pose security vulnerabilities. If you wish to disable the usage of this function, add it to Sandbox Security. \n\nUSAGE:\nany cacheGetSession(objectType [, isKey])\n\nPARAMETERS:\n\nobjectType () - Any of the following values: object, template, or name of the user-defined cache\n\nisKey (boolean) - Set to true if objectType is user-defined cache.. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheIdExists",
		"body": "cacheIdExists(${1:id})",
		"description": " Used to find if a cached object exists in the cache region. The region can be the default cache region (either at server or application level) or the custom region you specify.\n\nUSAGE:\nboolean cacheIdExists(id [, region])\n\nPARAMETERS:\n\nid () - The ID of the cached object.\n\nregion () - The cache region where you check for the cached object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheKeyExists",
		"body": "cacheKeyExists(${1:key})",
		"description": "Returns true/false whether the cache contains an element with the specified keyname.\n\nUSAGE:\nboolean cacheKeyExists(key [, cacheName])\n\nPARAMETERS:\n\nkey (string) - Key to check\n\ncacheName (string) - Definition of the cache used by name, when not set the \"default Object Cache\" defined in Lucee Administrator is used instead.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cachePut",
		"body": "cachePut(${1:id}, ${2:value})",
		"description": " Stores an object in the cache.\n\nUSAGE:\nvoid cachePut(id, value [, timespan] [, idleTime] [, region] [, cacheName])\n\nPARAMETERS:\n\nid (string) - Unique identifier for the cached value\n\nvalue (string) - The value to cache\n\ntimespan (date) - The interval until the object is flushed from the cache, as a decimal number of days. One way to set the value is to use the return value from the CreateTimeSpan function. The default is to not time out the object.\n\nidleTime (date) - A decimal number of days after which the object is flushed from the cache if it is not accessed during that time. One way to set the value is to use the return value from the CreateTimeSpan function.\n\nregion (string) - CF10+ Specifies the cache region where you can place the cache object. Applies only to ACF.\n\ncacheName (string) - Lucee4.5+ Definition of the cache used by name. Applies only to Lucee.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheRegionExists",
		"body": "cacheRegionExists(${1:region})",
		"description": " Checks if the cache region exists.\n\nUSAGE:\nboolean cacheRegionExists(region)\n\nPARAMETERS:\n\nregion () - Name of the cache region.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheRegionNew",
		"body": "cacheRegionNew(${1:region})",
		"description": "Creates a new custom cache region (if no cache region exists).\n\nUSAGE:\nvoid cacheRegionNew(region [, properties] [, throwOnError])\n\nPARAMETERS:\n\nregion () - Name of the new cache region to be created.\n\nproperties () - Struct that contains the cache region properties.\n\nthrowOnError () - A Boolean value specifying if to throw an exception if the cache region name you specify already exists. The default value is true.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheRegionRemove",
		"body": "cacheRegionRemove(${1:region})",
		"description": "Removes a specified cache region.\n\nUSAGE:\nvoid cacheRegionRemove(region)\n\nPARAMETERS:\n\nregion () - Name of the cache region that has to be removed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheRemove",
		"body": "cacheRemove(${1:ids})",
		"description": "Removes an object from the cache.\n\nUSAGE:\nvoid cacheRemove(ids [, throwOnError] [, key] [, exact])\n\nPARAMETERS:\n\nids (string) - Comma delimited list of cache IDs. A list of all available IDs can be retrieved using cacheGetAllIds. CF11+ Can take an array instead of a list.\n\nthrowOnError (boolean) - `true` throws an error when cache ID does not exist. Values: true, false.\n\nkey (string) - CF10+ Specify which cache region to search\n\nexact (boolean) - CF10+ Used to partially match on keys. Default: true. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheRemoveAll",
		"body": "cacheRemoveAll()",
		"description": " Removes all stored objects in a cache region. If no cache region is specified, objects in the default region are removed.\n\nUSAGE:\nvoid cacheRemoveAll( [region])\n\nPARAMETERS:\n\nregion () - Indicates the cache region from which to remove the stored objects. If no value is specified, default cache region is considered by default.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cacheSetProperties",
		"body": "cacheSetProperties(${1:properties})",
		"description": " Set multiple cache settings\n\nUSAGE:\nvoid cacheSetProperties(properties)\n\nPARAMETERS:\n\nproperties (structure) - Key-Value pairs of properties to be changed\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "callStackDump",
		"body": "callStackDump()",
		"description": " Similar to the function callStackGet except that it returns a string representation of the call stack.\n\nUSAGE:\nvoid callStackDump( [destination])\n\nPARAMETERS:\n\ndestination (string) - If you chose \"file\" and do not provide the complete path to the file, the file is written to the temp directory as determined by the function `getTempDirectory()`.. Default: browser. Values: console, browser, file.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "callStackGet",
		"body": "callStackGet()",
		"description": " Returns an array of structs. Each struct contains template name, line number, and function name (if applicable). This is a snapshot of all function calls or invocations.\n\nUSAGE:\narray callStackGet()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "canonicalize",
		"body": "canonicalize(${1:input}, ${2:restrictMultiple}, ${3:restrictMixed})",
		"description": "Canonicalize or decode the input string. Canonicalization is simply the operation of reducing a possibly encoded string down to its simplest form. This is important because attackers frequently use encoding to change their input in a way that will bypass validation filters, but still be interpreted properly by the target of the attack. Note that data encoded more than once is not something that a normal user would generate and should be regarded as an attack.\n\nUSAGE:\nstring canonicalize(input, restrictMultiple, restrictMixed [, throwOnError])\n\nPARAMETERS:\n\ninput (string) - Required. The string to be encoded.\n\nrestrictMultiple (boolean) - Required. If set to true, multiple encoding is restricted. This argument can be set to true to restrict the input if multiple or nested encoding is detected. If this argument is set to true, and the given input is multiple or nested encoded using one encoding scheme an error will be thrown.\n\nrestrictMixed (boolean) - Required. If set to true, mixed encoding is restricted. This argument can be set to true to restrict the input if mixed encoding is detected. If this argument is set to true, and the given input is encoded using mixed encoding, an error will be thrown.\n\nthrowOnError (boolean) - (Added in Adobe CF11+) Optional. Default value is false. If the value of this argument is true, and if restrictMultiple or restrictMixed is true and the given input contains mixed or multiple encoded strings, an exception will be thrown. If the value of this argument is false, an empty string will be returned instead of an exception.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ceiling",
		"body": "ceiling(${1:number})",
		"description": "Determines the closest integer that is greater than a\n specified floating point number.\n\nUSAGE:\nnumeric ceiling(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cfusion_Decrypt",
		"body": "cfusion_Decrypt(${1:string}, ${2:key})",
		"description": "Decrypts the given string, alias for function call decrypt(string,key,\"cfmx_compat\",\"hex\").\n\nUSAGE:\nstring cfusion_Decrypt(string, key)\n\nPARAMETERS:\n\nstring (string)\n\nkey (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cfusion_Encrypt",
		"body": "cfusion_Encrypt(${1:string}, ${2:key})",
		"description": "Encrypts the given string, alias for function call encrypt(string,key,\"cfmx_compat\",\"hex\").\n\nUSAGE:\nstring cfusion_Encrypt(string, key)\n\nPARAMETERS:\n\nstring (string)\n\nkey (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "charsetDecode",
		"body": "charsetDecode(${1:String}, ${2|utf-8,iso-8859-1,windows-1252,us-ascii,shift_jis,iso-2022-jp,euc-jp,euc-kr,big5,euc-cn,utf-16|})",
		"description": " Converts as string to a binary representation.\n\nUSAGE:\nbinary charsetDecode(String, encoding)\n\nPARAMETERS:\n\nString (string) - A string containing data to encode in binary format.\n\nencoding (string) - A string specifying encoding of the input data. Values: utf-8, iso-8859-1, windows-1252, us-ascii, shift_jis, iso-2022-jp, euc-jp, euc-kr, big5, euc-cn, utf-16.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "charsetEncode",
		"body": "charsetEncode(${1:binaryobject}, ${2|utf-8,iso-8859-1,windows-1252,us-ascii,shift_jis,iso-2022-jp,euc-jp,euc-kr,big5,euc-cn,utf-16|})",
		"description": " Uses the specified encoding to convert binary data to a string.\n\nUSAGE:\nbinary charsetEncode(binaryobject, encoding)\n\nPARAMETERS:\n\nbinaryobject (binary) - A variable containing binary data to decode into text.\n\nencoding (string) - The character encoding that was used to encode the string into binary format. Values: utf-8, iso-8859-1, windows-1252, us-ascii, shift_jis, iso-2022-jp, euc-jp, euc-kr, big5, euc-cn, utf-16.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "chr",
		"body": "chr(${1|9: \\t tab,10: \\n New Line,13: \\r Carriage Return|})",
		"description": " Converts a numeric value to a UCS-2 character.\n\nUSAGE:\nstring chr(number)\n\nPARAMETERS:\n\nnumber (numeric) Values: 9: \\t tab, 10: \\n New Line, 13: \\r Carriage Return.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cjustify",
		"body": "cjustify(${1:String}, ${2:length})",
		"description": " Centers a string in a field length.\n\nUSAGE:\nstring cjustify(String, length)\n\nPARAMETERS:\n\nString (string)\n\nlength (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "collectionEach",
		"body": "collectionEach(${1:collection}, ${2:closure})",
		"description": "Iterate over each item contained in the collection given\n\nUSAGE:\nvoid collectionEach(collection, closure)\n\nPARAMETERS:\n\ncollection (any)\n\nclosure (function)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "collectionEvery",
		"body": "collectionEvery(${1:collection}, ${2:closure})",
		"description": "Checks if every item passes the truth test of an expression given in the closure\n\nUSAGE:\nboolean collectionEvery(collection, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\ncollection (any)\n\nclosure (function)\n\nparallel (boolean)\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "collectionFilter",
		"body": "collectionFilter(${1:collection}, ${2:filter})",
		"description": "Filters items from a collection passing the filter condition\n\nUSAGE:\nany collectionFilter(collection, filter [, parallel] [, maxThreads])\n\nPARAMETERS:\n\ncollection (any)\n\nfilter (function)\n\nparallel (boolean)\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "collectionMap",
		"body": "collectionMap(${1:collection}, ${2:closure})",
		"description": "Maps values in a collection\n\nUSAGE:\nany collectionMap(collection, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\ncollection (any)\n\nclosure (function)\n\nparallel (boolean)\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "collectionReduce",
		"body": "collectionReduce(${1:collection}, ${2:closure})",
		"description": "Sum amount of an item value for every item\n\nUSAGE:\nany collectionReduce(collection, closure [, initalValue])\n\nPARAMETERS:\n\ncollection (any)\n\nclosure (function)\n\ninitalValue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "collectionSome",
		"body": "collectionSome(${1:collection}, ${2:closure})",
		"description": "Similar to collectionEvery, except it returns true if at least one item returns true\n\nUSAGE:\nboolean collectionSome(collection, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\ncollection (any)\n\nclosure (function)\n\nparallel (boolean)\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "compare",
		"body": "compare(${1:string1}, ${2:string2})",
		"description": " Performs a case-sensitive comparison of two strings.\n -1, if string1 is less than string2\n 0, if string1 is equal to string2\n 1, if string1 is greater than string2\n\nUSAGE:\nnumeric compare(string1, string2)\n\nPARAMETERS:\n\nstring1 (string)\n\nstring2 (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "compareNoCase",
		"body": "compareNoCase(${1:string1}, ${2:string2})",
		"description": " Performs a case-insensitive comparison of two strings.\n An indicator of the difference:\n A negative number, if string1 is less than string2\n 0, if string1 is equal to string2\n A positive number, if string1 is greater than string2\n\nUSAGE:\nnumeric compareNoCase(string1, string2)\n\nPARAMETERS:\n\nstring1 (string)\n\nstring2 (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "componentCacheClear",
		"body": "componentCacheClear()",
		"description": "\n\nUSAGE:\nvoid componentCacheClear()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "componentCacheList",
		"body": "componentCacheList()",
		"description": "\n\nUSAGE:\nstruct componentCacheList()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "componentInfo",
		"body": "componentInfo(${1:component})",
		"description": "\n\nUSAGE:\nstruct componentInfo(component)\n\nPARAMETERS:\n\ncomponent (component)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "compress",
		"body": "compress(${1|bzip,bzip2,tbz,tbz2,tar,tar.bz,tar.gz,gzip,tgz,zip|}, ${2:source}, ${3:target})",
		"description": "Compress a file or a directory with files.\n\nUSAGE:\nboolean compress(format, source, target [, includeBaseFolder] [, mode])\n\nPARAMETERS:\n\nformat (string) - The format in which you want to compress the files. Values: bzip, bzip2, tbz, tbz2, tar, tar.bz, tar.gz, gzip, tgz, zip.\n\nsource (string) - Path (relative or absolute) to the file or directory you want to compress.\n\ntarget (string) - Path (relative or absolute) including the name, where you want to save the compressed output-file.\n\nincludeBaseFolder (boolean) - Compress the directory or just the content of the directory.. Default: true.\n\nmode (string). Default: 777.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "contractPath",
		"body": "contractPath(${1:path})",
		"description": "\n\nUSAGE:\nstring contractPath(path [, placeholder])\n\nPARAMETERS:\n\npath (string)\n\nplaceholder (boolean)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "cos",
		"body": "cos(${1:number})",
		"description": " Calculates the cosine of an angle that is entered\n in radians.\n A number; the cosine of the angle.\n\nUSAGE:\nnumeric cos(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createDate",
		"body": "createDate(${1:year}, ${2:month}, ${3:day})",
		"description": " Creates a date/time object\n\nUSAGE:\ndate createDate(year, month, day)\n\nPARAMETERS:\n\nyear (numeric)\n\nmonth (numeric) - Numeric month of the year (1-12)\n\nday (numeric) - Day of the month\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createDateTime",
		"body": "createDateTime(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minute}, ${6:second})",
		"description": " Creates a date-time object.\n\nUSAGE:\ndate createDateTime(year, month, day, hour, minute, second)\n\nPARAMETERS:\n\nyear (numeric)\n\nmonth (numeric) - Numeric month of the year (1-12)\n\nday (numeric) - Day of the month\n\nhour (numeric) - Hour of the day in 24-hour notation (0-23)\n\nminute (numeric)\n\nsecond (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createDynamicProxy",
		"body": "createDynamicProxy(${1:fullyQualifiedNameOfCFC})",
		"description": "Creates a dynamic proxy of the ColdFusion component that is passed to a Java library. Dynamic proxy lets you pass ColdFusion components to Java objects. Java objects can work with the ColdFusion components seamlessly as if they are native Java objects.\n\nUSAGE:\nany createDynamicProxy(fullyQualifiedNameOfCFC [, interfaceName])\n\nPARAMETERS:\n\nfullyQualifiedNameOfCFC () - Fully qualified name of the ColdFusion component or a CFC instance.\n\ninterfaceName () - An array of Java interfaces for which you want to create the dynamic proxy.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createGUID",
		"body": "createGUID()",
		"description": "Creates a globally unique identifier (32 character hexadecimal string)\n\nUSAGE:\nguid createGUID()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createObject",
		"body": "createObject(${1|component,corba,com,java,webservice,.NET,dotnet|}, ${2:context}, ${3:class}, ${4:locale}, ${5:servername}, ${6:component_name}, ${7:urltowsdl})",
		"description": "The createObject function takes different arguments depending on the value of the type argument:\n\n createObject('component', cfcName)\n createObject('java', class)\n createObject('java', class, bundleName, bundleVersion) <small><em>(Lucee only)</em></small>\n createObject('webservice', urltowsdl, [, portname])\n createObject('.NET', class, assembly [, server, port, protocol, secure])\n createObject('com', class, context, serverName)\n\nUSAGE:\nany createObject(type, context, class, locale, servername, component_name, urltowsdl [, portname] [, OSGibundle] [, OSGiversion])\n\nPARAMETERS:\n\ntype (string) - The type of object Values: component, corba, com, java, webservice, .NET, dotnet.\n\ncontext (string)\n\nclass (string)\n\nlocale (string)\n\nservername (string)\n\ncomponent_name (string)\n\nurltowsdl (string) - WSDL file URL; location of web service\n\nportname (string) - The port name for the web service. This value is case-sensitive\n and corresponds to the port element's name attribute under the\n service element.\n Specify this parameter if the web service contains multiple ports.\n If no port name is specified, ColdFusion uses the first port found\n in the WSDL.\n\nOSGibundle (string) - Bundle where the object has to be located\n\nOSGiversion (string) - Specific version to\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createODBCDate",
		"body": "createODBCDate(${1:date})",
		"description": " Creates an ODBC date object.\n\nUSAGE:\ndate createODBCDate(date)\n\nPARAMETERS:\n\ndate (date) - Date or date/time object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createODBCDateTime",
		"body": "createODBCDateTime(${1:date})",
		"description": " Creates an ODBC date-time object.\n\nUSAGE:\ndate createODBCDateTime(date)\n\nPARAMETERS:\n\ndate (date) - Date or date/time object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createODBCTime",
		"body": "createODBCTime(${1:date})",
		"description": " Creates an ODBC time object.\n\nUSAGE:\ndate createODBCTime(date)\n\nPARAMETERS:\n\ndate (date) - Date or date/time object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createTime",
		"body": "createTime(${1:hour}, ${2:minute}, ${3:second})",
		"description": " Creates a time variable.\n\nUSAGE:\ndate createTime(hour, minute, second)\n\nPARAMETERS:\n\nhour (numeric) - Hour of the day in 24-hour notation (0-23)\n\nminute (numeric)\n\nsecond (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createTimespan",
		"body": "createTimespan(${1:days}, ${2:hours}, ${3:minutes}, ${4:seconds})",
		"description": "Returns a value that defines a time period, represented by a numeric (double) where 1 equals 1 day. You can add or subtract it from other date/time objects and use it with the cachedWithin attribute of cfquery.\n\nUSAGE:\nnumeric createTimespan(days, hours, minutes, seconds)\n\nPARAMETERS:\n\ndays (numeric) - The number of days ranging from 0 to 32768\n\nhours (numeric) - The number of hours\n\nminutes (numeric) - The number of minutes\n\nseconds (numeric) - The number of seconds\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createUniqueID",
		"body": "createUniqueID()",
		"description": "Creates a Unique Identifier for the current instance. If you want it to be Universal Unique use createUUID instead.\n\nUSAGE:\nstring createUniqueID()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "createUUID",
		"body": "createUUID()",
		"description": " Creates a Universally Unique Identifier (UUID). A UUID is a\n 35-character string representation of a unique 128-bit integer\n xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx : x is a hexadecimal digit (8-4-4-16).\n SQL Server UUIDs are similar but have a format of 8-4-4-4-12.\n\nUSAGE:\nuuid createUUID()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "csrfGenerateToken",
		"body": "csrfGenerateToken()",
		"description": " Generates a random token and stores it in the session to protect against Cross-Site Request Forgery (CSRF) attacks. You can optionally provide a specific key to store in the session, and optionally force the generation of a new token.\n\nUSAGE:\nstring csrfGenerateToken( [key] [, forceNew])\n\nPARAMETERS:\n\nkey (string) - A random token is generated based on the key provided. This key is stored in the session.\n\nforceNew (boolean) - If set to true, a new token is generated every time the method is called. If false, and in the case where a token already exists [for the key], the same key is returned.. Default: false. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "csrfVerifyToken",
		"body": "csrfVerifyToken(${1:token})",
		"description": "Validates the passed in token against the token stored in the session for a specific key. Used to help prevent Cross-Site Request Forgery (CSRF) attacks.\n\nUSAGE:\nboolean csrfVerifyToken(token [, key])\n\nPARAMETERS:\n\ntoken (string) - The passed in token that is to be validated against the token stored in the session.\n\nkey (string) - The key against which the token was originally generated.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ctCacheClear",
		"body": "ctCacheClear()",
		"description": "\n\nUSAGE:\nvoid ctCacheClear()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ctCacheList",
		"body": "ctCacheList()",
		"description": "\n\nUSAGE:\nstruct ctCacheList()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "datasourceFlushMetacache",
		"body": "datasourceFlushMetacache()",
		"description": "\n\nUSAGE:\nboolean datasourceFlushMetacache( [datasourceName])\n\nPARAMETERS:\n\ndatasourceName (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dateAdd",
		"body": "dateAdd(${1|yyyy,q,m,y,d,w,ww,h,n,s,l|}, ${2:number}, ${3:date})",
		"description": "Adds units of time to a date.\n\nUSAGE:\ndate dateAdd(datepart, number, date)\n\nPARAMETERS:\n\ndatepart (string) - `yyyy` - Year\n`q` - Quarter\n`m` - Month\n`y` - Day of year\n`d` - Day\n`w` - Week day\n`ww` - Week\n`h` - Hour\n`n` - Minute\n`s` - Second\n`l` - Millisecond Values: yyyy, q, m, y, d, w, ww, h, n, s, l.\n\nnumber (numeric) - The number of datepart units to add to the provided date.\n Negative integers move the date into the past, positive into the future.\n\ndate (date)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dateCompare",
		"body": "dateCompare(${1:date1}, ${2:date2})",
		"description": "Performs a full date/time comparison of two dates.\n `-1` if date1 is less than date2\n `0` if date1 is equal to date2\n `1` if date1 is greater than date2\n [DatePart] `yyyy`: Year; `m`: Month; `d`: Day; `h`: Hour; `n`: Minute; `s`: Second\n\nUSAGE:\nnumeric dateCompare(date1, date2 [, datePart])\n\nPARAMETERS:\n\ndate1 (date) - A date to compare\n\ndate2 (date) - Another date to compare\n\ndatePart (string). Default: s. Values: yyyy, m, y, d, h, n, s.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dateConvert",
		"body": "dateConvert(${1|local2Utc,utc2Local|}, ${2:date})",
		"description": "Converts local time to Coordinated Universal Time (UTC), or UTC to local time. The function uses the daylight savings settings in the executing computer to compute daylight savings time, if required.\n\nUSAGE:\ndate dateConvert(type, date)\n\nPARAMETERS:\n\ntype (string) - 'local2Utc' - Converts local time to UTC time.\n'utc2Local' - Converts UTC time to local time. Values: local2Utc, utc2Local.\n\ndate (date)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dateDiff",
		"body": "dateDiff(${1|yyyy,q,m,y,d,w,ww,h,n,s|}, ${2:date1}, ${3:date2})",
		"description": "Determines the integer number of datepart units by which date1 is less than date2.\n\nUSAGE:\nnumeric dateDiff(datepart, date1, date2)\n\nPARAMETERS:\n\ndatepart (string) - yyyy: Year\n q: Quarter\n m: Month\n y: Day of year\n d: Day\n w: Weekday\n ww: Week\n h: Hour\n n: Minute\n s: Second\n Values: yyyy, q, m, y, d, w, ww, h, n, s.\n\ndate1 (date)\n\ndate2 (date)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dateFormat",
		"body": "dateFormat(${1:date})",
		"description": "Formats a date value using U.S. date formats. When formatting both date and time, use dateTimeFormat. For international date support, use lsDateFormat.\n\nUSAGE:\nstring dateFormat(date [, mask])\n\nPARAMETERS:\n\ndate (date) - The date object\n\nmask (string) - Each keyword below will be replaced in the string by its respective datepart \n`d`: Day of the month as digits; no leading zero for single-digit days.\n`dd`: Day of the month as digits; leading zero for single-digit days.\n`ddd`: Day of the week as a three-letter abbreviation.\n`dddd`: Day of the week as its full name.\n`e`: Day in a week (CF2016u3+).\n`f`: Day of a week in a month (CF2016u3+).\n`m`: Month as digits; no leading zero for single-digit months.\n`mm`: Month as digits; leading zero for single-digit months.\n`mmm`: Month as a three-letter abbreviation.\n`mmmm`: Month as its full name.\n`k`: Hour in a day (CF2016u3+).\n`w`: Week in a month (CF2016u3+).\n`W`: Week in a year (CF2016u3+).\n`yy`: Year as last two digits; leading zero for years less than 10.\n`yyyy`,`YYYY`: Year represented by four digits.\n`gg`: Period/era string.\n`z`: Time zone in unstandardized abbreviated format, for example, EST (CF2016u3+).\n`Z`: Time zone in hours of offset (RFC 822 TimeZone), for example, +0530 (CF2016u3+).\n`X`: Time zone in hours of offset in ISO 8601 format. (CF2016u3+).\n\n The following keywords are shorthand for specific full formats and cannot be combined with other masks:\n`short`: equivalent to `m/d/y`\n`medium`: equivalent to `mmm d, yyyy`\n`long`: equivalent to `mmmm d, yyyy`\n`full`: equivalent to `dddd, mmmm d, yyyy`. Default: dd-mmm-yy.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "datePart",
		"body": "datePart(${1|yyyy,q,m,y,d,w,ww,h,n,s,l|}, ${2:date})",
		"description": "Extracts a part from a datetime value as a numeric.\n\nUSAGE:\nnumeric datePart(datepart, date)\n\nPARAMETERS:\n\ndatepart (string) - yyyy: Year \n q: Quarter \n m: Month \n y: Day of year \n d: Day \n w: Weekday \n ww: Week \n h: Hour \n n: Minute \n s: Second \n l: Millisecond Values: yyyy, q, m, y, d, w, ww, h, n, s, l.\n\ndate (date)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dateTimeFormat",
		"body": "dateTimeFormat(${1:dateTime})",
		"description": " Formats a datetime value using U.S. date and time formats. For international date support, use LSDateTimeFormat.\n[mask - quicky]\nd: Day of the month as digits; no leading zero for single-digit days.\ndd: Day of the month as digits; leading zero for single-digit days.\nEEE: Day of the week as a three-letter abbreviation.\nEEEE: Day of the week as its full name.\nm: Month as digits; no leading zero for single-digit months.\nmm: Month as digits; leading zero for single-digit months.\nmmm: Month as a three-letter abbreviation.\nmmmm: Month as its full name.\nyy: Year as last two digits; leading zero for years less than 10.\nyyyy: Year represented by four digits.\n Y YY: Week Year\nG: Period/era string.\nh: hours; no leading zero for single-digit hours (12-hour clock)\nhh: hours; leading zero for single-digit hours (12-hour clock)\nH: hours; no leading zero for single-digit hours (24-hour clock)\nHH: hours; leading zero for single-digit hours (24-hour clock)\nn: minutes; no leading zero for single-digit minutes\nnn: minutes; a leading zero for single-digit minutes\ns: seconds; no leading zero for single-digit seconds\nss: seconds; leading zero for single-digit seconds\nl or L: milliseconds, with no leading zeros\nt: one-character time marker string, such as A or P\ntt: multiple-character time marker string, such as AM or PM\n\nUSAGE:\nstring dateTimeFormat(dateTime [, mask] [, timezone])\n\nPARAMETERS:\n\ndateTime (date) - A datetime value.\n\nmask (string) - The mask used to format the datetime.\n\ntimezone (string) - The timezone to use. Can be 3 letter code (UTC) or full America/New_York Values: UTC, GMT, America/Chicago.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "day",
		"body": "day(${1:date})",
		"description": " Determines the day of the month, in a date.\n The ordinal for the day of the month, ranging from 1 to 31.\n\nUSAGE:\nnumeric day(date)\n\nPARAMETERS:\n\ndate (date) - Date or date/time object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dayOfWeek",
		"body": "dayOfWeek(${1:date})",
		"description": " Determines the day of the week, in a date. Returns the ordinal for the day of the week, as an integer in the range 1 (Sunday) to 7 (Saturday).\n\nUSAGE:\nnumeric dayOfWeek(date)\n\nPARAMETERS:\n\ndate (date) - Date or date/time object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dayOfWeekAsString",
		"body": "dayOfWeekAsString(${1|1,2,3,4,5,6,7|})",
		"description": " Determines the day of the week as a string from 1-7\n\nUSAGE:\nstring dayOfWeekAsString(day_of_week)\n\nPARAMETERS:\n\nday_of_week (numeric) - Only values from 1 to 7 are valid.\nWeek starting with 1 for Sunday and ends with 7 for Saturday. Values: 1, 2, 3, 4, 5, 6, 7.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dayOfWeekShortAsString",
		"body": "dayOfWeekShortAsString(${1|1,2,3,4,5,6,7|})",
		"description": "\n\nUSAGE:\nstring dayOfWeekShortAsString(day_of_week [, locale])\n\nPARAMETERS:\n\nday_of_week (numeric) - Only values from 1 to 7 are valid.\nWeek starting with 1 for Sunday and ends with 7 for Saturday. Values: 1, 2, 3, 4, 5, 6, 7.\n\nlocale (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dayOfYear",
		"body": "dayOfYear(${1:date})",
		"description": " Determines the day of the year, in a date.\n\nUSAGE:\nnumeric dayOfYear(date)\n\nPARAMETERS:\n\ndate (date) - Date or date/time object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "daysInMonth",
		"body": "daysInMonth(${1:date})",
		"description": " Determines the number of days in a month.\n\nUSAGE:\nnumeric daysInMonth(date)\n\nPARAMETERS:\n\ndate (date) - Date or date/time object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "daysInYear",
		"body": "daysInYear(${1:date})",
		"description": " Determines the number of days in a year.\n\nUSAGE:\nnumeric daysInYear(date)\n\nPARAMETERS:\n\ndate (date) - Date or date/time object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "de",
		"body": "de(${1:String})",
		"description": "Delay evaluation of a string as an expression, when it is passed as a parameter to the IIf or Evaluate functions. Escapes any double quotation marks in the parameter and wraps the result in double quotation marks. It does not escape `#` so the string could still be evaluated in some cases.\n\nUSAGE:\nstring de(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "decimalFormat",
		"body": "decimalFormat(${1:number})",
		"description": " Converts a number to a decimal-formatted string.\n\nUSAGE:\nstring decimalFormat(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "decodeForHTML",
		"body": "decodeForHTML(${1:inputString})",
		"description": " Decodes an HTML encoded string.\n\nUSAGE:\nstring decodeForHTML(inputString)\n\nPARAMETERS:\n\ninputString () - The encoded string to decode.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "decodeFromURL",
		"body": "decodeFromURL(${1:inputString})",
		"description": " Decodes an encoded HTML URL string.\n\nUSAGE:\nstring decodeFromURL(inputString)\n\nPARAMETERS:\n\ninputString () - The encoded URL string to decode..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "decrementValue",
		"body": "decrementValue(${1:number})",
		"description": "Decrements the integer part of a number. Same as x=x-1 or x--\n\nUSAGE:\nnumeric decrementValue(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "decrypt",
		"body": "decrypt(${1:encrypted_string}, ${2:key})",
		"description": " Decrypts a string that is encrypted with the Encrypt function.\n\nUSAGE:\nstring decrypt(encrypted_string, key [, algorithm] [, encoding] [, ivorsalt] [, iterations])\n\nPARAMETERS:\n\nencrypted_string (string) - String to decrypt.\n\nkey (string) - Key or seed used to encrypt the string.\n * For the CFMX_COMPAT algorithm, any combination of any\n number of characters; used as a seed used to generate\n a 32-bit encryption key.\n * For all other algorithms, a key in the format used by the\n algorithm. For these algorithms, use the GenerateSecretKey\n function to generate the key.\n\nalgorithm (string) - The algorithm to use to decrypt the string. Must be the same\n as the algorithm used to encrypt the string.\n * CFMX_COMPAT: the algorithm used in ColdFusion MX and prior\n releases. This algorithm is the least secure option (default).\n * AES: the Advanced Encryption Standard specified by the\n National Institute of Standards and Technology (NIST) FIPS-197.\n * BLOWFISH: the Blowfish algorithm defined by Bruce Schneier.\n * DES: the Data Encryption Standard algorithm defined by NIST FIPS-46-3.\n * DESEDE: the \"Triple DES\" algorithm defined by NIST FIPS-46-3.. Default: CFMX_COMPAT. Values: CFMX_COMPAT, AES, BLOWFISH, DES, DESEDE.\n\nencoding (string) - The binary encoding used to represent the data as a string.\n Must be the same as the algorithm used to encrypt the string.\n * Base64: the Base64 algorithm, as specified by IETF RFC 2045.\n * Hex: the characters A-F and 0-9 represent the hexadecimal byte values.\n * UU: the UNIX standard UUEncode algorithm (default).\n If you specify this parameter, you must also specify the algorithm parameter.. Default: UU. Values: UU, Base64, Hex.\n\nivorsalt (binary) - Specify this parameter to adjust ColdFusion encryption to match\n the details of other encryption software. If you specify this\n parameter, you must also specify the algorithm parameter.\n * For Block Encryption Algorithms: This is the binary\n Initialization Vector value to use with the algorithm. The\n algorithm must contain a Feedback Mode other than ECB. This\n must be a binary value that is exactly the same size as the\n algorithm block size.\n * For Password Based Encryption Algorithms: This is the binary\n Salt value to transform the password into a key.\n\niterations (numeric) - The number of iterations to transform the password into a\n binary key. Specify this parameter to adjust ColdFusion\n encryption to match the details of other encryption software.\n If you specify this parameter, you must also specify the\n algorithm parameter with a Password Based Encryption (PBE)\n algorithm. Do not specify this parameter for Block Encryption\n Algorithms. You must use the same value to encrypt and\n decrypt the data.\n * For Password Based Encryption Algorithms: This is the\n binary Salt value to transform the password into a key.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "decryptBinary",
		"body": "decryptBinary(${1:bytes}, ${2:key})",
		"description": " Decrypts encrypted binary data with the specified key, value, algorithm, salt, and iterations.\n\nUSAGE:\nstring decryptBinary(bytes, key [, algorithm] [, ivorsalt] [, iterations])\n\nPARAMETERS:\n\nbytes (string) - Binary data to decrypt.\n\nkey (string) - Key or seed used to encrypt the string.\n * For the CFMX_COMPAT algorithm, any combination of any\n number of characters; used as a seed used to generate\n a 32-bit encryption key.\n * For all other algorithms, a key in the format used by the\n algorithm. For these algorithms, use the GenerateSecretKey\n function to generate the key.\n\nalgorithm (string) - The algorithm to use to decrypt the string. Must be the same\n as the algorithm used to encrypt the string.\n * CFMX_COMPAT: the algorithm used in ColdFusion MX and prior\n releases. This algorithm is the least secure option (default).\n * AES: the Advanced Encryption Standard specified by the\n National Institute of Standards and Technology (NIST) FIPS-197.\n * BLOWFISH: the Blowfish algorithm defined by Bruce Schneier.\n * DES: the Data Encryption Standard algorithm defined by NIST FIPS-46-3.\n * DESEDE: the \"Triple DES\" algorithm defined by NIST FIPS-46-3.. Default: CFMX_COMPAT. Values: CFMX_COMPAT, AES, BLOWFISH, DES, DESEDE.\n\nivorsalt (binary) - Specify this parameter to adjust ColdFusion encryption to match\n the details of other encryption software. If you specify this\n parameter, you must also specify the algorithm parameter.\n * For Block Encryption Algorithms: This is the binary\n Initialization Vector value to use with the algorithm. The\n algorithm must contain a Feedback Mode other than ECB. This\n must be a binary value that is exactly the same size as the\n algorithm block size.\n * For Password Based Encryption Algorithms: This is the binary\n Salt value to transform the password into a key.\n\niterations (numeric) - The number of iterations to transform the password into a\n binary key. Specify this parameter to adjust ColdFusion\n encryption to match the details of other encryption software.\n If you specify this parameter, you must also specify the\n algorithm parameter with a Password Based Encryption (PBE)\n algorithm. Do not specify this parameter for Block Encryption\n Algorithms. You must use the same value to encrypt and\n decrypt the data.\n * For Password Based Encryption Algorithms: This is the\n binary Salt value to transform the password into a key.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "deleteClientVariable",
		"body": "deleteClientVariable(${1:name})",
		"description": " Deletes a client variable. (To test for the existence of a\n variable, use IsDefined.)\n\nUSAGE:\nboolean deleteClientVariable(name)\n\nPARAMETERS:\n\nname (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "deserialize",
		"body": "deserialize(${1:StringToBeDeserialized}, ${2:type}, ${3:useCustomSerializer})",
		"description": "Deserializes a string.\n\nUSAGE:\nstring deserialize(StringToBeDeserialized, type, useCustomSerializer)\n\nPARAMETERS:\n\nStringToBeDeserialized () - A string that needs to be deserialized.\n\ntype () - String. The type of the data to be deserialized. ColdFusion by default supports XML and JSON formats. You can also implement support for other types in the CustomSerializer CFC.\n\nuseCustomSerializer () - Boolean. Whether to use the custom serializer or not. The default value is true. The custom serializer will be always used for deserialization. If false, the XML/JSON deserialization will be done using the default ColdFusion behavior. If any other type is passed with useCustomSerializer as false, then TypeNotSupportedException will be thrown.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "deserializeJSON",
		"body": "deserializeJSON(${1:jsonvar}, ${2:useCustomSerializer})",
		"description": " Converts a JSON (JavaScript Object Notation) string data representation into CFML data, such as a CFML structure or array.\n\nUSAGE:\nany deserializeJSON(jsonvar [, strictMapping], useCustomSerializer)\n\nPARAMETERS:\n\njsonvar (string) - A string that contains a valid JSON construct, or variable that represents one.\n\nstrictMapping (boolean) - A Boolean value that specifies whether to convert the JSON strictly. If true everything becomes structures.. Default: true.\n\nuseCustomSerializer (boolean) - CF11+ Use custom serializer if defined. See: https://helpx.adobe.com/coldfusion/developing-applications/changes-in-coldfusion/restful-web-services-in-coldfusion.html. Default: true.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "deserializeXML",
		"body": "deserializeXML(${1:StringToBeDeserialized}, ${2:useCustomSerializer})",
		"description": "Deserializes a string in XML format to a ColdFusion object.\n\nUSAGE:\nany deserializeXML(StringToBeDeserialized, useCustomSerializer)\n\nPARAMETERS:\n\nStringToBeDeserialized () - A string that needs to be deserialized.\n\nuseCustomSerializer () - Boolean. Whether to use the custom serializer or not. The default value is true. The custom serializer will be always used for XML deserialization. If false, the XML/JSON deserialization will be done using the default ColdFusion behavior. If any other type is passed with useCustomSerializer as false, then TypeNotSupportedException will be thrown.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "directoryCopy",
		"body": "directoryCopy(${1:source}, ${2:destination})",
		"description": "Copies the contents of a directory to a destination directory\n\nUSAGE:\nvoid directoryCopy(source, destination [, recurse] [, filter] [, createPath])\n\nPARAMETERS:\n\nsource (string) - Pathname of directory from which you copy content.\n\ndestination (string) - Path of the destination directory. If not an absolute path, it is relative to the source directory.\n\nrecurse (boolean) - If true, copies the subdirectories, otherwise only the files in the source directory.. Default: false.\n\nfilter (any) - Filter to be used to filter the data copied: - A string that uses \"*\" as a wildcard, for example, \"*.cfm\" - a UDF (User defined Function) using the following pattern \"functioname(String path):boolean\", the function is run for every single file, if the function returns true, then the file is will be added to the list otherwise it will be omitted.\n\ncreatePath (boolean) - Lucee4.5+ If set to false, expects all parent directories to exist. If set to true, it will generate necessary directories.. Default: true.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "directoryCreate",
		"body": "directoryCreate(${1:path})",
		"description": " Creates new directory for specified path\n\nUSAGE:\nvoid directoryCreate(path)\n\nPARAMETERS:\n\npath (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "directoryDelete",
		"body": "directoryDelete(${1:path}, ${2|true,false|})",
		"description": " Deltes directory for given path\n\nUSAGE:\nvoid directoryDelete(path, recurse)\n\nPARAMETERS:\n\npath (string)\n\nrecurse (boolean) Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "directoryExists",
		"body": "directoryExists(${1:absolute_path})",
		"description": " Determines whether a directory exists.\n\nUSAGE:\nboolean directoryExists(absolute_path)\n\nPARAMETERS:\n\nabsolute_path (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "directoryList",
		"body": "directoryList(${1:path})",
		"description": "List the contents of a directory. Returns either an array, or a query.\n\nUSAGE:\nany directoryList(path [, recurse] [, listInfo] [, filter] [, sort] [, type])\n\nPARAMETERS:\n\npath (string) - The path to a directory. If given a relative path, that path will be relative to the server\"s temp directory.\n\nrecurse (boolean) - If `true` directoryList traverses the directory tree.. Default: false. Values: true, false.\n\nlistInfo (string) - Sets the return type. `name` returns an array with only the file names, `path` returns an array with the full path names and `query` returns a query containing the follwing fields: `Attributes`, `DateLastModified`, `Directory`, `Link`, `Mode`, `Name`, `Size`, `Type`.. Default: path. Values: name, path, query.\n\nfilter (string) - Applies a filter to the listed files, for example, `*.jpg`. Multiple filters can be applied by using a pipe delimiter. For example: `*.doc|*.xls`\n\nsort (string) - Columns by which to sort. e.g. `Directory, Size DESC, DateLastModified`.\n\ntype (string) - CF11+ Lucee5+ Filter the result to only include files, directories, or both.. Default: all. Values: file, dir, all.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "directoryRename",
		"body": "directoryRename(${1:path}, ${2:newPath})",
		"description": " Renames given directory\n\nUSAGE:\nvoid directoryRename(path, newPath)\n\nPARAMETERS:\n\npath (string)\n\nnewPath (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "directorySize",
		"body": "directorySize(${1:path})",
		"description": " Returns size of given directory\n\nUSAGE:\nnumeric directorySize(path)\n\nPARAMETERS:\n\npath (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dollarFormat",
		"body": "dollarFormat(${1:number})",
		"description": " Formats a string in U.S. currency format. (For other currencies, use\n LSCurrencyFormat or LSEuroCurrencyFormat.).\n\nUSAGE:\nstring dollarFormat(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "dotnetToCFType",
		"body": "dotnetToCFType(${1:variable_name})",
		"description": " Explicitly converts a value returned by a .NET method to the corresponding ColdFusion data type.\n\nUSAGE:\nany dotnetToCFType(variable_name)\n\nPARAMETERS:\n\nvariable_name (Varible)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "duplicate",
		"body": "duplicate(${1:variable})",
		"description": " Returns a clone, also known as a deep copy, of a variable\n or XML object. There is no reference to the original variable.\n\nUSAGE:\nany duplicate(variable)\n\nPARAMETERS:\n\nvariable (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "each",
		"body": "each(${1:collection}, ${2:closure})",
		"description": "Same as collectionEach expect it has the two additional optinal params `parallel` and `maxThreads`\n\nUSAGE:\nvoid each(collection, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\ncollection (any)\n\nclosure (function)\n\nparallel (boolean)\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "echo",
		"body": "echo(${1:string})",
		"description": "While writeOutput writes to the page-output stream, this function writes to the main response buffer\n\nUSAGE:\nboolean echo(string)\n\nPARAMETERS:\n\nstring (string) - String to be written to the output buffer\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "empty",
		"body": "empty(${1|\"\",{},[]|})",
		"description": "Checks if a variable is empty\n\nUSAGE:\nboolean empty(variable)\n\nPARAMETERS:\n\nvariable (any) Values: \"\", {}, [].\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encodeForCSS",
		"body": "encodeForCSS(${1:inputString})",
		"description": " Encodes the input string for use in CSS.\n\nUSAGE:\nstring encodeForCSS(inputString [, canonicalize])\n\nPARAMETERS:\n\ninputString () - The string to encode.\n\ncanonicalize () - If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false. When this parameter is not specified, canonicalization will not happen. By default, when canonicalization is performed, both mixed and multiple encodings will be allowed. To use any other combinations you should canonicalize using canonicalize method and then do encoding.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encodeForDN",
		"body": "encodeForDN(${1:string})",
		"description": "Encodes the given string for safe output in LDAP Distinguished Names. Lucee only, not supported on Adobe CF.\n\nUSAGE:\nstring encodeForDN(string)\n\nPARAMETERS:\n\nstring () - string to encode.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encodeForHTML",
		"body": "encodeForHTML(${1:inputString})",
		"description": "Encodes the inputString for safe output in the body of a HTML tag. The encoding in meant to mitigate Cross Site Scripting (XSS) attacks. This function can provide more protection from XSS than the HTMLEditFormat or XMLFormat functions do.\n\nUSAGE:\nstring encodeForHTML(inputString [, canonicalize])\n\nPARAMETERS:\n\ninputString (string) - A string to encode\n\ncanonicalize (boolean) - When true runs the canonicalize function against the input before encoding. This argument is not supported on Lucee.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encodeForHTMLAttribute",
		"body": "encodeForHTMLAttribute(${1:inputString})",
		"description": "Encodes the inputString for safe output in the attribute value of an HTML attribute, such as table width or image height. The encoding is meant to mitigate Cross Site Scripting (XSS) attacks.\n\nUSAGE:\nstring encodeForHTMLAttribute(inputString [, canonicalize])\n\nPARAMETERS:\n\ninputString (string) - A string to encode\n\ncanonicalize (boolean) - When true runs the canonicalize function against the input before encoding. This argument is not supported on Lucee.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encodeForJavaScript",
		"body": "encodeForJavaScript(${1:inputString})",
		"description": "Encodes the inputString for safe output within JavaScript code. The encoding in meant to mitigate Cross Site Scripting (XSS) attacks. This function can provide more protection from XSS than JSStringFormat does.\n\nUSAGE:\nstring encodeForJavaScript(inputString [, canonicalize])\n\nPARAMETERS:\n\ninputString (string) - A string to encode\n\ncanonicalize (boolean) - When true runs the canonicalize function against the input before encoding. This argument is not supported on Lucee.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encodeForLDAP",
		"body": "encodeForLDAP(${1:string})",
		"description": "Encodes the given string for safe output in LDAP queries.\n\nUSAGE:\nstring encodeForLDAP(string)\n\nPARAMETERS:\n\nstring () - String to encode.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encodeForURL",
		"body": "encodeForURL(${1:inputString})",
		"description": "Encodes the input string for use in URLs.\n\nUSAGE:\nstring encodeForURL(inputString [, canonicalize])\n\nPARAMETERS:\n\ninputString () - The string to encode.\n\ncanonicalize () - If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false. When this parameter is not specified, canonicalization will not happen. By default, when canonicalization is performed, both mixed and multiple encodings will be allowed. To use any other combinations you should canonicalize using canonicalize method and then do encoding.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encodeForXML",
		"body": "encodeForXML(${1:inputString})",
		"description": "Encodes a string for safe use within an XML tag body. Use `encodeForXMLAttribute` for variables output inside an XML attribute value.\n\nUSAGE:\nstring encodeForXML(inputString [, canonicalize])\n\nPARAMETERS:\n\ninputString () - The string to encode.\n\ncanonicalize (boolean) - When `true` the canonicalize function is called before encoding the input. If set to false, the given input string will just be encoded, both mixed and multiple encodings will be allowed.. Default: false. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encodeForXMLAttribute",
		"body": "encodeForXMLAttribute(${1:inputString})",
		"description": "Encodes a string for safe output within an XML attribute. Use encodeForXML when outputting a variable inside a XML tag body.\n\nUSAGE:\nstring encodeForXMLAttribute(inputString [, canonicalize])\n\nPARAMETERS:\n\ninputString () - The string to encode.\n\ncanonicalize (boolean) - When `true` the canonicalize function is called before encoding the input. If set to false, the given input string will just be encoded, both mixed and multiple encodings will be allowed.. Default: false. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encodeForXPath",
		"body": "encodeForXPath(${1:inputString})",
		"description": "Returns an encoded string for using with XPATH.\n\nUSAGE:\nstring encodeForXPath(inputString [, canonicalize])\n\nPARAMETERS:\n\ninputString (string) - The string to encode.\n\ncanonicalize (boolean) - If set to true, canonicalization happens before encoding.\nIf set to false, the given input string will just be encoded. The default value for canonicalize is false.\nWhen this parameter is not specified, canonicalization will not happen.\n\nBy default, when canonicalization is performed, both mixed and multiple encodings will be allowed. To use any other combinations you should canonicalize using canonicalize method and then do encoding.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encrypt",
		"body": "encrypt(${1:String}, ${2:key})",
		"description": " Encrypts a string. Uses a symmetric key-based algorithm, in which the same key is used to encrypt and decrypt a string. The security of the encrypted string depends on maintaining the secrecy of the key. Algorithm support is determined by the installed default JCE provider.\n\nUSAGE:\nstring encrypt(String, key [, algorithm] [, encoding] [, ivorsalt] [, iterations])\n\nPARAMETERS:\n\nString (string) - String to encrypt.\n\nkey (string) - Key or seed used to encrypt the string.\n * For the CFMX_COMPAT algorithm, any combination of any number of characters; used as a seed used to generate a 32-bit encryption key.\n * For all other algorithms, a key in the format used by the\n algorithm. For these algorithms, use the GenerateSecretKey\n function to generate the key.\n\nalgorithm (string) - The algorithm to use to encrypt the string. \n * CFMX_COMPAT: the algorithm used in ColdFusion MX and prior releases. This algorithm is the least secure option (default).\n * AES: the Advanced Encryption Standard specified by the National Institute of Standards and Technology (NIST) FIPS-197.\n * BLOWFISH: the Blowfish algorithm defined by Bruce Schneier.\n * DES: the Data Encryption Standard algorithm defined by NIST FIPS-46-3.\n * DESEDE: the \"Triple DES\" algorithm defined by NIST FIPS-46-3.. Default: CFMX_COMPAT. Values: CFMX_COMPAT, AES, BLOWFISH, DES, DESEDE.\n\nencoding (string) - The binary encoding used to represent the data as a string.\n Must be the same as the algorithm used to encrypt the string.\n * Base64: the Base64 algorithm, as specified by IETF RFC 2045.\n * Hex: the characters A-F and 0-9 represent the hexadecimal byte values.\n * UU: the UNIX standard UUEncode algorithm (default).\n If you specify this parameter, you must also specify the algorithm parameter.. Default: UU. Values: UU, Base64, Hex.\n\nivorsalt (binary) - Specify this parameter to adjust ColdFusion encryption to match\n the details of other encryption software. If you specify this\n parameter, you must also specify the algorithm parameter.\n * For Block Encryption Algorithms: This is the binary\n Initialization Vector value to use with the algorithm. The\n algorithm must contain a Feedback Mode other than ECB. This\n must be a binary value that is exactly the same size as the\n algorithm block size.\n * For Password Based Encryption Algorithms: This is the binary\n Salt value to transform the password into a key.\n\niterations (numeric) - The number of iterations to transform the password into a\n binary key. Specify this parameter to adjust ColdFusion\n encryption to match the details of other encryption software.\n If you specify this parameter, you must also specify the\n algorithm parameter with a Password Based Encryption (PBE)\n algorithm. Do not specify this parameter for Block Encryption\n Algorithms. You must use the same value to encrypt and\n decrypt the data.\n * For Password Based Encryption Algorithms: This is the\n binary Salt value to transform the password into a key.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "encryptBinary",
		"body": "encryptBinary(${1:bytes}, ${2:key})",
		"description": " Encrypts binary data using a specific algorithm and encoding method.\n\nUSAGE:\nstring encryptBinary(bytes, key [, algorithm] [, ivorsalt] [, iterations])\n\nPARAMETERS:\n\nbytes (string) - Bindary data to encrypt.\n\nkey (string) - Key or seed used to encrypt the string.\n * For the CFMX_COMPAT algorithm, any combination of any\n number of characters; used as a seed used to generate\n a 32-bit encryption key.\n * For all other algorithms, a key in the format used by the\n algorithm. For these algorithms, use the GenerateSecretKey\n function to generate the key.\n\nalgorithm (string) - The algorithm to use to encrypt the string. \n * CFMX_COMPAT: the algorithm used in ColdFusion MX and prior\n releases. This algorithm is the least secure option (default).\n * AES: the Advanced Encryption Standard specified by the\n National Institute of Standards and Technology (NIST) FIPS-197.\n * BLOWFISH: the Blowfish algorithm defined by Bruce Schneier.\n * DES: the Data Encryption Standard algorithm defined by NIST FIPS-46-3.\n * DESEDE: the \"Triple DES\" algorithm defined by NIST FIPS-46-3.. Default: CFMX_COMPAT. Values: CFMX_COMPAT, AES, BLOWFISH, DES, DESEDE.\n\nivorsalt (binary) - Specify this parameter to adjust ColdFusion encryption to match\n the details of other encryption software. If you specify this\n parameter, you must also specify the algorithm parameter.\n * For Block Encryption Algorithms: This is the binary\n Initialization Vector value to use with the algorithm. The\n algorithm must contain a Feedback Mode other than ECB. This\n must be a binary value that is exactly the same size as the\n algorithm block size.\n * For Password Based Encryption Algorithms: This is the binary\n Salt value to transform the password into a key.\n\niterations (numeric) - The number of iterations to transform the password into a\n binary key. Specify this parameter to adjust ColdFusion\n encryption to match the details of other encryption software.\n If you specify this parameter, you must also specify the\n algorithm parameter with a Password Based Encryption (PBE)\n algorithm. Do not specify this parameter for Block Encryption\n Algorithms. You must use the same value to encrypt and\n decrypt the data.\n * For Password Based Encryption Algorithms: This is the\n binary Salt value to transform the password into a key.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "entityDelete",
		"body": "entityDelete(${1:entity})",
		"description": " Deletes the record from the database for the specified entity.\nentityDelete(entity)\n\nUSAGE:\nvoid entityDelete(entity)\n\nPARAMETERS:\n\nentity (variableName) - Name of the entity being deleted.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "entityLoad",
		"body": "entityLoad(${1:entityName})",
		"description": "Loads and returns an array of entities of the specified entityname or an entity if unique=true or if a primary key id is passed in to filterCriteria.\n\nUSAGE:\nany entityLoad(entityName [, filterCriteria] [, unique] [, sortOrder] [, options])\n\nPARAMETERS:\n\nentityName (string) - Name of CFC / Entity\n\nfilterCriteria (any) - A struct of key value pairs, or a primary key value\n\nunique (boolean) - When true a single entity is returned, otherwise an array\n\nsortOrder (string) - Column name and direction list, eg: LastName ASC, FirstName ASC\n\noptions (struct) - A struct with possible keys: ignorecase, sortorder, offset, maxresults, cacheable, cachename, timeout\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "entityLoadByExample",
		"body": "entityLoadByExample(${1:sampleEntity})",
		"description": " Loads and returns an array of objects that match the sampleentity.\nentityLoadByExample(sampleEntity,[unique])\n\nUSAGE:\nany entityLoadByExample(sampleEntity [, unique])\n\nPARAMETERS:\n\nsampleEntity (string) - No Help Available\n\nunique (boolean) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "entityLoadByPK",
		"body": "entityLoadByPK(${1:entityName}, ${2:id})",
		"description": " Loads and returns an array of objects for given primary key.\n\nUSAGE:\nany entityLoadByPK(entityName, id [, unique])\n\nPARAMETERS:\n\nentityName (string) - Name of the entity to be loaded\n\nid (string) - ID of the entity to be loaded\n\nunique (boolean) - Lucee4.5+ Specify whether you expect multiple or just one record\nIf set to `true`, the entity is returned\nIf set to `false` an array is returned to support multiple entities\nIf set to `true` but multiple entities would be returned an error will be thrown\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "entityMerge",
		"body": "entityMerge(${1:entity})",
		"description": " Attaches given enity to current ORM session\n\nUSAGE:\nany entityMerge(entity)\n\nPARAMETERS:\n\nentity (variableName) - The entity that must be attached to the ORM session.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "entityNameArray",
		"body": "entityNameArray()",
		"description": "Returns an array of all loaded entities\n\nUSAGE:\narray entityNameArray()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "entityNameList",
		"body": "entityNameList()",
		"description": "Returns a list of all loaded entities\n\nUSAGE:\nstring entityNameList( [delimiter])\n\nPARAMETERS:\n\ndelimiter (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "entityNew",
		"body": "entityNew(${1:entityName})",
		"description": " Creates a new instance of the persistent CFC with the entity name that you provide.\n\nUSAGE:\nany entityNew(entityName)\n\nPARAMETERS:\n\nentityName (string) - Entity name of the persistent CFC.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "entityReload",
		"body": "entityReload(${1:entity})",
		"description": " Reloads data for an entity that is already loaded.\n\nUSAGE:\nvoid entityReload(entity)\n\nPARAMETERS:\n\nentity (variableName) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "entitySave",
		"body": "entitySave(${1:entity})",
		"description": " Saves or updates data of the entity and all related entities to the database.\nentitySave(entity, [forceinsert])\n\nUSAGE:\nvoid entitySave(entity [, forceInsert])\n\nPARAMETERS:\n\nentity (variableName) - Name of the entity that must be saved in the database.\n\nforceInsert (boolean) - If true, then ColdFusion always tries to insert the entity as a new record. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "entityToQuery",
		"body": "entityToQuery(${1:orm_object})",
		"description": " Converts the input entity object or the input array of entity objects to a query object.\nentityToQuery (orm_object, [entity_name]) \nentityToQuery (orm_object_array, [entity_name])\n\nUSAGE:\nquery entityToQuery(orm_object [, entity_name])\n\nPARAMETERS:\n\norm_object (variableName) - Entity object that needs to be converted to a query object.\n\nentity_name (string) - Name of the entity. Use this optional parameter to return the query of the given entity in the case of inheritance mapping.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "esapiDecode",
		"body": "esapiDecode(${1:decodeFrom}, ${2:string})",
		"description": "\n\nUSAGE:\nstring esapiDecode(decodeFrom, string)\n\nPARAMETERS:\n\ndecodeFrom (string)\n\nstring (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "esapiEncode",
		"body": "esapiEncode(${1:encodeFor}, ${2:string})",
		"description": "Warning: esapiEncode() is deprecated, use encodeForHTML() instead! A Railo/Lucee specific function for calling the various encodeFor functions: encodeForHTML, etc. Not supported in ACF.\n\nUSAGE:\nstring esapiEncode(encodeFor, string)\n\nPARAMETERS:\n\nencodeFor (string) - Required. Encode for what, valid values are: - css: for output inside Cascading Style Sheets (CSS) - dn: for output in LDAP Distinguished Names - html: for output inside HTML - html_attr: for output inside HTML Attributes - javascript: for output inside Javascript - ldap: for output in LDAP queries - url: for output in URL - vbscript: for output inside vbscript - xml: for output inside XML - xml_attr: for output inside XML Attributes - xpath: for output in XPath.\n\nstring (string) - Required. String to encode.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "evaluate",
		"body": "evaluate(${1:expression1})",
		"description": "Evaluates one or more string expressions, dynamically, from left to right. (The results of an evaluation on the left can have meaning in an expression to the right.) Returns the result of evaluating the rightmost expression.\n\nUSAGE:\nany evaluate(expression1 [, expression2] [, expressionN])\n\nPARAMETERS:\n\nexpression1 (string)\n\nexpression2 (string)\n\nexpressionN (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "exp",
		"body": "exp(${1:number})",
		"description": " Calculates the exponent whose base is e that represents number.\n The constant e equals 2.71828182845904, the base of the natural\n logarithm. This function is the inverse of Log, the natural\n logarithm of number.\n\nUSAGE:\nnumeric exp(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "expandPath",
		"body": "expandPath(${1:relative_path})",
		"description": " Creates an absolute, platform-appropriate path that is\n equivalent to the value of relative_path, appended to the base\n path. This function (despite its name) can accept an absolute\n or relative path in the relative_path attribute\n\nUSAGE:\nstring expandPath(relative_path)\n\nPARAMETERS:\n\nrelative_path (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "extract",
		"body": "extract(${1|bzip,bzip2,tbz,tbz2,tar,tar.bz,tar.gz,gzip,tgz,zip|}, ${2:source}, ${3:target})",
		"description": "Extract the data of a compressed file.\n\nUSAGE:\nboolean extract(format, source, target)\n\nPARAMETERS:\n\nformat (string) - The format of the compressed file. Values: bzip, bzip2, tbz, tbz2, tar, tar.bz, tar.gz, gzip, tgz, zip.\n\nsource (string) - Path (relative or absolute) to the source-file or a directory with zip-files.\n\ntarget (string) - Path (relative or absolute) to the the directory, where you want to extract the data.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileAppend",
		"body": "fileAppend(${1:filePath}, ${2:data})",
		"description": "Appends the data contents to the file.\n\nUSAGE:\nvoid fileAppend(filePath, data [, charset])\n\nPARAMETERS:\n\nfilePath (string) - File path\n\ndata (string) - Data to append to the file\n\ncharset (string) - The character encoding in which the file contents is encoded.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileClose",
		"body": "fileClose(${1:fileObj})",
		"description": "Closes an on-disk or in-memory file that is open.\n\nUSAGE:\nvoid fileClose(fileObj)\n\nPARAMETERS:\n\nfileObj (any) - A file object\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileCopy",
		"body": "fileCopy(${1:source}, ${2:destination})",
		"description": " Copies the specified on-disk or in-memory source file to the specified destination file.\n\nUSAGE:\nvoid fileCopy(source, destination)\n\nPARAMETERS:\n\nsource (string) - Path where the file is located currently\n\ndestination (string) - Path where a copy of the file should be placed\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileDelete",
		"body": "fileDelete(${1:filepath})",
		"description": "Deletes the specified file on the server. fileDelete throws an exception whenever a file doesn't exist.\n\nUSAGE:\nvoid fileDelete(filepath)\n\nPARAMETERS:\n\nfilepath () - Pathname of the file to delete. If not an absolute path (starting with a drive letter and a colon, or a forward or backward slash), it is relative to the ColdFusion temporary directory, which is returned by the GetTempDirectory function.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileExists",
		"body": "fileExists(${1:path})",
		"description": " Determines whether a file exists\n\nUSAGE:\nboolean fileExists(path)\n\nPARAMETERS:\n\npath (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileGetMimeType",
		"body": "fileGetMimeType(${1:path}, ${2:fileObject}, ${3:strict})",
		"description": " Gets the MIME type for the file path/file object you have specified.\n\nUSAGE:\nstring fileGetMimeType(path, fileObject, strict)\n\nPARAMETERS:\n\npath () - Full path on disk to the file if strict is set to true.If you do not specify the full path, the file is assumed to be present in the temp directory, as returned by the function getTempDirectory.\n\nfileObject () - Name of the file object.\n\nstrict () - If false, determines the file type by extension. The default value is true.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileIsEOF",
		"body": "fileIsEOF(${1:fileObject})",
		"description": " Determines whether ColdFusion has reached the end of the file while reading it.\n\nUSAGE:\nboolean fileIsEOF(fileObject)\n\nPARAMETERS:\n\nfileObject (any) - The file object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileMove",
		"body": "fileMove(${1:source}, ${2:destination})",
		"description": " Moves file from source to destination\n\nUSAGE:\nvoid fileMove(source, destination)\n\nPARAMETERS:\n\nsource () - No Help Available\n\ndestination () - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileOpen",
		"body": "fileOpen(${1:filePath})",
		"description": "Opens a file\n\nUSAGE:\nany fileOpen(filePath [, mode] [, charset])\n\nPARAMETERS:\n\nfilePath () - An absolute path of an on-disk or in-memory file on the server\n\nmode () - Type of access you require to the file stream. Default: read. Values: read, readBinary, write, append.\n\ncharset () - Character encoding identified by the file's byte order mark, if any; otherwise, JVM default file character set Values: utf-8, iso-8859-1, windows-1252, us-ascii, shift_jis, iso-2022-jp, euc-jp, euc-kr, big5, euc-cn, utf-16.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileRead",
		"body": "fileRead(${1:filepath})",
		"description": " Reads an on-disk or in-memory text file or a file object created with the FileOpen function.\n\nUSAGE:\nstring fileRead(filepath [, charset])\n\nPARAMETERS:\n\nfilepath (string) - An absolute file path, or file object.\n\ncharset (string) - Character encoding used to read the file Values: utf-8, iso-8859-1, windows-1252, us-ascii.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileReadBinary",
		"body": "fileReadBinary(${1:filePath})",
		"description": "Reads an on-disk or in-memory binary file (such as an executable or image file) on the server, into a binary object\n\nUSAGE:\nbinary fileReadBinary(filePath)\n\nPARAMETERS:\n\nfilePath (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileReadLine",
		"body": "fileReadLine(${1:fileObj})",
		"description": "Returns the next line from the file\n\nUSAGE:\nstring fileReadLine(fileObj)\n\nPARAMETERS:\n\nfileObj () - file object previously opened with fileOpen()\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileSeek",
		"body": "fileSeek(${1:file}, ${2:position})",
		"description": " Shifts the file pointer to the given position. The file must be opened with seekable option\n\nUSAGE:\nvoid fileSeek(file, position)\n\nPARAMETERS:\n\nfile (variableName) - No Help Available\n\nposition (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileSetAccessMode",
		"body": "fileSetAccessMode(${1:filePath}, ${2:mode})",
		"description": " Sets the attributes of an on-disk file on UNIX or Linux. This function does not work with in-memory files.\n\nUSAGE:\nvoid fileSetAccessMode(filePath, mode)\n\nPARAMETERS:\n\nfilePath (string) - No Help Available\n\nmode (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileSetAttribute",
		"body": "fileSetAttribute(${1:filePath}, ${2:attribute})",
		"description": " Sets the attributes of an on-disk file in Windows. This function does not work with in-memory files.\n\nUSAGE:\nvoid fileSetAttribute(filePath, attribute)\n\nPARAMETERS:\n\nfilePath (string) - No Help Available\n\nattribute (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileSetLastModified",
		"body": "fileSetLastModified(${1:filePath}, ${2:date})",
		"description": " Sets the date when an on-disk or in-memory file was most recently modified.\n\nUSAGE:\nvoid fileSetLastModified(filePath, date)\n\nPARAMETERS:\n\nfilePath (string) - No Help Available\n\ndate (date) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileSkipBytes",
		"body": "fileSkipBytes(${1:file}, ${2:bytes})",
		"description": " Shifts the file pointer by the given number of bytes.\n\nUSAGE:\nvoid fileSkipBytes(file, bytes)\n\nPARAMETERS:\n\nfile (variableName) - No Help Available\n\nbytes (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileUpload",
		"body": "fileUpload(${1:destination})",
		"description": "Uploads file to a directory on the server.\n\nUSAGE:\nstruct fileUpload(destination [, fileField] [, nameConflict] [, accept] [, strict])\n\nPARAMETERS:\n\ndestination (string) - Path of directory in which to upload the file. If not an absolute path (starting with a drive letter and a colon, or a forward or backward slash), it is relative to the ColdFusion temporary directory returned by the function getTempDirectory. If the destination you specify does not exist, ColdFusion creates a file with the specified destination name.\n\nfileField (string) - Name of form field used to select the file. Do not use number signs (#) to specify the field name.\n\nnameConflict (string) - Action to take if file has the same name of a file in the directory. Values: error, skip, overwrite, makeunique.\n\naccept (string) - Specify a comma-delimited list of MIME types and/or file extensions to test the uploaded file agains. If the file is not of any of the types in this list, an error of type `coldfusion.tagext.io.FileUtils$InvalidUploadTypeException`is thrown.\nIf you specify file extensions, use this format: `.txt,.jpg`, not `txt`, `*.txt`, or `*.*`. You can use `*` as a wildcard to accept all files.\n\nstrict (boolean) - CF10+ Defines which method is used to determine the file type to check agains the value of the `accept` attribute.\n`true:` The first few bytes of the uploaded file are used to determine the MIME type.\n`false:` The MIME type provided by the browser in the request payload is used.. Default: true. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileUploadAll",
		"body": "fileUploadAll(${1:destination})",
		"description": "Uploads all files sent to the page in an HTTP request to a directory on the server.\n\nUSAGE:\narray fileUploadAll(destination [, accept] [, nameConflict])\n\nPARAMETERS:\n\ndestination (string) - Path of directory in which to upload the file. If not an absolute path (starting with a drive letter and a colon, or a forward or backward slash), it is relative to the ColdFusion temporary directory returned by the function getTempDirectory. If the destination you specify does not exist, ColdFusion creates a file with the specified destination name.\n\naccept (string) - Limits the MIME types to accept. Comma-delimited list. For example, the following code permits JPEG and Microsoft Word file uploads:'image/jpg,application/msword' .The browser uses the filename extension to determine file type.\n\nnameConflict (string) - Action to take if file has the same name of a file in the directory. Values: Error, Skip, Overwrite, MakeUnique.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileWrite",
		"body": "fileWrite(${1:file}, ${2:data})",
		"description": "Writes the data to the file object or file path speficied using the charset specified or the java default character set if unspecified.\n\nUSAGE:\nvoid fileWrite(file, data [, charset])\n\nPARAMETERS:\n\nfile (any) - A file object or a file system path string.\n\ndata (String) - The variable to  write to the file.\n\ncharset (String) - An optional character set that the data is encoded with. Defaults to the Java default character set (which is usually UTF-8).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fileWriteLine",
		"body": "fileWriteLine(${1:fileobj}, ${2:content})",
		"description": "Appends content to an existing file\n\nUSAGE:\nvoid fileWriteLine(fileobj, content)\n\nPARAMETERS:\n\nfileobj (any) - The file where you want to add your content\n\ncontent (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "find",
		"body": "find(${1:substring}, ${2:String})",
		"description": " Finds the first occurrence of a substring in a string, from a\n specified start position. The search is case-sensitive.\n\nUSAGE:\nnumeric find(substring, String [, start])\n\nPARAMETERS:\n\nsubstring (string) - The string you are looking for.\n\nString (string) - The string to search in.\n\nstart (numeric) - The position to start searching in the string (starts at 1). Default: 1. Values: 1.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "findNoCase",
		"body": "findNoCase(${1:substring}, ${2:String})",
		"description": " Finds the first occurrence of a substring in a string, from a\n specified start position. If substring is not in string,\n returns zero. The search is case-insensitive.\n\nUSAGE:\nnumeric findNoCase(substring, String [, start])\n\nPARAMETERS:\n\nsubstring (string)\n\nString (string)\n\nstart (numeric). Default: 1. Values: 1.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "findOneOf",
		"body": "findOneOf(${1:set}, ${2:string})",
		"description": " Finds the first occurrence of any one of a set of characters in a string,\n from a specified start position. The search is case-sensitive.\n\n Returns the position of the first member of set found in string; or 0, if no member of set is found in string.\n\nUSAGE:\nnumeric findOneOf(set, string [, start])\n\nPARAMETERS:\n\nset (string) - String which contains one or more characters to search for. \n\nstring (string) - String in which to search. \n\nstart (numeric) - Start position of search. Can be 1 through the length of the string to search.\n Choosing a start index greater than the length of the string to search will return a 0.. Default: 1. Values: 1 through string length..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "firstDayOfMonth",
		"body": "firstDayOfMonth(${1:date})",
		"description": " Determines the ordinal (day number, in the year) of the first\n day of the month in which a given date falls.\n\nUSAGE:\nnumeric firstDayOfMonth(date)\n\nPARAMETERS:\n\ndate (date) - Date or date/time object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "fix",
		"body": "fix(${1:number})",
		"description": " Converts a real number to an integer.\n\nUSAGE:\nnumeric fix(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "floor",
		"body": "floor(${1:number})",
		"description": "Returns the integer less than or equal to the input. This function is equivalent to the int function.\n\nUSAGE:\nnumeric floor(number)\n\nPARAMETERS:\n\nnumber (numeric) - A numeric value\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "formatBaseN",
		"body": "formatBaseN(${1:number}, ${2:radix})",
		"description": " String Converts number to a string, in the base specified by radix.\n\nUSAGE:\nstring formatBaseN(number, radix)\n\nPARAMETERS:\n\nnumber (numeric)\n\nradix (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "generatePBKDFKey",
		"body": "generatePBKDFKey(${1|PBKDF2WithHmacSHA1,PBKDF2WithSHA1,PBKDF2WithSHA224,PBKDF2WithSHA256,PBKDF2WithSHA384,PBKDF2WithSHA512|}, ${2:passphrase}, ${3:salt}, ${4:iterations}, ${5|true,false|})",
		"description": "CFML implementation of Password-Based Key-Derivation Function (PBKDF)\n\nUSAGE:\nstring generatePBKDFKey(algorithm, passphrase, salt, iterations, keySize)\n\nPARAMETERS:\n\nalgorithm (string) - Hashing algorithm used for generating key Values: PBKDF2WithHmacSHA1, PBKDF2WithSHA1, PBKDF2WithSHA224, PBKDF2WithSHA256, PBKDF2WithSHA384, PBKDF2WithSHA512.\n\npassphrase (string) - Passphrase used for the key. KEEP THIS SECRET.\n\nsalt (string) - A string which will be added to the passphrase before encryption.\n The standard recommends a salt length of at least 64 bits (8 characters). The salt needs to be generated using a pseudo-random number generator (e.g SHA1PRNG)\n\niterations (numeric) - The number of PBKDEF iterations to perform. A minimum recommended value is 1000\n\nkeySize (numeric) - The length in bytes of the key to generate Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "generateSecretKey",
		"body": "generateSecretKey()",
		"description": "Generates a secure random key value for use in the encrypt and decrypt functions.\n\nUSAGE:\nstring generateSecretKey( [algorithm] [, keysize])\n\nPARAMETERS:\n\nalgorithm (string) Values: CFMX_COMPAT, AES, BLOWFISH, DES, DESEDE.\n\nkeysize (numeric) - Number of bits requested in the key for the specified algorithm (when allowed by JDK).. Default: 128. Values: 128, 192, 256, 512.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getApplicationMetadata",
		"body": "getApplicationMetadata()",
		"description": "Returns the application settings that you have specified in the application, either in the Application.cfc or Application.cfm. Contains application settings such as name, sessionManagement, or invokeImplicitAccessor.\n\nUSAGE:\nstruct getApplicationMetadata()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getApplicationSettings",
		"body": "getApplicationSettings(${1:suppressFunction})",
		"description": "return all data from this scope, when using a application.cfc or all setting defined in tag cfapplication\n\nUSAGE:\nstruct getApplicationSettings(suppressFunction)\n\nPARAMETERS:\n\nsuppressFunction (boolean) - if true only data members from this scope are returned (no functions), default is false. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getAuthUser",
		"body": "getAuthUser()",
		"description": " Gets the name of an authenticated user.\n\nUSAGE:\nstring getAuthUser()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getBaseTagData",
		"body": "getBaseTagData(${1:tagname})",
		"description": " Used within a custom tag. Finds calling (ancestor) tag by\n name and accesses its data.\n\nUSAGE:\nany getBaseTagData(tagname [, instancenumber])\n\nPARAMETERS:\n\ntagname (string)\n\ninstancenumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getBaseTagList",
		"body": "getBaseTagList()",
		"description": " Gets ancestor tag names, starting with the parent tag.\n\nUSAGE:\nstring getBaseTagList( [delimiter])\n\nPARAMETERS:\n\ndelimiter (string). Default: ,.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getBaseTemplatePath",
		"body": "getBaseTemplatePath()",
		"description": "Gets the absolute server file system path of the requested CFML file.\n\nUSAGE:\nstring getBaseTemplatePath()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getBuiltinFunction",
		"body": "getBuiltinFunction(${1:name})",
		"description": "\n\nUSAGE:\nany getBuiltinFunction(name)\n\nPARAMETERS:\n\nname (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getCanonicalPath",
		"body": "getCanonicalPath(${1:path})",
		"description": "Returns the canonical path of the input path. If a directory a trailing slash is always used.\n\nUSAGE:\nstring getCanonicalPath(path)\n\nPARAMETERS:\n\npath (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getClassPath",
		"body": "getClassPath()",
		"description": "Returns an array containing the Java classpath of the current enviroment.\n\nUSAGE:\narray getClassPath()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getClientVariablesList",
		"body": "getClientVariablesList()",
		"description": " Finds the client variables to which a page has write access.\n Comma-delimited list of non-read-only client variables\n\nUSAGE:\nstring getClientVariablesList()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getComponentMetadata",
		"body": "getComponentMetadata(${1:path})",
		"description": " Gets metadata (such as the functions and implemented interfaces of a component) for a CFC or ColdFusion interface.\n\nUSAGE:\nstruct getComponentMetadata(path)\n\nPARAMETERS:\n\npath (string) - The dot-delimited path of the interface or CFC definition.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getContextRoot",
		"body": "getContextRoot()",
		"description": " Returns path to the J2EE server context root for the current request.\n\nUSAGE:\nstring getContextRoot()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getCpuUsage",
		"body": "getCpuUsage()",
		"description": " Gets the CPU usage with default or custom snapshot interval. The default interval is 1000 milli-seconds.\n\nUSAGE:\nnumeric getCpuUsage( [long ms])\n\nPARAMETERS:\n\nlong ms () - Time in milli-seconds. This is the time delay between two snapshots.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getCurrentContext",
		"body": "getCurrentContext()",
		"description": "\n\nUSAGE:\narray getCurrentContext()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getCurrentTemplatePath",
		"body": "getCurrentTemplatePath()",
		"description": "Gets the absolute server file system path of the file that calls this function.\n\nUSAGE:\nstring getCurrentTemplatePath()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getDirectoryFromPath",
		"body": "getDirectoryFromPath(${1:path})",
		"description": "Extracts a directory from an absolute path. Returns the absolute path with a trailing slash and omits the filename.\n\nUSAGE:\nstring getDirectoryFromPath(path)\n\nPARAMETERS:\n\npath (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getEncoding",
		"body": "getEncoding(${1|form,url|})",
		"description": " Returns the encoding (character set) of the Form or URL scope.\n\nUSAGE:\nstring getEncoding(scope_name)\n\nPARAMETERS:\n\nscope_name (string) Values: form, url.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getException",
		"body": "getException(${1:javaobject})",
		"description": " Used with the cftry and cfcatch tags. Retrieves a Java\n exception object from a Java object.\n\nUSAGE:\nany getException(javaobject)\n\nPARAMETERS:\n\njavaobject (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getFileFromPath",
		"body": "getFileFromPath(${1:path})",
		"description": " Extracts a filename from an absolute path.\n\nUSAGE:\nstring getFileFromPath(path)\n\nPARAMETERS:\n\npath (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getFileInfo",
		"body": "getFileInfo(${1:path})",
		"description": "Returns information about on-disk or in-memory file. Return struct contains keys such as: lastModified, size, path, name, type, canWrite, canRead, isHidden and more.\n\nUSAGE:\nstruct getFileInfo(path)\n\nPARAMETERS:\n\npath (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getFreeSpace",
		"body": "getFreeSpace(${1:path})",
		"description": " Gets information about free hard disk space or free in-memory VFS space.\n\nUSAGE:\nnumeric getFreeSpace(path)\n\nPARAMETERS:\n\npath () - The Path to the Hard Disk Drive or to the in-memory file system - ram.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getFunctionCalledName",
		"body": "getFunctionCalledName()",
		"description": " Returns the name of the variable used to call a defined function. This function can be used to return data from CFCs by simulating getters and setters.\n\nUSAGE:\nstring getFunctionCalledName()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getFunctionData",
		"body": "getFunctionData(${1:functionName})",
		"description": "Return information to a function as struct\n\nUSAGE:\nstruct getFunctionData(functionName [, dialect])\n\nPARAMETERS:\n\nfunctionName (string) - The function you want information for\n\ndialect (string) - The dialect you want details for. Default: current template's dialect. Values: CFML, Lucee.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getFunctionKeywords",
		"body": "getFunctionKeywords()",
		"description": "Returns all keywords defined with all functions.\n\nUSAGE:\narray getFunctionKeywords()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getFunctionList",
		"body": "getFunctionList()",
		"description": "Returns a struct with keys of the names of functions that are available in CFML.\n\nUSAGE:\nstruct getFunctionList()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getGatewayHelper",
		"body": "getGatewayHelper(${1:gatewayID})",
		"description": " Gets a Java GatewayHelper object that provides methods\n and properties for use with a ColdFusion event gateway.\n\nUSAGE:\nany getGatewayHelper(gatewayID)\n\nPARAMETERS:\n\ngatewayID (string) - Identifier of the gateway that provides the GatewayHelper object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getHTTPRequestData",
		"body": "getHTTPRequestData()",
		"description": "Returns HTTP request headers and request body. The resulting structure contains the following keys:\n\t content (the request body),\n\t headers (a structure of request headers),\n\t method (same as cgi.request_method),\n\t protocol (same as cgi.server_protocol).\n\nUSAGE:\nstruct getHTTPRequestData()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getHTTPTimeString",
		"body": "getHTTPTimeString()",
		"description": " Gets the current time, in the Universal Time code (UTC).\n\nUSAGE:\nstring getHTTPTimeString( [DateTime])\n\nPARAMETERS:\n\nDateTime (date). Default: now().\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getK2ServerDocCount",
		"body": "getK2ServerDocCount()",
		"description": "Determines the number of documents that can be searched by the\n CFML registered K2 Server. This function is used\n primarily by the CFML Verity and K2Server Administrator\n pages, and requires significant processing time. Avoid using\n it in production applications. This function uses Verity\n K2Server Release K2.2.0.\n\nUSAGE:\nnumeric getK2ServerDocCount()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getK2ServerDoccountLimit",
		"body": "getK2ServerDoccountLimit()",
		"description": "Gets the maximum number of documents that the CFML\n registered K2 Server is permitted to return from a search.\n This function is used primarily by the CFML Verity and\n K2Server Administrator pages. This function uses Verity\n K2Server Release K2.2.0.\n\nUSAGE:\nnumeric getK2ServerDoccountLimit()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getLocale",
		"body": "getLocale()",
		"description": " Gets the current geographic/language locale value.\n To set the default display format of date, time, number, and\n currency values in a CFML application session, you use\n the SetLocale function.\n\nUSAGE:\nstring getLocale()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getLocaleCountry",
		"body": "getLocaleCountry()",
		"description": "Gets the country where the locale belongs to.\n\nUSAGE:\nstring getLocaleCountry()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getLocaleDisplayName",
		"body": "getLocaleDisplayName()",
		"description": " Gets a locale value and displays the name in a manner\n that is appropriate to a specific locale. By default,\n gets the current locale in the current locale's language.\n\nUSAGE:\nstring getLocaleDisplayName()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getLocaleInfo",
		"body": "getLocaleInfo(${1|en,de_DE,de_ch,...|})",
		"description": "A short description that describes what the tag or function does.\n\nUSAGE:\nstruct getLocaleInfo(locale [, displayLocale])\n\nPARAMETERS:\n\nlocale (string) - Geographic/language locale value. Default: getLocale(). Values: en, de_DE, de_ch, ....\n\ndisplayLocale (string) - Locale's display name/Output language. Default: getLocaleDisplayName(). Values: English, German, French, ....\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getLocaleLanguage",
		"body": "getLocaleLanguage()",
		"description": "Gets the language from where the locale belongs to.\n\nUSAGE:\nstring getLocaleLanguage()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getLocalhostIP",
		"body": "getLocalhostIP()",
		"description": " Returns the localhost IP address, which is 127.0.0.1 for IPv4 and ::1 for IPv6 addresses.\n\nUSAGE:\nstring getLocalhostIP()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getLuceeID",
		"body": "getLuceeID()",
		"description": "Get ID, ApiKey and SecurityKey for the Server and the current Web-Context.\n\nUSAGE:\nstruct getLuceeID()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getMemoryUsage",
		"body": "getMemoryUsage()",
		"description": "\n\nUSAGE:\nquery getMemoryUsage( [type])\n\nPARAMETERS:\n\ntype (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getMetadata",
		"body": "getMetadata(${1:Object})",
		"description": " Gets metadata (the methods, properties, and parameters of a\n component) associated with an object that is deployed on the\n CFML server.\n\nUSAGE:\nany getMetadata(Object)\n\nPARAMETERS:\n\nObject (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getMetricData",
		"body": "getMetricData(${1|perf_monitor,simple_load,prev_req_time,avg_req_time|})",
		"description": " Gets server performance metrics\n [mode - quicky]\n perf_monitor - Returns internal data, in a structure.\n simple_load - Returns an integer value that is computed\n from the state of the server's internal\n queues. Indicates the overall server load.\n prev_req_time - Returns the time, in milliseconds, that it\n took the server to process the previous\n request.\n avg_req_time - Returns the average time, in milliseconds,\n that it takes the server to process a\n request.\n\nUSAGE:\nany getMetricData(mode)\n\nPARAMETERS:\n\nmode (string) Values: perf_monitor, simple_load, prev_req_time, avg_req_time.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getNumericDate",
		"body": "getNumericDate(${1:arg1})",
		"description": "\n\nUSAGE:\nnumeric getNumericDate(arg1)\n\nPARAMETERS:\n\narg1 (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getPageContext",
		"body": "getPageContext()",
		"description": " Gets the current java PageContext object that provides access to page attributes and configuration, request and response objects.\n\nUSAGE:\nany getPageContext()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getPrinterInfo",
		"body": "getPrinterInfo(${1:printer})",
		"description": " Determines which print attributes are supported by a selected printer.\n\nUSAGE:\nstruct getPrinterInfo(printer)\n\nPARAMETERS:\n\nprinter (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getPrinterList",
		"body": "getPrinterList(${1:printer})",
		"description": " Returns list of printers accessible by the ColdFusion server\n\nUSAGE:\nstring getPrinterList(printer)\n\nPARAMETERS:\n\nprinter (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getProfileSections",
		"body": "getProfileSections(${1:inifile})",
		"description": " Gets all the sections of an initialization file.\n An initialization file, as a struct whose format is as follows:\n - Each initialization file section name is a key in the\n struct\n - Each list of entries in a section of an initialization\n file is a value in the struct\n\nUSAGE:\nstruct getProfileSections(inifile)\n\nPARAMETERS:\n\ninifile (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getProfileString",
		"body": "getProfileString(${1:inipath}, ${2:section}, ${3:entry})",
		"description": "Gets an initialization file entry. An initialization file assigns values to configuration variables, also known as entries, that are set when the system\n boots, the operating system comes up, or an application starts. Returns the entry - if no value, returns an empty string.\n\nUSAGE:\nstring getProfileString(inipath, section, entry)\n\nPARAMETERS:\n\ninipath (string)\n\nsection (string)\n\nentry (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getReadableImageFormats",
		"body": "getReadableImageFormats()",
		"description": " Returns a list of image formats that ColdFusion can read on the operating system where ColdFusion is deployed.\n\nUSAGE:\nstring getReadableImageFormats()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getSafeHTML",
		"body": "getSafeHTML(${1:inputString}, ${2:PolicyFile}, ${3:throwOnError})",
		"description": "Sanitizes HTML using antisamy policy rules. \n\nUSAGE:\nany getSafeHTML(inputString, PolicyFile, throwOnError)\n\nPARAMETERS:\n\ninputString (string) - String to be sanitized\n\nPolicyFile (string) - File path for custom antisamy policy file. Can be defined in the application scope or if not defined will use Coldfusion  server default\n\nthrowOnError (boolean) - If true will throw error else empty string will be returned\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getSOAPRequest",
		"body": "getSOAPRequest()",
		"description": " Returns an XML object that contains the entire SOAP\n request. Usually called from within a web service CFC.\n\nUSAGE:\nany getSOAPRequest()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getSOAPRequestHeader",
		"body": "getSOAPRequestHeader(${1:namespace}, ${2:name})",
		"description": " Obtains a SOAP request header. Call only from within\n a CFC web service function that is processing a request\n as a SOAP web service.\n\nUSAGE:\nany getSOAPRequestHeader(namespace, name [, asXML])\n\nPARAMETERS:\n\nnamespace (string) - A String that is the namespace for the header\n\nname (string) - A String that is the name of the header\n\nasXML (boolean) - If True, the header is returned as a CFML XML object;\n if false (default), the header is returned as a Java object. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getSOAPResponse",
		"body": "getSOAPResponse(${1:webservice})",
		"description": " Returns an XML object that contains the entire\n SOAP response after invoking a web service.\n\nUSAGE:\nany getSOAPResponse(webservice)\n\nPARAMETERS:\n\nwebservice (string) - A webservice object as returned from the cfobject\n tag or the CreateObject function.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getSOAPResponseHeader",
		"body": "getSOAPResponseHeader(${1:webservice}, ${2:namespace}, ${3:name})",
		"description": " Returns a SOAP response header. Call this function\n from within code that is invoking a web service after\n making a web service request.\n\nUSAGE:\nany getSOAPResponseHeader(webservice, namespace, name [, asXML])\n\nPARAMETERS:\n\nwebservice (any) - A webservice object as returned from the cfobject tag\n or the Createobject function.\n\nnamespace (string) - A String that is the namespace for the header.\n\nname (string) - A String that is the name of the SOAP header.\n\nasXML (boolean) - If True, the header is returned as a CFML XML object;\n if false (default), the header is returned as a Java object. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getSystemFreeMemory",
		"body": "getSystemFreeMemory()",
		"description": " Gets details of free memory.\n\nUSAGE:\nnumeric getSystemFreeMemory()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getSystemTotalMemory",
		"body": "getSystemTotalMemory()",
		"description": " Gets details of the memory that is available for the operating system, in bytes.\n\nUSAGE:\nnumeric getSystemTotalMemory( [region])\n\nPARAMETERS:\n\nregion () - Indicates the cache region from which to remove the stored objects. If no value is specified, default cache region is considered by default.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getTagData",
		"body": "getTagData(${1:nameSpaceWithSeperator}, ${2:tagName})",
		"description": "Return information to a Tag as Struct\n\nUSAGE:\nstruct getTagData(nameSpaceWithSeperator, tagName [, dialect])\n\nPARAMETERS:\n\nnameSpaceWithSeperator (string)\n\ntagName (string)\n\ndialect (string) - Define the dialect you want details for. Default: current template's dialect. Values: CFML, Lucee.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getTagList",
		"body": "getTagList()",
		"description": "\n\nUSAGE:\nstruct getTagList()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getTempDirectory",
		"body": "getTempDirectory()",
		"description": " Gets the path of the directory that CFML uses for\n temporary files. Before using this function in an application,\n test to determine the directory it returns under your account.\n Returns the absolute pathname of a directory, including a\n trailing slash.\n\nUSAGE:\nstring getTempDirectory()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getTempFile",
		"body": "getTempFile(${1:dir}, ${2:prefix})",
		"description": " Creates a temporary file in a directory whose name starts with\n (at most) the first three characters of prefix.\n\nUSAGE:\nstring getTempFile(dir, prefix)\n\nPARAMETERS:\n\ndir (string)\n\nprefix (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getTemplatePath",
		"body": "getTemplatePath()",
		"description": "Returns the filepath of the base template in this request\n\nUSAGE:\nstring getTemplatePath()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getTickCount",
		"body": "getTickCount()",
		"description": " Returns the current value of an internal millisecond timer.\n\nUSAGE:\nnumeric getTickCount()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getTimezone",
		"body": "getTimezone()",
		"description": "\n\nUSAGE:\nstring getTimezone()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getTimezoneInfo",
		"body": "getTimezoneInfo(${1:text})",
		"description": " Gets local time zone information for the computer on which it\n is called, relative to Universal Time Coordinated (UTC). UTC is\n the mean solar time of the meridian of Greenwich, England.\n\nUSAGE:\nany getTimezoneInfo(text)\n\nPARAMETERS:\n\ntext (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getToken",
		"body": "getToken(${1:String}, ${2:index})",
		"description": " Determines whether a token of the list in the delimiters\n parameter is present in a string.\n Returns the token found at position index of the string, as a\n string. If index is greater than the number of tokens in the\n string, returns an empty string.\n\nUSAGE:\nstring getToken(String, index [, delimiters])\n\nPARAMETERS:\n\nString (string)\n\nindex (numeric)\n\ndelimiters (string). Default: space, tab, or newline character; or their codes: 'chr(32)', 'chr(9)', 'chr(10)'. Values: ,, |, _, ;, :.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getTotalSpace",
		"body": "getTotalSpace(${1:path})",
		"description": " Returns the total disk space or in-memory space avaialbe for an appliation.\n\nUSAGE:\nnumeric getTotalSpace(path)\n\nPARAMETERS:\n\npath () - path to the hard drive or for in memory file system.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getUserRoles",
		"body": "getUserRoles()",
		"description": " Retrieves the list of roles for the current user.\n\nUSAGE:\nstring getUserRoles()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getVariable",
		"body": "getVariable(${1:name})",
		"description": "Retrieves value of a variabl\n\nUSAGE:\nany getVariable(name)\n\nPARAMETERS:\n\nname (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getVFSMetadata",
		"body": "getVFSMetadata(${1:fileSystemType})",
		"description": " Returns metadata for VFS\n\nUSAGE:\nstruct getVFSMetadata(fileSystemType)\n\nPARAMETERS:\n\nfileSystemType (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "getWriteableImageFormats",
		"body": "getWriteableImageFormats()",
		"description": " No Help Available\n\nUSAGE:\nstring getWriteableImageFormats()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "hash",
		"body": "hash(${1:String})",
		"description": "Converts a string into a fixed length hexadecimal string.\n\nUSAGE:\nstring hash(String [, algorithm] [, encoding] [, iterations])\n\nPARAMETERS:\n\nString (string)\n\nalgorithm (string) - A supported algorithm such as MD5,SHA,SHA-256,SHA-384, or SHA-512. Of those listed SHA-512 is the strongest and generates a 128 character hex result. CF7+. Default: MD5. Values: CFMX_COMPAT, MD5, SHA, SHA-256, SHA-384, SHA-512.\n\nencoding (string) - A string specifying the encoding to use when converting\n the string to byte data used by the hash algorithm.\n Must be a character encoding name recognized by the\n Java runtime. CF7+ Values: utf-8, iso-8859-1, windows-1252, us-ascii, shift_jis, iso-2022-jp, euc-jp, euc-kr, big5, euc-cn, utf-16.\n\niterations (numeric) - Iterates the number of times the hash is computed to create a more computationally intensive hash. Lucee and Adobe CF implement this differently (off by one), see compatibility notes below. CF10+. Default: 1.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "hash40",
		"body": "hash40(${1:input})",
		"description": "\n\nUSAGE:\nstring hash40(input [, algorithm] [, encoding] [, numIterations])\n\nPARAMETERS:\n\ninput (any)\n\nalgorithm (string)\n\nencoding (string)\n\nnumIterations (numeric). Default: 1.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "hmac",
		"body": "hmac(${1:message}, ${2:key})",
		"description": "Creates a keyed-hash message authentication code (HMAC), which can be used to verify authenticity and integrity of a message by two parties that share the key.\n\nUSAGE:\nstring hmac(message, key [, algorithm] [, encoding])\n\nPARAMETERS:\n\nmessage (string) - The message or data to autenticate\n\nkey (string) - The secret key.\n\nalgorithm (string) - An algorithm supported by the java crypto provider, for example HMACSHA256. Default: HMACMD5. Values: HMACMD5, HMACSHA1, HMACSHA256, HMACSHA384, HMACSHA512.\n\nencoding (string) - The character encoding to use when converting the message to bytes. Must be a character encoding name recognized by the Java runtime.. Default: utf-8. Values: utf-8, iso-8859-1, windows-1252, us-ascii, shift_jis, iso-2022-jp, euc-jp, euc-kr, big5, euc-cn, utf-16.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "hour",
		"body": "hour(${1:date})",
		"description": " Extracts the hour of the day from a date/time object.\n Ordinal value of the hour, in the range 0 - 23.\n\nUSAGE:\nnumeric hour(date)\n\nPARAMETERS:\n\ndate (date)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "htmlCodeFormat",
		"body": "htmlCodeFormat(${1:String})",
		"description": " Replaces special characters in a string with their HTML-escaped\n equivalents and inserts &ltpre&gt; and &lt/pre&gt tags at the beginning\n and end of the string.\n [version]\n HTML version to use. currently ignored.\n -1: The latest implementation of HTML\n 2.0: HTML 2.0 (Default)\n 3.2: HTML 3.2\n\nUSAGE:\nstring htmlCodeFormat(String [, version])\n\nPARAMETERS:\n\nString (string)\n\nversion (numeric) Values: -1, 2, 3.2.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "htmlEditFormat",
		"body": "htmlEditFormat(${1:string})",
		"description": "Replaces special characters in a string with their HTML-escaped equivalents.\n\nUSAGE:\nstring htmlEditFormat(string [, version])\n\nPARAMETERS:\n\nstring (string) - A string or a variable that contains one.\n\nversion (numeric) - HTML version to use; currently ignored. Values: -1, 2, 3.2.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "htmlParse",
		"body": "htmlParse(${1:html})",
		"description": "\n\nUSAGE:\nxml htmlParse(html [, caseSensitive])\n\nPARAMETERS:\n\nhtml (string)\n\ncaseSensitive (boolean)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "iIf",
		"body": "iIf(${1:condition}, ${2:expression1}, ${3:expression2})",
		"description": "A boolean condition or value is passed into the first argument. If the condition is `true` the second argument is evaluated and returned, if `false` the third argument is evaluated and returned.\n\nUSAGE:\nstring iIf(condition, expression1, expression2)\n\nPARAMETERS:\n\ncondition (boolean) - A boolean value or an expression that evaluates to a boolean.\n\nexpression1 (string) - A CFML expression that is evaluated dynamically using Evaluate if the condition is `true`.\n\nexpression2 (string) - A CFML expression that is evaluated dynamically using Evaluate if the condition is `false`.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageAddBorder",
		"body": "imageAddBorder(${1:name}, ${2:thickness})",
		"description": " Adds a rectangular border around the outside edge of a ColdFusion image.\n\nUSAGE:\nvoid imageAddBorder(name, thickness [, color] [, bordertype])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nthickness (string) - Thickness of the border in pixels. The default value is 1. The border is added to the outside edge of the image; the image area is increased accordingly.\n\ncolor (string) - Only valid if the borderType is not specified or if borderType = 'constant'.. Default: black.\n\nbordertype (string) - The type of border.. Default: constant. Values: zero, constant, copy, reflect, wrap.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageBlur",
		"body": "imageBlur(${1:name})",
		"description": " Smooths (blurs) the ColdFusion image.\n\nUSAGE:\nvoid imageBlur(name [, blurradius])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nblurradius (numeric) - The size of the blur radius.Value must be greater than or equal to 3 and less than or equal to 10.. Default: 3.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageClearRect",
		"body": "imageClearRect(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})",
		"description": " Clears the specified rectangle by filling it with the background color of the current drawing surface.\n\nUSAGE:\nvoid imageClearRect(name, x, y, width, height)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed\n\nx (numeric) - The X coordinate of the rectangle to clear.\n\ny (numeric) - The Y coordinate of the rectangle to clear.\n\nwidth (numeric) - The width of the rectangle to clear.\n\nheight (numeric) - The height of the rectangle to clear.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageCopy",
		"body": "imageCopy(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})",
		"description": " Copies a rectangular area of an image.\n\nUSAGE:\nany imageCopy(name, x, y, width, height [, dx] [, dy])\n\nPARAMETERS:\n\nname (string) - The ColdFusion image on which this operation is performed.\n\nx (numeric) - The x coordinate of the source rectangle.\n\ny (numeric) - The y coordinate of the source rectangle.\n\nwidth (numeric) - The width of the source rectangle.\n\nheight (numeric) - The height of the source rectangle.\n\ndx (numeric) - The x coordinate of the destination rectangle.\n\ndy (numeric) - The y coordinate of the destination rectangle.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageCreateCaptcha",
		"body": "imageCreateCaptcha(${1:height}, ${2:width}, ${3:text})",
		"description": " Create a Completely Automated Public Turing test to tell Computers and Humans Apart (CAPTCHA) image, a distorted text image that is human-readable, but not machine-readable, used in a challenge-response test for preventing spam.\n\nUSAGE:\nany imageCreateCaptcha(height, width, text [, difficulty] [, font] [, fontsize])\n\nPARAMETERS:\n\nheight () - Height in pixels of the image.\n\nwidth () - Width in pixels of the image.\n\ntext () - Text string displayed in the CAPTCHA image. Use capital letters for better readability. Do not include spaces because users cannot detect them in the resulting CAPTCHA image..\n\ndifficulty () - Level of complexity of the CAPTCHA text. Specify one of the following levels of text distortion: low, medium, and high\n\nfont () - One or more valid fonts to use for the CAPTCHA text. Separate multiple fonts with commas. ColdFusion supports only the system fonts that the JDK can recognize. For example, TTF fonts in the Windows directory are supported on Windows.\n\nfontsize () - Font size of the text in the CAPTCHA image. The value must be an integer.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageCrop",
		"body": "imageCrop(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})",
		"description": " Crops a ColdFusion image to a specified rectangular area.\n\nUSAGE:\nvoid imageCrop(name, x, y, width, height)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nx (numeric) - The X origin of the crop area.\n\ny (numeric) - The Y origin of the crop area.\n\nwidth (numeric) - The width of the crop area.\n\nheight (numeric) - The height of the crop area.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawArc",
		"body": "imageDrawArc(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height}, ${6:startAngle}, ${7:archAngle})",
		"description": " Draws a circular or elliptical arc.\n\nUSAGE:\nvoid imageDrawArc(name, x, y, width, height, startAngle, archAngle [, filled])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nx (numeric) - The x coordinate of the upper-left corner of the arc.\n\ny (numeric) - The y coordinate of the upper-left corner of the arc.\n\nwidth (numeric) - The width of the arc.\n\nheight (numeric) - The height of the arc.\n\nstartAngle (numeric) - The beginning angle in degrees.\n\narchAngle (numeric) - The angular extent of the arc, relative to the start angle.\n\nfilled (boolean) - Specify whether the arc is filled. Default: false. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawBeveledRect",
		"body": "imageDrawBeveledRect(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height}, ${6:raised})",
		"description": " Draws a rectangle with beveled edges.\n\nUSAGE:\nvoid imageDrawBeveledRect(name, x, y, width, height, raised [, filled])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nx (numeric) - The x coordinate of the rectangle.\n\ny (numeric) - The y coordinate of the rectangle.\n\nwidth (numeric) - The width of the rectangle.\n\nheight (numeric) - The height of the rectangle.\n\nraised (boolean) - Specify whether the rectangle appears raised above the surface or sunk into the surface. Default: false.\n\nfilled (boolean) - Specify whether the rectangle is filled.. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawCubicCurve",
		"body": "imageDrawCubicCurve(${1:name}, ${2:ctrlx1}, ${3:ctrly1}, ${4:ctrlx2}, ${5:ctrly2}, ${6:x1}, ${7:y1}, ${8:x2}, ${9:y2})",
		"description": " Draws a cubic curve.\n\nUSAGE:\nvoid imageDrawCubicCurve(name, ctrlx1, ctrly1, ctrlx2, ctrly2, x1, y1, x2, y2)\n\nPARAMETERS:\n\nname () - The image on which this operation is performed.\n\nctrlx1 (string) - The x coordinate of the start point of the cubic curve segment.\n\nctrly1 (numeric) - The y coordinate of the start point of the cubic curve segment.\n\nctrlx2 (numeric) - The x coordinate of the first control point of the cubic curve segment.\n\nctrly2 (numeric) - The y coordinate of the first control point of the cubic curve segment.\n\nx1 (numeric) - The x coordinate of the second control point of the cubic curve segment.\n\ny1 (numeric) - The y coordinate of the second control point of the cubic curve segment.\n\nx2 (numeric) - The x coordinate of the end point of the cubic curve segment.\n\ny2 (numeric) - The y coordinate of the end point of the cubic curve segment.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawImage",
		"body": "imageDrawImage(${1:name}, ${2:image}, ${3:x}, ${4:y})",
		"description": "\n\nUSAGE:\nvoid imageDrawImage(name, image, x, y)\n\nPARAMETERS:\n\nname (any)\n\nimage (any)\n\nx (numeric)\n\ny (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawLine",
		"body": "imageDrawLine(${1:name}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})",
		"description": " Draws a single line defined by two sets of x and y coordinates on a ColdFusion image.\n\nUSAGE:\nvoid imageDrawLine(name, x1, y1, x2, y2)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nx1 (numeric) - The x coordinate for the start point of the line.\n\ny1 (numeric) - The y coordinate for the start point of the line.\n\nx2 (numeric) - The x coordinate for the end point of the line.\n\ny2 (numeric) - The y coordinate for the end point of the line.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawLines",
		"body": "imageDrawLines(${1:name}, ${2:xcords}, ${3:ycords})",
		"description": " Draws a sequence of connected lines defined by arrays of x and y coordinates.\n\nUSAGE:\nvoid imageDrawLines(name, xcords, ycords [, isPolygon] [, filled])\n\nPARAMETERS:\n\nname (string) - NThe image on which this operation is performed.\n\nxcords (numeric) - A array of x coordinates.\n\nycords (numeric) - A array of y coordinates.\n\nisPolygon (boolean) - Specify whether the lines form a polygon. Default: false.\n\nfilled (boolean) - Specify whether the polygon is filled. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawOval",
		"body": "imageDrawOval(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})",
		"description": " Draws an oval.\n\nUSAGE:\nvoid imageDrawOval(name, x, y, width, height [, filled])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nx (numeric) - The x coordinate of the upper left corner of the oval to draw.\n\ny (numeric) - The y coordinate of the upper left corner of the oval to draw.\n\nwidth (numeric) - The width of the oval to draw.\n\nheight (numeric) - The height of the oval to draw.\n\nfilled (boolean) - Specify whether the oval is filled. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawPoint",
		"body": "imageDrawPoint(${1:name}, ${2:x}, ${3:y})",
		"description": " Draws a point at the specified (x,y) coordinate.\n\nUSAGE:\nvoid imageDrawPoint(name, x, y)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nx (numeric) - The x coordinate of the point.\n\ny (numeric) - The y coordinate of the point.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawQuadraticCurve",
		"body": "imageDrawQuadraticCurve(${1:name}, ${2:x1}, ${3:y1}, ${4:ctrlx1}, ${5:ctrly1}, ${6:x2}, ${7:y2})",
		"description": " Draws a curved line. The curve is controlled by a single point.\n\nUSAGE:\nvoid imageDrawQuadraticCurve(name, x1, y1, ctrlx1, ctrly1, x2, y2)\n\nPARAMETERS:\n\nname () - The image on which this operation is performed.\n\nx1 (numeric) - The x coordinate of the start point of the quadratic curve segment.\n\ny1 (numeric) - The y coordinate of the start point of the quadratic curve segment.\n\nctrlx1 (string) - The x coordinate of the first control point of the quadratic curve segment.\n\nctrly1 (numeric) - The y coordinate of the first control point of the quadratic curve segment.\n\nx2 (numeric) - The x coordinate of the end point of the quadratic curve segment.\n\ny2 (numeric) - The y coordinate of the end point of the quadratic curve segment.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawRect",
		"body": "imageDrawRect(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})",
		"description": " Draws a rectangle.\n\nUSAGE:\nvoid imageDrawRect(name, x, y, width, height [, filled])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nx (numeric) - The x coordinate of the rectangle.\n\ny (numeric) - The y coordinate of the rectangle.\n\nwidth (numeric) - The width of the rectangle.\n\nheight (numeric) - The height of the rectangle.\n\nfilled (boolean) - Specify whether the rectangle is filled. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawRoundRect",
		"body": "imageDrawRoundRect(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height}, ${6:arcwidth}, ${7:archeight})",
		"description": " Draws a rectangle with rounded corners.\n\nUSAGE:\nvoid imageDrawRoundRect(name, x, y, width, height, arcwidth, archeight [, filled])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nx (numeric) - The x coordinate of the rectangle.\n\ny (numeric) - The y coordinate of the rectangle.\n\nwidth (numeric) - The width of the rectangle.\n\nheight (numeric) - The height of the rectangle.\n\narcwidth (numeric) - The horizontal diameter of the arc at the four corners.\n\narcheight (numeric) - The vertical diameter of the arc at the four corners.\n\nfilled (boolean) - Specify whether the rectangle is filled. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageDrawText",
		"body": "imageDrawText(${1:name}, ${2:str}, ${3:x}, ${4:y})",
		"description": " Draws a text string on a ColdFusion image with the baseline of the first character positioned at (x,y) in the image.\n\nUSAGE:\nvoid imageDrawText(name, str, x, y [, attributecollection])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nstr (string) - The text to draw.\n\nx (numeric) - The x coordinate for the start point of the string.\n\ny (numeric) - The y coordinate for the start point of the string.\n\nattributecollection (struct) - A structure used to specify the text characteristics. the following keys are supported: \r\nfont: The name of the font used to draw the text string. If you do not specify the font attribute, the text is drawn in the default system font. \r\nsize: The font size for the text string. The default value is 10 points. \r\nstyle: The style to apply to the font ( bold,italic,boldItalic,plain (default) ). \r\nstrikethrough: a boolean that specify whether strikethrough is applied to the text image, default is false. \r\nunderline: a boolean that specify whether underline is applied to the text image, default is false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageFilter",
		"body": "imageFilter(${1:name}, ${2:filtername})",
		"description": "\n\nUSAGE:\nvoid imageFilter(name, filtername [, parameters])\n\nPARAMETERS:\n\nname (any)\n\nfiltername (string)\n\nparameters (struct)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageFilterColorMap",
		"body": "imageFilterColorMap(${1:type})",
		"description": "\n\nUSAGE:\nany imageFilterColorMap(type [, lineColor1] [, lineColor2])\n\nPARAMETERS:\n\ntype (string)\n\nlineColor1 (string)\n\nlineColor2 (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageFilterCurves",
		"body": "imageFilterCurves()",
		"description": "\n\nUSAGE:\nany imageFilterCurves()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageFilterKernel",
		"body": "imageFilterKernel(${1:width}, ${2:height}, ${3:data})",
		"description": "\n\nUSAGE:\nany imageFilterKernel(width, height, data)\n\nPARAMETERS:\n\nwidth (numeric)\n\nheight (numeric)\n\ndata (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageFilterWarpGrid",
		"body": "imageFilterWarpGrid(${1:rows}, ${2:cols}, ${3:width}, ${4:height})",
		"description": "\n\nUSAGE:\nany imageFilterWarpGrid(rows, cols, width, height)\n\nPARAMETERS:\n\nrows (numeric)\n\ncols (numeric)\n\nwidth (numeric)\n\nheight (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageFlip",
		"body": "imageFlip(${1:name}, ${2|vertical (default): Flip an image across an imaginary horizontal line that runs through the center of the image.,horizontal: Flip an image across an imaginary vertical line that runs through the center of the image.,diagonal: Flip an image across its main diagonal that runs from the upper-left to the lower-right corner.,antidiagonal: Flip an image across its main diagonal that runs from the upper-right to the lower-left corner.,90|180|270: Rotate an image clockwise by 90, 180, or 270 degrees.|})",
		"description": " Flips an image across an axis.\n\nUSAGE:\nvoid imageFlip(name, transpose)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\ntranspose (string) - Transpose the image.. Default: vertical. Values: vertical (default): Flip an image across an imaginary horizontal line that runs through the center of the image., horizontal: Flip an image across an imaginary vertical line that runs through the center of the image., diagonal: Flip an image across its main diagonal that runs from the upper-left to the lower-right corner., antidiagonal: Flip an image across its main diagonal that runs from the upper-right to the lower-left corner., 90|180|270: Rotate an image clockwise by 90, 180, or 270 degrees..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageFonts",
		"body": "imageFonts()",
		"description": "\n\nUSAGE:\narray imageFonts()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageFormats",
		"body": "imageFormats()",
		"description": "\n\nUSAGE:\nstruct imageFormats()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageGetBlob",
		"body": "imageGetBlob(${1:source})",
		"description": "Retrieves the bytes of the underlying image. The bytes are in the same image format as the source image.\n\nUSAGE:\nbinary imageGetBlob(source)\n\nPARAMETERS:\n\nsource (string) - The ColdFusion image on which this operation is performed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageGetBufferedImage",
		"body": "imageGetBufferedImage(${1:name})",
		"description": " Returns the java.awt.BufferedImage object underlying the current ColdFusion image.\n\nUSAGE:\nany imageGetBufferedImage(name)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageGetExifMetaData",
		"body": "imageGetExifMetaData(${1:name})",
		"description": " Retrieves the Exchangeable Image File Format (EXIF) headers in an image as a CFML structure.\n\nUSAGE:\nstruct imageGetExifMetaData(name)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageGetEXIFTag",
		"body": "imageGetEXIFTag(${1:name}, ${2:tagName})",
		"description": " Retrieves the specified EXIF tag in an image.\n\nUSAGE:\nstring imageGetEXIFTag(name, tagName)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\ntagName (string) - The EXIF tag name to be returned.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageGetHeight",
		"body": "imageGetHeight(${1:name})",
		"description": " Retrieves the height of the ColdFusion image in pixels.\n\nUSAGE:\nnumeric imageGetHeight(name)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageGetIPTCMetaData",
		"body": "imageGetIPTCMetaData(${1:name})",
		"description": " Retrieves the International Press Telecommunications Council (IPTC )headers in a ColdFusion image as a structure.\n\nUSAGE:\nstruct imageGetIPTCMetaData(name)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageGetIPTCtag",
		"body": "imageGetIPTCtag(${1:name}, ${2:tagName})",
		"description": " Retrieves the value of the IPTC tag for a ColdFusion image.\n\nUSAGE:\nstring imageGetIPTCtag(name, tagName)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\ntagName (string) - The IPTC tag name whose value is returned.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageGetMetadata",
		"body": "imageGetMetadata(${1:name})",
		"description": "A structure containing information about the image.\n\nUSAGE:\nstruct imageGetMetadata(name)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageGetWidth",
		"body": "imageGetWidth(${1:name})",
		"description": " Retrieves the width of the specified ColdFusion image.\n\nUSAGE:\nnumeric imageGetWidth(name)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageGrayScale",
		"body": "imageGrayScale(${1:name})",
		"description": " Converts a ColdFusion image to grayscale.\n\nUSAGE:\nvoid imageGrayScale(name)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageInfo",
		"body": "imageInfo(${1:name})",
		"description": " Returns a structure that contains information about the image, such as height, width, color model, size, and filename.\n\nUSAGE:\nstruct imageInfo(name)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageMakeColorTransparent",
		"body": "imageMakeColorTransparent(${1:img}, ${2:color})",
		"description": " Creates an image and sets a transparent color..\n\nUSAGE:\nany imageMakeColorTransparent(img, color)\n\nPARAMETERS:\n\nimg () - The ColdFusion image on which this operation is performed.\n\ncolor () - The transparent color: Hexadecimal, String value, Default is black.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageMakeTranslucent",
		"body": "imageMakeTranslucent(${1:img}, ${2:percentage})",
		"description": " Create a new translucent image with given percentage of translucence.\n\nUSAGE:\nany imageMakeTranslucent(img, percentage)\n\nPARAMETERS:\n\nimg () - The ColdFusion image on which this operation is performed.\n\npercentage () - The percent of translucence: 0 = opaque, 100=transparent. Decimal values are supported\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageNegative",
		"body": "imageNegative(${1:name})",
		"description": " Inverts the pixel values of a ColdFusion image.\n\nUSAGE:\nvoid imageNegative(name)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageNew",
		"body": "imageNew()",
		"description": " Creates a ColdFusion image.\n\nUSAGE:\nany imageNew( [source] [, width] [, height] [, imagetype] [, canvascolor])\n\nPARAMETERS:\n\nsource (string) - The source image path, URL, a variable that is read into the new image, or a Java buffered image.\n\nwidth (numeric) - The width of the new image. Valid when the height is specified and the source is not.\n\nheight (numeric) - The height of the new image. Valid when the width is specified and the source is not.\n\nimagetype (string) - The type of the image to create (Valid only when width and height are specified), Values: rgb, argb, grayscale.\n\ncanvascolor (string) - Color of the image canvas. Default: black. Values: Hexadecimal value of RGB color. For example, specify the color white as ##FFFFFF or FFFFFF., String value of color (for example, 'black', 'red', 'green')., List of three numbers for (R,G,B) values. Each value must be in the range 0-255..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageOverlay",
		"body": "imageOverlay(${1:source1}, ${2:source2})",
		"description": " Reads two source ColdFusion images and overlays the second source image on the first source image.\n\nUSAGE:\nvoid imageOverlay(source1, source2 [, rule] [, alpha])\n\nPARAMETERS:\n\nsource1 (string) - The image that is the bottom layer in the image.\n\nsource2 (string) - The image that is the top layer (overlaid on the source1 image) in the image.\n\nrule (string) - CF10+ Compositing Rule Values: SRC, DST_IN, DST_OUT, DST_OVER, SRC_IN, SRC_OVER, SRC_OUT.\n\nalpha (string) - CF10+ The percentage value of transparency\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imagePaste",
		"body": "imagePaste(${1:image1}, ${2:image2}, ${3:x}, ${4:y})",
		"description": " Takes two images and an (x,y) coordinate and draws the second image over the first image with the upper-left corner at coordinate (x,y).\n\nUSAGE:\nvoid imagePaste(image1, image2, x, y)\n\nPARAMETERS:\n\nimage1 (string) - The bottom image.\n\nimage2 (string) - The image that is pasted on top of image1.\n\nx (numeric) - The x coordinate where the upper-left corner of image2 is pasted.\n\ny (numeric) - The y coordinate where the upper-left corner of image2 is pasted.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageRead",
		"body": "imageRead(${1:path})",
		"description": " Reads the source pathname or URL and creates a ColdFusion image.\n\nUSAGE:\nany imageRead(path)\n\nPARAMETERS:\n\npath (string) - On-disk or in-memory pathname or URL of the source image.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageReadBase64",
		"body": "imageReadBase64(${1:string})",
		"description": " Creates a ColdFusion image from a Base64 string.\n\nUSAGE:\nany imageReadBase64(string)\n\nPARAMETERS:\n\nstring (string) - a variable or Base64 string\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageResize",
		"body": "imageResize(${1:name}, ${2:width}, ${3:height})",
		"description": " Resizes a ColdFusion image.\n\nUSAGE:\nvoid imageResize(name, width, height [, interpolation] [, blurfactor])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nwidth (numeric) - New width of the image. If this value is blank, the width is calculated proportionately to the height.\n\nheight (numeric) - New height of the image. If this value is blank, the height is calculated proportionately to the width.\n\ninterpolation (string) - The interpolation method for resampling. You can specify a specific interpolation algorithm by name (for example, hamming), by image quality (for example, mediumQuality), or by performance (for example, highestPerformance).  Values: highestQuality (default), highQuality, mediumQuality, highestPerformance, highPerformance, mediumPerformance, nearest, bilinear, bicubic, bessel, blackman, hamming, hanning, hermite, lanczos, mitchell, quadratic.\n\nblurfactor (boolean) - The blur factor used for resampling. The higher the blur factor, the more blurred the image (also, the longer it takes to resize the image). Values: 1-10.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageRotate",
		"body": "imageRotate(${1:name}, ${2:angle})",
		"description": "Rotates a ColdFusion image at a specified point by a specified angle.\n\nUSAGE:\nvoid imageRotate(name, angle [, x] [, y] [, interpolation])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nangle (numeric) - The rotation angle in degrees.\n\nx (numeric) - The x coordinate for the point of rotation. Default: 2.\n\ny (numeric) - The y coordinate for the point of rotation. Default: 2.\n\ninterpolation (string) - Type of interpolation Values: nearest: Applies the nearest neighbor method of interpolation. Image quality is lower than the other interpolation methods, but processing is fastest (default)., bilinear: Applies the bilinear method of interpolation. The quality of the image is less pixelated than the default, but processing is slower., bicubic: Applies the bicubic method of interpolation. Generally, the quality of image is highest with this method and processing is slowest..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageRotateDrawingAxis",
		"body": "imageRotateDrawingAxis(${1:name}, ${2:angle})",
		"description": " Rotates all subsequent drawing on a ColdFusion image at a specified point by a specified angle.\n\nUSAGE:\nvoid imageRotateDrawingAxis(name, angle [, x] [, y])\n\nPARAMETERS:\n\nname (string) - The ColdFusion image on which this operation is performed.\n\nangle (numeric) - The rotation angle in degrees.\n\nx (numeric) - The x coordinate for the point of rotation.. Default: 0.\n\ny (numeric) - The y coordinate for the point of rotation.. Default: 0.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageScaleTofit",
		"body": "imageScaleTofit(${1:name}, ${2:fitWidth}, ${3:fitHeight})",
		"description": " Creates a resized image with the aspect ratio maintained.\n\nUSAGE:\nvoid imageScaleTofit(name, fitWidth, fitHeight [, interpolation] [, blurfactor])\n\nPARAMETERS:\n\nname (string) - The ColdFusion image on which this operation is performed.\n\nfitWidth (numeric) - The width of the bounding box in pixels. You can specify an integer, or an empty string ('') if the fitHeight is specified.\n\nfitHeight (numeric) - The height of the bounding box in pixels. You can specify an integer, or an empty string ('') if the fitWidth is specified.\n\ninterpolation (string) - The interpolation method for resampling. You can specify a specific interpolation algorithm by name (for example, hamming), by image quality (for example, mediumQuality), or by performance (for example, highestPerformance).  Values: highestQuality (default), highQuality, mediumQuality, highestPerformance, highPerformance, mediumPerformance, nearest, bilinear, bicubic, bessel, blackman, hamming, hanning, hermite, lanczos, mitchell, quadratic.\n\nblurfactor (boolean) - The blur factor used for resampling. The higher the blur factor, the more blurred the image (also, the longer it takes to resize the image). Values: 1-10.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageSetAntialiasing",
		"body": "imageSetAntialiasing(${1:name})",
		"description": " Switches antialiasing on or off in rendered graphics.\n\nUSAGE:\nvoid imageSetAntialiasing(name [, antialias])\n\nPARAMETERS:\n\nname (string) - The ColdFusion image on which this operation is performed.\n\nantialias (boolean) - Antialiasing switch. Default: on. Values: on, off.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageSetBackgroundColor",
		"body": "imageSetBackgroundColor(${1:name}, ${2|Hexadecimal value of RGB color. For example, specify the color white as ##FFFFFF or FFFFFF.,String value of color (for example, 'black'', 'red'', 'green').,List of three numbers for (R,G,B) values. Each value must be in the range 0–255.|})",
		"description": " Sets the background color for the ColdFusion image. The background color is used for clearing a region. Setting the background color only affects the subsequent imageClearRect calls\n\nUSAGE:\nvoid imageSetBackgroundColor(name, color)\n\nPARAMETERS:\n\nname () - The ColdFusion image on which this operation is performed.\n\ncolor () - Background color. Default: black. Values: Hexadecimal value of RGB color. For example, specify the color white as ##FFFFFF or FFFFFF., String value of color (for example, 'black'', 'red'', 'green')., List of three numbers for (R,G,B) values. Each value must be in the range 0–255..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageSetDrawingAlpha",
		"body": "imageSetDrawingAlpha(${1:name}, ${2:alpha})",
		"description": "\n\nUSAGE:\nvoid imageSetDrawingAlpha(name, alpha)\n\nPARAMETERS:\n\nname (any)\n\nalpha (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageSetDrawingColor",
		"body": "imageSetDrawingColor(${1:name}, ${2|Hexadecimal value of RGB color. For example, specify the color white as ##FFFFFF or FFFFFF.,String value of color (for example, 'black'', 'red'', 'green').,List of three numbers for (R,G,B) values. Each value must be in the range 0–255.|})",
		"description": " Sets the current drawing color for ColdFusion images. All subsequent graphics operations use the specified color.\n\nUSAGE:\nvoid imageSetDrawingColor(name, color)\n\nPARAMETERS:\n\nname (string) - The ColdFusion image on which this operation is performed.\n\ncolor () - Color. Default: black. Values: Hexadecimal value of RGB color. For example, specify the color white as ##FFFFFF or FFFFFF., String value of color (for example, 'black'', 'red'', 'green')., List of three numbers for (R,G,B) values. Each value must be in the range 0–255..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageSetDrawingStroke",
		"body": "imageSetDrawingStroke(${1:name})",
		"description": " Sets the drawing stroke for points and lines in subsequent ColdFusion images.\n\nUSAGE:\nvoid imageSetDrawingStroke(name [, attributecollection])\n\nPARAMETERS:\n\nname (string) - The ColdFusion image on which this operation is performed.\n\nattributecollection (struct) - The structure used to specify the line attributes\r\n\r\nwidth: Pen width, which is measured perpendicularly to the pen trajectory.\r\n\r\nendcaps: Decoration applied to the ends of unclosed subpaths and dash segments. Subpaths that start and end on the same point are considered unclosed if they do not have a close segment: (butt,round,square)\r\n\r\nlineJoins: Type of line joins: (bevel,miter,join)\r\n\r\nmiterLimit: The limit to trim a line join that has a mitered join decoration. (Use only when lineJoins = 'miter'.) A line join is trimmed when the ratio of miter length to stroke width is greater than the miterLimit value. The miter length is the diagonal length of the miter, which is the distance between the inside corner and the outside corner of the intersection. The smaller the angle formed by two line segments, the longer the miter length and the sharper the angle of intersection. The default value is 10.0, which trims all angles less than 11 degrees. Trimming miters converts the decoration of the line join to bevel.\r\n\r\ndashArray: An array of numbers that indicates the dash pattern. For example. if dashArray is (8,4), the dash pattern is 8 pixels solid, 4 pixels blank, 8 pixels solid, 4 pixels blank, and so on.\r\n\r\ndash_phases: An offset into the dash pattern. For example, a dash_phase of 2, and a dashArray of (8,4) produces the dash pattern of 6 pixels solid, 4 pixels blank, 8 pixels solid, 4 pixels blank, and so on.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageSetDrawingTransparency",
		"body": "imageSetDrawingTransparency(${1:name}, ${2:percent})",
		"description": " Specifies the degree of transparency of drawing functions.\n\nUSAGE:\nvoid imageSetDrawingTransparency(name, percent)\n\nPARAMETERS:\n\nname (Stirng) - The image on which this operation is performed.\n\npercent (numeric) - Percent of transparency, a floating point number in range 0-100\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageSharpen",
		"body": "imageSharpen(${1:name})",
		"description": " Sharpens a ColdFusion image by using the unsharp mask filter.\n\nUSAGE:\nvoid imageSharpen(name [, gain])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\ngain (numeric) - Gain values can be integers or real numbers.. Default: 1.0. Values: > 0: the image is sharpened., = 0: no effect, < 0: the image is blurred..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageShear",
		"body": "imageShear(${1:name}, ${2:shear})",
		"description": " Shears an image either horizontally or vertically.\n\nUSAGE:\nvoid imageShear(name, shear [, direction] [, interpolation])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nshear (numeric) - Shear value. Coordinates can be integers or real numbers.\n\ndirection (string) - Shear direction. Default: horizontal. Values: horizontal, vertical.\n\ninterpolation (string) - Type of interpolation. Default: nearest. Values: nearest: Applies the nearest neighbor method of interpolation. Image quality is lower than the other interpolation methods, but processing is fastest., bilinear: Applies the bilinear method of interpolation. The quality of the image is less pixelated than the default, but processing is slower., bicubic: Applies the bicubic method of interpolation. Generally, the quality of image is highest with this method and processing is slowest..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageShearDrawingAxis",
		"body": "imageShearDrawingAxis(${1:name}, ${2:shrx}, ${3:shry})",
		"description": " Shears the drawing canvas.\n\nUSAGE:\nvoid imageShearDrawingAxis(name, shrx, shry)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nshrx (numeric) - The multiplier by which coordinates are shifted in the positive x axis direction as a function of the y coordinate.e\n\nshry (numeric) - the multiplier by which coordinates are shifted in the positive y axis direction as a function of the x coordinate.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageTranslate",
		"body": "imageTranslate(${1:name}, ${2:xTrans}, ${3:yTrans})",
		"description": " Copies an image to a new location on the plane.\n\nUSAGE:\nvoid imageTranslate(name, xTrans, yTrans [, interpolation])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nxTrans (numeric) - Displacement in the x direction.\n\nyTrans (numeric) - Displacement in the y direction.\n\ninterpolation (string) - Type of interpolation. Default: nearest. Values: nearest : Applies the nearest neighbor method of interpolation. Image quality is lower than the other interpolation methods, but processing is fastest., bilinear: Applies the bilinear method of interpolation. The quality of the image is less pixelated than the default, but processing is slower., bicubic: Applies the bicubic method of interpolation. Generally, the quality of image is highest with this method and processing is slowest..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageTranslateDrawingAxis",
		"body": "imageTranslateDrawingAxis(${1:name}, ${2:x}, ${3:y})",
		"description": " Translates the origin of the image context to the point (x,y) in the current coordinate system. Modifies the image context so that its new origin corresponds to the point (x,y) in the image's original coordinate system.\n\nUSAGE:\nvoid imageTranslateDrawingAxis(name, x, y)\n\nPARAMETERS:\n\nname () - The image on which this operation is performed.\n\nx (numeric) - x coordinate\n\ny (numeric) - y coordinate\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageWrite",
		"body": "imageWrite(${1:name})",
		"description": " Writes a ColdFusion image to the specified filename or destination.\n\nUSAGE:\nvoid imageWrite(name [, destination] [, quality] [, overwrite])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\ndestination (string) - The path to write the file.\r\n\r\nIf you create the image with the ImageNew function or another operation where you do not specify the filename, specify the destination parameter. The file format is derived from the extension of the filename. The default value for this parameter is the filename of the original image source.\n\nquality (string) - Defines the JPEG quality used to encode the image. This parameter applies only to destination files with an extension of JPG or JPEG. Valid values are fractions that range from 0 through 1 (the lower the number, the lower the quality). The default value is 0.75.\n\noverwrite (boolean) - If set to true, overwrites the destination file. Default: true. Values: false, true.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageWriteBase64",
		"body": "imageWriteBase64(${1:name}, ${2:destination}, ${3:format})",
		"description": " Writes Base64 images to the specified filename and destination.\n\nUSAGE:\nvoid imageWriteBase64(name, destination, format [, inHTMLFormat] [, overwrite])\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\ndestination (string) - The path for the destination file.\n\nformat (string) - the image format\n\ninHTMLFormat (boolean) - Specify whether Base64 output includes the headers used by the Base64 images in the HTML 'img' tag ('data:image/{format};base64,...') Values: false, true.\n\noverwrite (boolean) - If set to true, overwrites the destination file.. Default: true. Values: false, true.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "imageXORDrawingMode",
		"body": "imageXORDrawingMode(${1:name}, ${2|Hexadecimal value of RGB color. For example, specify the color white as ##FFFFFF or FFFFFF.,String value of color (for example, 'black', 'red', 'green').,List of three numbers for (R,G,B) values. Each value must be in the range 0-255.|})",
		"description": " Sets the paint mode of the image to alternate between the image's current color and the new specified color.\n\nUSAGE:\nvoid imageXORDrawingMode(name, c1)\n\nPARAMETERS:\n\nname (string) - The image on which this operation is performed.\n\nc1 (string) - The color. Default: black. Values: Hexadecimal value of RGB color. For example, specify the color white as ##FFFFFF or FFFFFF., String value of color (for example, 'black', 'red', 'green')., List of three numbers for (R,G,B) values. Each value must be in the range 0-255..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "incrementValue",
		"body": "incrementValue(${1:number})",
		"description": "Increment the integer part of a number.\nSame as x=x+1 or x++\n\nUSAGE:\nnumeric incrementValue(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "inputBaseN",
		"body": "inputBaseN(${1:String}, ${2:radix})",
		"description": " Converts string, using the base specified by radix, to an\n integer. For example: #inputBaseN(\"3ff\",16)#\n\nUSAGE:\nnumeric inputBaseN(String, radix)\n\nPARAMETERS:\n\nString (string)\n\nradix (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "insert",
		"body": "insert(${1:substring}, ${2:String}, ${3:position})",
		"description": " Inserts a substring in a string after a specified character\n position. If position = 0, prefixes the substring to the\n string.\n\nUSAGE:\nstring insert(substring, String, position)\n\nPARAMETERS:\n\nsubstring (string) - A string to insert\n\nString (string) - A string, which to insert substring\n\nposition (numeric) - Substring add after this postion value in given string\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "int",
		"body": "int(${1:number})",
		"description": " Calculates the closest integer that is smaller than number.\n\nUSAGE:\nnumeric int(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "invalidateOauthAccesstoken",
		"body": "invalidateOauthAccesstoken(${1:token}, ${2:type})",
		"description": "Invalidates the access token generated by the OAUTH servers.\n\nUSAGE:\nvoid invalidateOauthAccesstoken(token, type)\n\nPARAMETERS:\n\ntoken () - The access token to invalidate.\n\ntype () - The type of the OAUTH server (facebook/google).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "invoke",
		"body": "invoke(${1:cfcinstance}, ${2:methodname})",
		"description": "Invokes a component method and returns the result of the invoked method.\n\nUSAGE:\nany invoke(cfcinstance, methodname [, arguments])\n\nPARAMETERS:\n\ncfcinstance (string) - Name or instance of a CFC.\n\nmethodname (string) - The name of the method to invoke.\n\narguments (struct) - A struct of arguments to pass into the method.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isArray",
		"body": "isArray(${1:value})",
		"description": " Determines whether a value is an array.\n True, if value is an array, a query column object, or xml.\n also number = Dimension; function tests whether the array has\n exactly this dimension\n\nUSAGE:\nboolean isArray(value [, number])\n\nPARAMETERS:\n\nvalue (any) - The array in which to check.\n\nnumber (numeric) - Dimension of the array.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isBinary",
		"body": "isBinary(${1:value})",
		"description": " Determines whether a value is stored as binary data.\n\nUSAGE:\nboolean isBinary(value)\n\nPARAMETERS:\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isBoolean",
		"body": "isBoolean(${1:value})",
		"description": "Returns true when a value can be converted to Boolean\n\nUSAGE:\nboolean isBoolean(value)\n\nPARAMETERS:\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isClosure",
		"body": "isClosure(${1:object})",
		"description": "Checks if a given object is a closure.\n\nUSAGE:\nboolean isClosure(object)\n\nPARAMETERS:\n\nobject (any) - The object to check if it is a closure.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isCustomFunction",
		"body": "isCustomFunction(${1:Object})",
		"description": " Determines whether a name represents a custom function\n\nUSAGE:\nboolean isCustomFunction(Object)\n\nPARAMETERS:\n\nObject (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isDate",
		"body": "isDate(${1:Object})",
		"description": " Determines whether a string or Java object can be converted\n to a date/time value.\n\nUSAGE:\nboolean isDate(Object)\n\nPARAMETERS:\n\nObject (any) - A string or variable name\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isDDX",
		"body": "isDDX(${1:path})",
		"description": " Determines whether a DDX file exists and is valid, or if a string contains valid DDX instructions.\n\nUSAGE:\nboolean isDDX(path)\n\nPARAMETERS:\n\npath (string) - Pathname to the DDX file or a string of DDX instructions.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isDebugMode",
		"body": "isDebugMode()",
		"description": "Determines whether debugging output is enabled.\n\nUSAGE:\nboolean isDebugMode()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isDefined",
		"body": "isDefined(${1:variable_name})",
		"description": " Evaluates a string value to determine whether the variable\n named in it exists.\n\nUSAGE:\nboolean isDefined(variable_name)\n\nPARAMETERS:\n\nvariable_name (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isEmpty",
		"body": "isEmpty(${1:value})",
		"description": "Returns whether or not a given value is \"empty\". \n\nUSAGE:\nboolean isEmpty(value)\n\nPARAMETERS:\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isFileObject",
		"body": "isFileObject(${1:filePath})",
		"description": "\n\nUSAGE:\nboolean isFileObject(filePath)\n\nPARAMETERS:\n\nfilePath () - The path to the file you are checking.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isImage",
		"body": "isImage(${1:name})",
		"description": " Determines whether a variable returns a ColdFusion image.\n\nUSAGE:\nboolean isImage(name)\n\nPARAMETERS:\n\nname (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isImageFile",
		"body": "isImageFile(${1:path})",
		"description": " Verifies whether an image file is valid.\n\nUSAGE:\nboolean isImageFile(path)\n\nPARAMETERS:\n\npath (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isInstanceOf",
		"body": "isInstanceOf(${1:object}, ${2:typename})",
		"description": " Determines whether an object is an instance of a Coldfusion interface or component, or of a Java class.\n\nUSAGE:\nboolean isInstanceOf(object, typename)\n\nPARAMETERS:\n\nobject (any) - The CFC instance or Java object that you are testing\n\ntypename (string) - The name of the interface, component, or Java class of which the object might be an instance\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isIPInRange",
		"body": "isIPInRange(${1:ips}, ${2:ip})",
		"description": "\n\nUSAGE:\nboolean isIPInRange(ips, ip)\n\nPARAMETERS:\n\nips (any)\n\nip (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isIPV6",
		"body": "isIPV6(${1:IP})",
		"description": " checks if given IP is of IPV6 format\n\nUSAGE:\nboolean isIPV6(IP)\n\nPARAMETERS:\n\nIP (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isJSON",
		"body": "isJSON(${1:var})",
		"description": " Evaluates whether a string is in valid JSON (JavaScript Object Notation) data interchange format.\n\nUSAGE:\nboolean isJSON(var)\n\nPARAMETERS:\n\nvar (string) - A string or variable that represents one.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isLeapYear",
		"body": "isLeapYear(${1:year})",
		"description": " Determines whether a year is a leap year.\n\nUSAGE:\nboolean isLeapYear(year)\n\nPARAMETERS:\n\nyear (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isLocalhost",
		"body": "isLocalhost(${1:ipaddress})",
		"description": " Determines whether the specified IP address is the localhost.\n\nUSAGE:\nboolean isLocalhost(ipaddress)\n\nPARAMETERS:\n\nipaddress (string) - Valid IP address.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isNotMap",
		"body": "isNotMap(${1:obj})",
		"description": "\n\nUSAGE:\nboolean isNotMap(obj)\n\nPARAMETERS:\n\nobj (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isNull",
		"body": "isNull(${1:object})",
		"description": "Returns true if the specified object is null.\n\nUSAGE:\nboolean isNull(object)\n\nPARAMETERS:\n\nobject (variableName)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isNumeric",
		"body": "isNumeric(${1:String})",
		"description": "Determines whether a string can be converted to a numeric value. Supports numbers in U.S. number format. For other number support use LSIsNumeric.\n\nUSAGE:\nboolean isNumeric(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isNumericDate",
		"body": "isNumericDate(${1:number})",
		"description": " Evaluates whether a real number is a valid representation of a\n date (date/time object).\n\nUSAGE:\nboolean isNumericDate(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isObject",
		"body": "isObject(${1:value})",
		"description": " Determines whether a value is an object.\n True, if the value represents a CFML object. False if\n the value is any other type of data, such as an integer, string,\n date, or struct.\n\nUSAGE:\nboolean isObject(value)\n\nPARAMETERS:\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isPDFArchive",
		"body": "isPDFArchive(${1:path}, ${2|1b,2b,3b|})",
		"description": "Returns `true` if the pdf file at the specified `path` meets the specified `standard`.\n\nUSAGE:\nboolean isPDFArchive(path, standard)\n\nPARAMETERS:\n\npath (string) - Path to a PDF file.\n\nstandard (string) - PDF Archiving Standard Values: 1b, 2b, 3b.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isPDFFile",
		"body": "isPDFFile(${1:path})",
		"description": " Verifies whether a PDF file is valid.\n\nUSAGE:\nboolean isPDFFile(path)\n\nPARAMETERS:\n\npath (string) - Pathname to a PDF file.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isPDFObject",
		"body": "isPDFObject(${1:value})",
		"description": " Determines whether a value is a PDF object.\n\nUSAGE:\nboolean isPDFObject(value)\n\nPARAMETERS:\n\nvalue (variableName) - A value, typically the PDF object stored as a variable name.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isQuery",
		"body": "isQuery(${1:value})",
		"description": " Determines whether a value is a query.\n\nUSAGE:\nboolean isQuery(value)\n\nPARAMETERS:\n\nvalue (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isSafeHTML",
		"body": "isSafeHTML(${1:inputString}, ${2:PolicyFile})",
		"description": "Checks a HTML string against antisamy policy file to determine if it may be vulnerable to XSS / Cross Site Scripting.\n\nUSAGE:\nboolean isSafeHTML(inputString, PolicyFile)\n\nPARAMETERS:\n\ninputString (string) - String to be validated\n\nPolicyFile (string) - File path for custom antisamy policy file. Can be defined in the application scope or if not defined will use Coldfusion server default\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isSimpleValue",
		"body": "isSimpleValue(${1:value})",
		"description": " Determines the type of a value.\n\nUSAGE:\nboolean isSimpleValue(value)\n\nPARAMETERS:\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isSOAPRequest",
		"body": "isSOAPRequest()",
		"description": " Determines whether a CFC is being called as a web service.\n\nUSAGE:\nboolean isSOAPRequest()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isSpreadsheetFile",
		"body": "isSpreadsheetFile(${1:file})",
		"description": " Checks if given file is spreadsheet file or not\n\nUSAGE:\nboolean isSpreadsheetFile(file)\n\nPARAMETERS:\n\nfile (string) - Any file\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isSpreadsheetObject",
		"body": "isSpreadsheetObject(${1:object})",
		"description": " Checks if given object is spreadsheet object or not\n\nUSAGE:\nboolean isSpreadsheetObject(object)\n\nPARAMETERS:\n\nobject (variableName) - Any Object\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isStruct",
		"body": "isStruct(${1:variable})",
		"description": " Determines whether a variable is a structure.\n True, if variable is a CFML structure or is a Java object\n that implements the java.lang.Map interface. Returns False if the\n object in variable is a user-defined function (UDF).\n\nUSAGE:\nboolean isStruct(variable)\n\nPARAMETERS:\n\nvariable (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isUserInAnyRole",
		"body": "isUserInAnyRole(${1:roleList})",
		"description": " Determines whether an authenticated user belongs to any role in a list of roles.\n\nUSAGE:\nboolean isUserInAnyRole(roleList)\n\nPARAMETERS:\n\nroleList (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isUserInRole",
		"body": "isUserInRole(${1:role_name})",
		"description": " Determines whether an authenticated user belongs to the\n specified Role.\n\nUSAGE:\nstring isUserInRole(role_name)\n\nPARAMETERS:\n\nrole_name (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isUserLoggedIn",
		"body": "isUserLoggedIn()",
		"description": " Determines whether a user is logged in.\n\nUSAGE:\nboolean isUserLoggedIn()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isValid",
		"body": "isValid(${1|Any,Array,Binary,boolean,creditcard,date,time,email,eurodate,float,Numeric,guid,integer,Query,range,Regex,regular_expression,ssn,social_security_number,String,Struct,telephone,URL,UUID,usdate,variablename,xml,zipcode,component|}, ${2:value}, ${3:min}, ${4:max}, ${5:pattern})",
		"description": "Tests whether a value meets a validation or data type rule.\n\nUSAGE:\nboolean isValid(type, value, min, max, pattern)\n\nPARAMETERS:\n\ntype (string) - The valid format for the data. Values: Any, Array, Binary, boolean, creditcard, date, time, email, eurodate, float, Numeric, guid, integer, Query, range, Regex, regular_expression, ssn, social_security_number, String, Struct, telephone, URL, UUID, usdate, variablename, xml, zipcode, component.\n\nvalue (any) - The value to test.\n\nmin (numeric) - The minimum valid value; used only for range validation.\n\nmax (numeric) - The maximum valid value; used only for range validation.\n\npattern (string) - A regular expression that the parameter must match;\n used only for regex or regular_expression validation.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isValidOauthAccesstoken",
		"body": "isValidOauthAccesstoken(${1:token}, ${2:type})",
		"description": "Checks if the OAuth access token is still valid.\n\nUSAGE:\nboolean isValidOauthAccesstoken(token, type)\n\nPARAMETERS:\n\ntoken () - The access token to check.\n\ntype () - The type of the OAuth server (facebook/google).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isVideoFile",
		"body": "isVideoFile(${1:value})",
		"description": "\n\nUSAGE:\nboolean isVideoFile(value)\n\nPARAMETERS:\n\nvalue (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isWDDX",
		"body": "isWDDX(${1:value})",
		"description": " Determines whether a value is a well-formed WDDX packet.\n\nUSAGE:\nboolean isWDDX(value)\n\nPARAMETERS:\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isXML",
		"body": "isXML(${1:value})",
		"description": " Determines whether a string is well-formed XML text.\n\nUSAGE:\nboolean isXML(value)\n\nPARAMETERS:\n\nvalue (string) - A string containing the XML document text.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isXMLAttribute",
		"body": "isXMLAttribute(${1:value})",
		"description": " Determines whether the function parameter is an\n XML Document Object Model (DOM) attribute node.\n\nUSAGE:\nboolean isXMLAttribute(value)\n\nPARAMETERS:\n\nvalue (any) - Name of an XML attribute.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isXMLDoc",
		"body": "isXMLDoc(${1:value})",
		"description": " Determines whether a function parameter is an Extended Markup\n language (XML) document object.\n\nUSAGE:\nboolean isXMLDoc(value)\n\nPARAMETERS:\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isXMLElem",
		"body": "isXMLElem(${1:value})",
		"description": " Determines whether a function parameter is an Extended Markup\n language (XML) document object element.\n\nUSAGE:\nboolean isXMLElem(value)\n\nPARAMETERS:\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isXMLNode",
		"body": "isXMLNode(${1:value})",
		"description": " Determines whether the function parameter is\n an XML document object node.\n\nUSAGE:\nboolean isXMLNode(value)\n\nPARAMETERS:\n\nvalue (any) - Name of an XML document object node.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isXMLRoot",
		"body": "isXMLRoot(${1:value})",
		"description": " Determines whether a function parameter is the root element of\n an Extended Markup language (XML) document object.\n\nUSAGE:\nboolean isXMLRoot(value)\n\nPARAMETERS:\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "isZipFile",
		"body": "isZipFile(${1:path})",
		"description": "\n\nUSAGE:\nboolean isZipFile(path)\n\nPARAMETERS:\n\npath (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "javacast",
		"body": "javacast(${1|boolean,double,float,int,long,string,null,byte,bigdecimal,char,short|}, ${2:variable})",
		"description": "Converts the data type of a CFML variable to pass as an argument to an overloaded method of a Java object.\n\nUSAGE:\nany javacast(type, variable)\n\nPARAMETERS:\n\ntype (string) - The name of a java primative or a Java class name. Values: boolean, double, float, int, long, string, null, byte, bigdecimal, char, short.\n\nvariable (string) - A variable, java object or array.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "jsStringFormat",
		"body": "jsStringFormat(${1:String})",
		"description": " Escapes special JavaScript characters, such as single quotation\n mark, double quotation mark, and newline\n\nUSAGE:\nstring jsStringFormat(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lCase",
		"body": "lCase(${1:String})",
		"description": " Converts the alphabetic characters in a string to lowercase.\n\nUSAGE:\nstring lCase(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "left",
		"body": "left(${1:String}, ${2:count})",
		"description": " Returns the leftmost count characters in a string.\n\nUSAGE:\nstring left(String, count)\n\nPARAMETERS:\n\nString (string)\n\ncount (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "len",
		"body": "len(${1:Object})",
		"description": " Determines the length of a string or binary object\n\nUSAGE:\nnumeric len(Object)\n\nPARAMETERS:\n\nObject (any) - A string or variable name\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listAppend",
		"body": "listAppend(${1:list}, ${2:value})",
		"description": " Concatenates a list or element to a list.\n\nUSAGE:\nstring listAppend(list, value [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\nvalue (string) - An element or a list of elements.\n\ndelimiters (string). Default: ,. Values: ,, |, _, ;, :.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listAvg",
		"body": "listAvg(${1:list})",
		"description": "\n\nUSAGE:\nnumeric listAvg(list [, delimiters] [, multiCharacterDelimiter])\n\nPARAMETERS:\n\nlist (string)\n\ndelimiters (string). Default: ,.\n\nmultiCharacterDelimiter (boolean). Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listChangeDelims",
		"body": "listChangeDelims(${1:list}, ${2:new_delimiter})",
		"description": " Changes a list delimiter.\n Returns a copy of the list, with each delimiter character\n replaced by new_delimiter.\n\nUSAGE:\nstring listChangeDelims(list, new_delimiter [, delimiters] [, includeEmptyValues])\n\nPARAMETERS:\n\nlist (string) - A list or a variable that contains one.\n\nnew_delimiter (string) - Delimiter string or a variable that contains one. Can be an empty string. ColdFusion processes the string as one delimiter.\n\ndelimiters (string) - A string or a variable that contains one. Characters that separate list elements. The default value is comma. If this parameter contains more than one character, ColdFusion processes each occurrence of each character as a delimiter.. Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n\nincludeEmptyValues (string) - CF10+ Set to yes to include empty values.. Default: NO. Values: Yes, No.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listCompact",
		"body": "listCompact(${1:list})",
		"description": "Remove empty elements from start and end of the list\n\nUSAGE:\nstring listCompact(list [, delimiters] [, multiCharacterDelimiter])\n\nPARAMETERS:\n\nlist (string)\n\ndelimiters (string). Default: ,.\n\nmultiCharacterDelimiter (boolean). Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listContains",
		"body": "listContains(${1:list}, ${2:substring})",
		"description": " Determines the index of the first list element that contains a\n specified substring.\n Returns the index of the first list element that contains\n substring. If not found, returns zero. The search for the substring is case-sensitive.\n\nUSAGE:\nnumeric listContains(list, substring [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\nsubstring (string)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listContainsNoCase",
		"body": "listContainsNoCase(${1:list}, ${2:substring})",
		"description": " Determines the index of the first list element that contains a\n specified substring.\n\nUSAGE:\nnumeric listContainsNoCase(list, substring [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\nsubstring (string)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listDeleteAt",
		"body": "listDeleteAt(${1:list}, ${2:position})",
		"description": " Deletes an element from a list.\n Returns a copy of the list, without the specified element.\n\nUSAGE:\nstring listDeleteAt(list, position [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\nposition (numeric)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listEach",
		"body": "listEach(${1:str}, ${2:function}, ${3:delim})",
		"description": "Iterates over every element of a List object and can call a UDF function, passed as the second argument.\n\nUSAGE:\nvoid listEach(str, function, delim [, includeEmptyFields])\n\nPARAMETERS:\n\nstr () - An input list object.\n\nfunction () - UDF or closure object.\n\ndelim () - A list delimiter to be used. The default value is comma (,).\n\nincludeEmptyFields () - Boolean. Whether to allow empty fields. Default is false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listEvery",
		"body": "listEvery(${1:list}, ${2:closure})",
		"description": "\n\nUSAGE:\nboolean listEvery(list, closure [, delimiter] [, includeEmptyFields] [, multiCharacterDelimiter] [, parallel] [, maxThreads])\n\nPARAMETERS:\n\nlist (string)\n\nclosure (function)\n\ndelimiter (string). Default: ,.\n\nincludeEmptyFields (boolean). Default: false.\n\nmultiCharacterDelimiter (boolean). Default: true.\n\nparallel (boolean). Default: false.\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listFilter",
		"body": "listFilter(${1:list}, ${2:function})",
		"description": "Used to filter an list to items for which the closure function returns true.\n\nUSAGE:\nstring listFilter(list, function)\n\nPARAMETERS:\n\nlist (List)\n\nfunction (function) - Inline closure function executed for each element in the list. Returns true if the list element should be included in the filtered list. Support for passing the original list to the closure function added in CF11 Update 5.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listFind",
		"body": "listFind(${1:list}, ${2:value})",
		"description": "Determines the index of the first list element in which a specified value occurs. Returns 0 if not found. Case-sensitive\n\nUSAGE:\nnumeric listFind(list, value [, delimiters] [, includeEmptyValues])\n\nPARAMETERS:\n\nlist (string)\n\nvalue (string)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n\nincludeEmptyValues (string). Default: false. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listFindNoCase",
		"body": "listFindNoCase(${1:list}, ${2:value})",
		"description": "Determines the index of the first list element in which a specified value occurs. Returns 0 if not found. Case-insensitive.\n\nUSAGE:\nnumeric listFindNoCase(list, value [, delimiters] [, includeEmptyValues])\n\nPARAMETERS:\n\nlist (string)\n\nvalue (string)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n\nincludeEmptyValues (string). Default: false. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listFirst",
		"body": "listFirst(${1:list})",
		"description": " Gets the first element of a list.\n\nUSAGE:\nstring listFirst(list [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listGetAt",
		"body": "listGetAt(${1:list}, ${2:position})",
		"description": " Gets a list element at a specified position.\n\nUSAGE:\nstring listGetAt(list, position [, delimiters] [, includeEmptyValues])\n\nPARAMETERS:\n\nlist (string)\n\nposition (numeric)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n\nincludeEmptyValues (boolean). Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listIndexExists",
		"body": "listIndexExists(${1:list}, ${2:index})",
		"description": "\n\nUSAGE:\nboolean listIndexExists(list, index [, delimiter] [, includeEmptyFields])\n\nPARAMETERS:\n\nlist (string)\n\nindex (numeric)\n\ndelimiter (string). Default: ,.\n\nincludeEmptyFields (boolean)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listInsertAt",
		"body": "listInsertAt(${1:list}, ${2:position}, ${3:value})",
		"description": " Inserts an element in a list.\n\nUSAGE:\nstring listInsertAt(list, position, value [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\nposition (numeric)\n\nvalue (string)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listItemTrim",
		"body": "listItemTrim(${1:list})",
		"description": "\n\nUSAGE:\nstring listItemTrim(list [, delimiters] [, includeEmptyFields])\n\nPARAMETERS:\n\nlist (string)\n\ndelimiters (string). Default: ,.\n\nincludeEmptyFields (boolean)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listLast",
		"body": "listLast(${1:list})",
		"description": " Gets the last element of a list.\n\nUSAGE:\nstring listLast(list [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listLen",
		"body": "listLen(${1:list})",
		"description": " Determines the number of elements in a list.\n\nUSAGE:\nnumeric listLen(list [, delimiters] [, includeEmptyValues])\n\nPARAMETERS:\n\nlist (string) - A list or a variable that contains one\n\ndelimiters (string) - A string or a variable that contains one. Characters that separate list elements. The default value is comma. If this parameter contains more than one character, ColdFusion processes each occurrence of each character as a delimiter.. Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n\nincludeEmptyValues (string) - CF10+ If includeEmptyValues is set to true, all empty values in the list will be considered when computing length. If set to false, the empty list elements are ignored.. Default: NO. Values: Yes, No.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listMap",
		"body": "listMap(${1:list}, ${2:function}, ${3:intialValue}, ${4:delimiter}, ${5:includeEmptyFields})",
		"description": "Iterates over every entry of the List and calls the closure function to work on the item of the list. The returned value will be set at the same index in a new list and the new list will be returned.\n\nUSAGE:\nstring listMap(list, function, intialValue, delimiter, includeEmptyFields)\n\nPARAMETERS:\n\nlist (string) - The input list.\n\nfunction (any) - Closure or a function reference that will be called for each of the iteration. The arguments passed to the callback are\r\n\r\nitem: value\r\nindex : current index for the iteration\r\nlist : reference of the original list\n\nintialValue (any) - Initial value which will be used for the reduce operation.\n\ndelimiter (string) - The list delimiter.. Default: ,.\n\nincludeEmptyFields (boolean) - Include empty values. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listPrepend",
		"body": "listPrepend(${1:list}, ${2:value})",
		"description": " Inserts an element at the beginning of a list.\n\nUSAGE:\nstring listPrepend(list, value [, delimiters])\n\nPARAMETERS:\n\nlist (string) - A string list.\n\nvalue (string) - An element or list of elements.\n\ndelimiters (string) - Characters that separate list elements.. Default: ,. Values: ,, |, ;, -, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listQualify",
		"body": "listQualify(${1:list}, ${2:qualifier})",
		"description": " Inserts a string at the beginning and end of list elements.\n\nUSAGE:\nstring listQualify(list, qualifier [, delimiters] [, elements] [, includeEmptyFields])\n\nPARAMETERS:\n\nlist (string) - A list or variable name\n\nqualifier (string) - A string or character in which to insert before and after the list elements\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n\nelements (string). Default: all. Values: all, char.\n\nincludeEmptyFields (boolean) - If includeEmptyFields is true, empty value add in list elements Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listReduce",
		"body": "listReduce(${1:list}, ${2:function}, ${3:intialValue}, ${4:delimiter}, ${5:includeEmptyFields})",
		"description": "Iterates over each item of the list and calls the closure to work on the item. This function will reduce the list to a single value and will return the value.\n\nUSAGE:\nany listReduce(list, function, intialValue, delimiter, includeEmptyFields)\n\nPARAMETERS:\n\nlist (string) - Input list\n\nfunction (any) - Closure or a function reference that will be called for each of the iteration. The arguments passed to the callback are\r\n\r\nitem: value\r\nindex : current index for the iteration\r\nlist : reference of the original list\n\nintialValue (any) - Initial value which will be used for the reduce operation. The type is any.\n\ndelimiter (string) - The list delimiter.. Default: comma.\n\nincludeEmptyFields (boolean) - Include empty values.. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listRemoveDuplicates",
		"body": "listRemoveDuplicates(${1:list})",
		"description": "Removes duplicate values (if they exist) in a list.\n\nUSAGE:\nstring listRemoveDuplicates(list [, delimiter] [, ignoreCase])\n\nPARAMETERS:\n\nlist (string) - Required. List of objects.\n\ndelimiter (string) - Optional. Character(s) that separate list elements. The default value is comma.. Default: ,.\n\nignoreCase (boolean) - Optional. If true, ignores the case of strings in the list. By default the value is set to false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listRest",
		"body": "listRest(${1:list})",
		"description": " Gets a list, without its first element.\n\nUSAGE:\nstring listRest(list [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listSetAt",
		"body": "listSetAt(${1:list}, ${2:position}, ${3:value})",
		"description": " Replaces the contents of a list element.\n\nUSAGE:\nstring listSetAt(list, position, value [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\nposition (numeric)\n\nvalue (string)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listSome",
		"body": "listSome(${1:list}, ${2:closure})",
		"description": "\n\nUSAGE:\nboolean listSome(list, closure [, delimiter] [, includeEmptyFields] [, multiCharacterDelimiter] [, parallel] [, maxThreads])\n\nPARAMETERS:\n\nlist (string)\n\nclosure (function)\n\ndelimiter (string). Default: ,.\n\nincludeEmptyFields (boolean). Default: false.\n\nmultiCharacterDelimiter (boolean). Default: true.\n\nparallel (boolean). Default: false.\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listSort",
		"body": "listSort(${1:list}, ${2:sort_type})",
		"description": " Sorts list elements according to a sort type and sort order.\n Returns a sorted copy of the list.\n [sort_type - quicky]\n numeric: sorts numbers\n text: sorts text alphabetically, taking case into account\n - aabzABZ, if sort_order = \"asc\"\n - ZBAzbaa, if sort_order = \"desc\"\n textnocase: sorts text alphabetically, without regard to case\n - aAaBbBzzZ, in an asc sort;\n - ZzzBbBaAa, in a desc sort;\n\nUSAGE:\nstring listSort(list, sort_type [, sort_order] [, delimiters])\n\nPARAMETERS:\n\nlist (string) - A list or variable name\n\nsort_type (string) - numeric: sorts numbers\n text: sorts text alphabetically, taking case into account\n (also known as case sensitive).\n - aabzABZ for ascending sort(sort_order = \"asc\")\n - ZBAzbaa for descending sort(sort_order = \"desc\")\n\n textnocase: sorts text alphabetically, without regard to\n case (also known as case-insensitive).\n - aAaBbBzzZ for ascending sort(sort_order = \"asc\")\n - ZzzBbBaAa for descending sort(sort_order = \"desc\")\n\nsort_order (string). Default: asc. Values: asc: ascending (a to z) sort order., desc: descending (z to a) sort order.\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listToArray",
		"body": "listToArray(${1:list})",
		"description": " Copies the elements of a list to an array.\n\nUSAGE:\narray listToArray(list [, delimiters] [, includeEmptyFields] [, multiCharacterDelimiter])\n\nPARAMETERS:\n\nlist (string) - A list or variable name\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n\nincludeEmptyFields (boolean) - A Boolean value specifying whether to create empty array entries if there are two delimiters in a row. Values: true, false.\n\nmultiCharacterDelimiter (boolean) - A Boolean value specifying whether the delimiters parameter specifies a multi-character delimiter. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listTrim",
		"body": "listTrim(${1:list})",
		"description": "\n\nUSAGE:\nstring listTrim(list [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\ndelimiters (string). Default: ,.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listValueCount",
		"body": "listValueCount(${1:list}, ${2:value})",
		"description": "Counts instances of a specified value in a list.\nThe search is case-sensitive. For case-insensitive search use listValueNoCase.\n\nUSAGE:\nnumeric listValueCount(list, value [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\nvalue (string)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "listValueCountNoCase",
		"body": "listValueCountNoCase(${1:list}, ${2:value})",
		"description": "Counts instances of a specified value in a list.\nThe search is case-insensitive. For case-sensitive search use listValue.\n\nUSAGE:\nnumeric listValueCountNoCase(list, value [, delimiters])\n\nPARAMETERS:\n\nlist (string)\n\nvalue (string)\n\ndelimiters (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lJustify",
		"body": "lJustify(${1:String}, ${2:length})",
		"description": " Left justifies characters in a string of a specified length.\n\nUSAGE:\nstring lJustify(String, length)\n\nPARAMETERS:\n\nString (string)\n\nlength (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "location",
		"body": "location(${1:url})",
		"description": " Stops execution of the current page and opens a CFML page or HTML file.\n\nUSAGE:\nvoid location(url [, addtoken] [, statuscode])\n\nPARAMETERS:\n\nurl (string) - URL of HTML file or CFML page to open.\n\naddtoken (boolean) - clientManagement must be enabled (see cfapplication). Values: true, false.\n\nstatuscode (numeric) - The HTTP status code\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "log",
		"body": "log(${1:number})",
		"description": " Calculates the natural logarithm of a number. Natural\n logarithms are based on the constant e (2.71828182845904).\n\nUSAGE:\nnumeric log(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "log10",
		"body": "log10(${1:number})",
		"description": " Calculates the logarithm of number, to base 10.\n\nUSAGE:\nnumeric log10(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsCurrencyFormat",
		"body": "lsCurrencyFormat(${1:number})",
		"description": "Formats a number in a locale-specific currency format. For countries that use the euro, the result depends on the JVM.\n [type - quicky]\n local: the currency format and currency symbol used locally.\n - With JDK 1.3, the default for Euro Zone: local currency.\n - With JDK 1.4, the default for Euro Zone: euro.\n international: the international standard currency format\n none: the local currency format; no currency symbol\n\nUSAGE:\nstring lsCurrencyFormat(number [, type])\n\nPARAMETERS:\n\nnumber (numeric)\n\ntype (string) Values: local, international, none.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsDateFormat",
		"body": "lsDateFormat(${1:date})",
		"description": "Formats the date part of a date/time value in a locale-specific format.\n [mask - quicky]\n d,dd,ddd,dddd: Day of month / week\n m,mm,mmm,mmmm: Month\n y,yy,yyyy: Year\n gg: Period/era string\n short / medium / long / full\n\nUSAGE:\nstring lsDateFormat(date [, mask])\n\nPARAMETERS:\n\ndate (date)\n\nmask (string) Values: short, medium, long, full.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsDateTimeFormat",
		"body": "lsDateTimeFormat(${1:date}, ${2:timeZone})",
		"description": " Formats date and time values using locale-specific date and time formatting conventions.\n\nUSAGE:\nstring lsDateTimeFormat(date [, mask], timeZone [, locale])\n\nPARAMETERS:\n\ndate () - A date/time object, in the range 100 AD-9999 AD.\n\nmask () - Mask that has to be used for formatting.\n\ntimeZone () - The time-zone information. You can specify in either of the following formats. Abbreviation and Full Name.\n\nlocale () - Locale to use instead of the locale of the page when processing the function..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsDayOfWeek",
		"body": "lsDayOfWeek(${1:date})",
		"description": "\n\nUSAGE:\nnumeric lsDayOfWeek(date [, locale] [, timezone])\n\nPARAMETERS:\n\ndate (date)\n\nlocale (string)\n\ntimezone (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsEuroCurrencyFormat",
		"body": "lsEuroCurrencyFormat(${1:currency}, ${2|local,international,none|})",
		"description": "Formats a number in a locale-specific currency format.\n [type - quicky]\n local: the currency format used in the locale. (Default.)\n international: the international standard currency format\n none: the currency format used; no currency symbol\n\nUSAGE:\nstring lsEuroCurrencyFormat(currency, type)\n\nPARAMETERS:\n\ncurrency (string)\n\ntype (string) Values: local, international, none.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsIsCurrency",
		"body": "lsIsCurrency(${1:String})",
		"description": "Determines whether a string is a valid representation of a currency amount in the current locale.\n\nUSAGE:\nboolean lsIsCurrency(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsIsDate",
		"body": "lsIsDate(${1:String})",
		"description": "Determines whether a string is a valid representation of a date/time value in the current locale.\n\nUSAGE:\nboolean lsIsDate(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsIsNumeric",
		"body": "lsIsNumeric(${1:String})",
		"description": " Determines whether a string is a valid representation of a\n number in the current locale.\n\nUSAGE:\nboolean lsIsNumeric(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsNumberFormat",
		"body": "lsNumberFormat(${1:number})",
		"description": "Formats a number in a locale-specific format.\n [mask - quicky]\n _,9 Digit placeholder; . decimal point; 0 Pads with zeros;\n ( ) less than zero, puts parentheses around the mask\n + plus sign before positive number minus before negative\n - a space before positive minus sign before negative\n , Separates every third decimal place with a comma.\n L,C Left-justifies or center-justifies number\n $ dollar sign before formatted number.\n ^ Separates left and right formatting.\n\nUSAGE:\nstring lsNumberFormat(number [, mask])\n\nPARAMETERS:\n\nnumber (numeric)\n\nmask (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsParseCurrency",
		"body": "lsParseCurrency(${1:String})",
		"description": "Converts a locale-specific currency string into a formatted number. Attempts conversion by comparing the string with each the three supported currency formats (none, local, international) and using the first that matches.\n\nUSAGE:\nstring lsParseCurrency(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsParseDateTime",
		"body": "lsParseDateTime(${1:dt_string})",
		"description": "Converts a string that is a valid date/time representation in the current locale into a date/time object.\n\nUSAGE:\ndate lsParseDateTime(dt_string)\n\nPARAMETERS:\n\ndt_string (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsParseEuroCurrency",
		"body": "lsParseEuroCurrency(${1:currency_string})",
		"description": "Formats a locale-specific currency string as a number. Attempts conversion through each of the default currency formats (none, local, international). Ensures correct handling of euro currency for Euro zone countries.\n\nUSAGE:\nnumeric lsParseEuroCurrency(currency_string)\n\nPARAMETERS:\n\ncurrency_string (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsParseNumber",
		"body": "lsParseNumber(${1:String})",
		"description": "Converts a string that is a valid numeric representation in the current locale into a formatted number.\n\nUSAGE:\nnumeric lsParseNumber(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsTimeFormat",
		"body": "lsTimeFormat(${1:time})",
		"description": "Formats the time part of a date/time string into a string in a locale-specific format.\n [mask - quicky]\n h,hh,H,HH: Hours; m,mm: Minutes; s,ss: Seconds;\n l: Milliseconds; t: A or P; tt: AM or PM\n \"short\" = h:mm tt; \"medium\" = h:mm:ss tt\n\nUSAGE:\nstring lsTimeFormat(time [, mask])\n\nPARAMETERS:\n\ntime (date)\n\nmask (string) Values: short, medium, long.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lsWeek",
		"body": "lsWeek(${1:date})",
		"description": "\n\nUSAGE:\nnumeric lsWeek(date [, locale] [, timezone])\n\nPARAMETERS:\n\ndate (date)\n\nlocale (string)\n\ntimezone (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "lTrim",
		"body": "lTrim(${1:String})",
		"description": " Removes leading spaces from a string.\n\nUSAGE:\nstring lTrim(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "manifestRead",
		"body": "manifestRead(${1:path})",
		"description": "reads a manifest file and returns the content as struct\n\nUSAGE:\nstructure manifestRead(path)\n\nPARAMETERS:\n\npath (string) - Path to\n— a jar file containing a \"MANIFEST.MF\" file in the directory \"/META-INF/\"\n— a Manifest file\n\nor the content of a Manifest File\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "max",
		"body": "max(${1:number1}, ${2:number2})",
		"description": " Determines the greater of two numbers.\n\nUSAGE:\nnumeric max(number1, number2)\n\nPARAMETERS:\n\nnumber1 (numeric)\n\nnumber2 (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "metaphone",
		"body": "metaphone(${1:str})",
		"description": "\n\nUSAGE:\nstring metaphone(str)\n\nPARAMETERS:\n\nstr (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "mid",
		"body": "mid(${1:String}, ${2:start}, ${3:count})",
		"description": " Extracts a substring from a string.\n\nUSAGE:\nstring mid(String, start, count)\n\nPARAMETERS:\n\nString (string) - The string from which the substring will be extracted.\n\nstart (numeric) - The position of the first character to retrieve.\n\ncount (numeric) - The number of characters to retrieve.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "millisecond",
		"body": "millisecond(${1:date})",
		"description": "\n\nUSAGE:\nnumeric millisecond(date [, timezone])\n\nPARAMETERS:\n\ndate (date)\n\ntimezone (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "min",
		"body": "min(${1:number1}, ${2:number2})",
		"description": " Determines the lesser of two numbers.\n\nUSAGE:\nnumeric min(number1, number2)\n\nPARAMETERS:\n\nnumber1 (numeric)\n\nnumber2 (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "minute",
		"body": "minute(${1:date})",
		"description": " Extracts the minute value from a date/time object.\n\nUSAGE:\nnumeric minute(date)\n\nPARAMETERS:\n\ndate (date)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "month",
		"body": "month(${1:date})",
		"description": " Extracts the month value from a date/time object.\n\nUSAGE:\nnumeric month(date)\n\nPARAMETERS:\n\ndate (date)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "monthAsString",
		"body": "monthAsString(${1:month_number})",
		"description": " \n\nUSAGE:\nstring monthAsString(month_number)\n\nPARAMETERS:\n\nmonth_number (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "monthShortAsString",
		"body": "monthShortAsString(${1:monthnumber})",
		"description": "\n\nUSAGE:\nstring monthShortAsString(monthnumber)\n\nPARAMETERS:\n\nmonthnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "newLine",
		"body": "newLine()",
		"description": "\n\nUSAGE:\nstring newLine()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "now",
		"body": "now()",
		"description": " Gets the current date and time of the computer running\n the CFML server.\n\nUSAGE:\ndate now()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "nowServer",
		"body": "nowServer()",
		"description": "Returns the current time on the server independent of Lucee timezone definition.\n\nUSAGE:\ndate nowServer()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "nullValue",
		"body": "nullValue()",
		"description": "\n\nUSAGE:\nany nullValue()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "numberFormat",
		"body": "numberFormat(${1:number})",
		"description": " Creates a custom-formatted number value. For international\n number formatting use LSNumberFormat.\n The mask is made up of:\n _,9 Digit placeholder; . decimal point; 0 Pads with zeros;\n ( ) less than zero, puts parentheses around the mask\n + plus sign before positive number minus before negative\n - a space before positive minus sign before negative\n , Separates every third decimal place with a comma.\n L,C Left-justifies or center-justifies number\n $ dollar sign before formatted number.\n ^ Separates left and right formatting.\n\nUSAGE:\nstring numberFormat(number [, mask])\n\nPARAMETERS:\n\nnumber (numeric)\n\nmask (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "objectEquals",
		"body": "objectEquals(${1:Param1}, ${2:Param2})",
		"description": " No Help Available\n\nUSAGE:\nboolean objectEquals(Param1, Param2)\n\nPARAMETERS:\n\nParam1 () - New instance of the CFC on the client.\n\nParam2 () - Original instance of the CFC.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "objectLoad",
		"body": "objectLoad(${1:binaryObject}, ${2:filepath})",
		"description": "Load object from binary obj\n\nUSAGE:\nany objectLoad(binaryObject, filepath)\n\nPARAMETERS:\n\nbinaryObject (binary) - A binary object returned by objectSave function\n\nfilepath (string) - A file path to a serialized object\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "objectSave",
		"body": "objectSave(${1:object})",
		"description": " Serialize object to file or convert it to binary format\n\nUSAGE:\nbinary objectSave(object [, file])\n\nPARAMETERS:\n\nobject (variableName) - Object to be serialized\n\nfile (string) - File in which serialized object will be stored\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "onApplicationEnd",
		"body": "onApplicationEnd(${1:ApplicationScope})",
		"description": "Defined in Application.cfc, invoked when the application times out or when the server is shutting down.\n\nUSAGE:\nboolean onApplicationEnd(ApplicationScope)\n\nPARAMETERS:\n\nApplicationScope (struct) - The application scope of the application that is ending.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "onApplicationStart",
		"body": "onApplicationStart()",
		"description": "Defined in Application.cfc, invoked once when the application is initialized.\n\nUSAGE:\nboolean onApplicationStart()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "onError",
		"body": "onError(${1:exception}, ${2|onApplicationStart,onApplicationEnd,onRequest,onRequestStart,onSessionStart,onSessionEnd,[empty string]|})",
		"description": "Defined in Application.cfc, invoked when an exception occurrs that was not caught by a cftry or cfcatch statement.\n\nUSAGE:\nvoid onError(exception, eventName)\n\nPARAMETERS:\n\nexception (struct) - A structure containing the exception similar to what the cfcatch tag has.\n\neventName (string) - The name of the application event at which the exception occurred. If no onRequest method is defined then an empty string may be passed. Values: onApplicationStart, onApplicationEnd, onRequest, onRequestStart, onSessionStart, onSessionEnd, [empty string].\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "onMissingMethod",
		"body": "onMissingMethod(${1:missingMethodName}, ${2:missingMethodArguments})",
		"description": "This method is invoked in a CFC when a method call exists that is not defined by cffunction or with a function statement.\n\nUSAGE:\nvoid onMissingMethod(missingMethodName, missingMethodArguments)\n\nPARAMETERS:\n\nmissingMethodName (string) - The name of the missing method.\n\nmissingMethodArguments (struct) - The arguments that were passed on the function call to the missing method.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "onMissingTemplate",
		"body": "onMissingTemplate(${1:targetPage})",
		"description": "Defined in Application.cfc, invoked when a request is made for a cfml template that does not exist.\n\nUSAGE:\nboolean onMissingTemplate(targetPage)\n\nPARAMETERS:\n\ntargetPage (string) - Requested template path relative to the webroot\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "onRequest",
		"body": "onRequest(${1:targetPage})",
		"description": "Defined in Application.cfc, invoked when the request starts after onRequestStart.\n\nUSAGE:\nvoid onRequest(targetPage)\n\nPARAMETERS:\n\ntargetPage (string) - Requested template path relative to the webroot\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "onRequestEnd",
		"body": "onRequestEnd(${1:targetPage})",
		"description": "Defined in Application.cfc, invoked at the end of the request before the request is terminated. It can generate output.\n\nUSAGE:\nvoid onRequestEnd(targetPage)\n\nPARAMETERS:\n\ntargetPage (string) - Requested template path relative to the webroot\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "onRequestStart",
		"body": "onRequestStart(${1:targetPage})",
		"description": "Defined in Application.cfc, invoked when the request starts before onRequest.\n\nUSAGE:\nboolean onRequestStart(targetPage)\n\nPARAMETERS:\n\ntargetPage (string) - Requested template path relative to the webroot\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "onServerStart",
		"body": "onServerStart()",
		"description": "Called upon startup of the server. Typically defined in server.cfc and placed at the webroot. In the ColdFusion Administrator > Setting check 'Component with onServerStart() method' and specify the file. The function is useful for application-independent tasks, and specifying the server specific environment variables and other general tasks.\n\nUSAGE:\nvoid onServerStart()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "onSessionEnd",
		"body": "onSessionEnd(${1:sessionScope}, ${2:applicationScope})",
		"description": "Defined in Application.cfc, invoked when a session expires or times out.\n\nUSAGE:\nvoid onSessionEnd(sessionScope, applicationScope)\n\nPARAMETERS:\n\nsessionScope (struct) - The session scope of the session that is ending.\n\napplicationScope (struct) - The application scope of the session that is ending.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "onSessionStart",
		"body": "onSessionStart()",
		"description": "Defined in Application.cfc, invoked upon initialization of a session.\n\nUSAGE:\nvoid onSessionStart()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormClearSession",
		"body": "ormClearSession()",
		"description": "No Help Available\n\nUSAGE:\nvoid ormClearSession()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormCloseAllSessions",
		"body": "ormCloseAllSessions(${1:region})",
		"description": " Closes all Hibernate sessions in the request.\n\nUSAGE:\nvoid ormCloseAllSessions(region)\n\nPARAMETERS:\n\nregion () - Name of the cache region.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormCloseSession",
		"body": "ormCloseSession()",
		"description": "Closes the current ORM session for the given datasource. When the datasource argument is not passed then it uses the default datasource defined in Application.cfc.\n\nUSAGE:\nvoid ormCloseSession( [datasource])\n\nPARAMETERS:\n\ndatasource (string) - Name of the datasource for the ORM session\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormEvictCollection",
		"body": "ormEvictCollection(${1:componentName}, ${2:relationName})",
		"description": "This will remove all the entries with the specified relation/collection name in the specified component. \normEvictCollection(componentName,relationName,[id])\n\nUSAGE:\nvoid ormEvictCollection(componentName, relationName [, id])\n\nPARAMETERS:\n\ncomponentName (string) - No Help Available\n\nrelationName (string) - No Help Available\n\nid (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormEvictEntity",
		"body": "ormEvictEntity(${1:componentName})",
		"description": " This will remove all the entries for the specified component name from the entity cache.\normEvictEntity(componentName,[id])\n\nUSAGE:\nvoid ormEvictEntity(componentName [, id])\n\nPARAMETERS:\n\ncomponentName (string) - No Help Available\n\nid (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormEvictQueries",
		"body": "ormEvictQueries()",
		"description": "This will remove all the queries from the named query cache. \nIf name is not specified, all quiries from default cache will be removed.\normEvictQueries([cacheName])\n\nUSAGE:\nvoid ormEvictQueries( [cacheName])\n\nPARAMETERS:\n\ncacheName (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormExecuteQuery",
		"body": "ormExecuteQuery(${1:hql})",
		"description": "Runs the HQL on the default data source specified for the application.\n\nUSAGE:\nany ormExecuteQuery(hql [, params] [, unique] [, queryoptions])\n\nPARAMETERS:\n\nhql (string) - A HQL query statement\n\nparams (any) - A struct or array of query params.\n\nunique (boolean) - If true returns a single entity instead of an array.\n\nqueryoptions (string) - A struct with possible keys: ignorecase, maxResults, cacheable, timeout, datasource\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormFlush",
		"body": "ormFlush()",
		"description": "No Help Available\n\nUSAGE:\nvoid ormFlush()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormFlushAll",
		"body": "ormFlushAll(${1:region})",
		"description": "Flushes all the current Hibernate sessions in the request.\n\nUSAGE:\nvoid ormFlushAll(region)\n\nPARAMETERS:\n\nregion () - Name of the cache region.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormGetSession",
		"body": "ormGetSession()",
		"description": "Get the current ORM session object\n\nUSAGE:\nany ormGetSession()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormGetSessionFactory",
		"body": "ormGetSessionFactory()",
		"description": " Returns ORM session factory instance\n\nUSAGE:\nany ormGetSessionFactory()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormIndex",
		"body": "ormIndex()",
		"description": " Performs offline indexing - using this function without specifying parameters, all persistent entities of a given application are indexed.\n\nUSAGE:\nvoid ormIndex()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormIndexPurge",
		"body": "ormIndexPurge(${1:region})",
		"description": "Clears all indexed data for all entities or specified entities in the current application scope.\n\nUSAGE:\nvoid ormIndexPurge(region)\n\nPARAMETERS:\n\nregion () - Name of the cache region.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormReload",
		"body": "ormReload()",
		"description": "Returns ORM session factory instance\n\nUSAGE:\nvoid ormReload()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormSearch",
		"body": "ormSearch(${1:query_text}, ${2:entityName}, ${3:fields}, ${4:optionMap})",
		"description": "Searches for given text in specific properties or entities.\n\nUSAGE:\nstruct ormSearch(query_text, entityName, fields, optionMap)\n\nPARAMETERS:\n\nquery_text () - The text to be searched for or a complete Lucene query.In the case of ORMSearch('query_text', 'entityName'), only Lucene query is supported.For details of Lucene query, see http://lucene.apache.org/core/old_versioned_docs/versions/3_0_0/queryparsersyntax.html\n\nentityName () - Name of the entity to be searched.\n\nfields () - Fields in which search has to be performed. This can be an array of strings.If you are performing a Lucene query, you need not specify this field. In other words, if you do not specify this value, a Lucene query is performed.Field name is case-sensitive.\n\noptionMap () - Extra options that can be passed while executing Lucene query.The options are: Sort, Offset, maxResults\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ormSearchOffline",
		"body": "ormSearchOffline(${1:query_text}, ${2:entityName}, ${3:fields_to_be_selected}, ${4:fields})",
		"description": " Performs search on the indexed properties but returns only the stored fields.For this function to work, specify indexStore=true on the properties on which you want to perform the search.\n\nUSAGE:\nstruct ormSearchOffline(query_text, entityName, fields_to_be_selected, fields [, optionMap] [, extra options])\n\nPARAMETERS:\n\nquery_text () - The text to be searched for or a complete Lucene query.For details of Lucene query, see http://lucene.apache.org/core/old_versioned_docs/versions/.\n\nentityName () - Name of the entity to be searched.\n\nfields_to_be_selected () - Fields to be returned as keys in the resultant struct.\n\nfields () - Fields in which search has to be performed.\n\noptionMap ()\n\nextra options () -  can be passed while executing Lucene query. The options can be: sort, offset, maxResults\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "pagePoolClear",
		"body": "pagePoolClear()",
		"description": "\n\nUSAGE:\nboolean pagePoolClear()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "pagePoolList",
		"body": "pagePoolList()",
		"description": "\n\nUSAGE:\narray pagePoolList()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "paragraphFormat",
		"body": "paragraphFormat(${1:String})",
		"description": " Replaces characters in a string:\n * Single newline characters (CR/LF sequences) with spaces\n * Double newline characters with HTML paragraph tags (<code>&lt;p&gt;</code>)\n\nUSAGE:\nstring paragraphFormat(String)\n\nPARAMETERS:\n\nString (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "parameterExists",
		"body": "parameterExists(${1:region})",
		"description": "This function is deprecated. Use the IsDefined or StructKeyExists functions. Determines whether a parameter exists. ColdFusion does not evaluate the argument.\n\nUSAGE:\nboolean parameterExists(region)\n\nPARAMETERS:\n\nregion () - Name of the cache region.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "parseDateTime",
		"body": "parseDateTime(${1:dt_string})",
		"description": " Parses a date/time string according to the English (U.S.)\n locale conventions. (To format a date/time string for other\n locales, use the LSParseDateTime function.)\n\nUSAGE:\ndate parseDateTime(dt_string [, pop_conversion])\n\nPARAMETERS:\n\ndt_string (string)\n\npop_conversion (string) - - standard: (the default) function does no conversion.\n - pop: specifies that the date/time string is in POP format,\n which includes the local time of the sender and a time-zone\n offset from UTC. ColdFusion applies the offset and returns\n a value with the UTC time.. Default: standard. Values: standard, pop.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "parseNumber",
		"body": "parseNumber(${1:number})",
		"description": "Converts string to number in numeral system\n\nUSAGE:\nnumeric parseNumber(number [, radix])\n\nPARAMETERS:\n\nnumber (string)\n\nradix (string) Values: bin, oct, dec, hex.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "pi",
		"body": "pi()",
		"description": "Gets the mathematical constant p, accurate to 15 digits\n, but only shows 11 when simply outputted.\n\nUSAGE:\nnumeric pi()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "precisionEvaluate",
		"body": "precisionEvaluate(${1:expressions})",
		"description": " Evaluates one or more string expressions using BigDecimal precision arithmetic.  If the results ends in a infinitely repeating decimal value only the first 20 digits of the decimal portion will be used.  BigDecimal precision results only work with addition, subtraction, multiplication and division.  The use of ^, MOD, % or \\ arithmetic operators will result in normal integer precision.\n\nUSAGE:\nnumeric precisionEvaluate(expressions)\n\nPARAMETERS:\n\nexpressions (string) - Expressions to evaluate\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "preserveSingleQuotes",
		"body": "preserveSingleQuotes(${1:variable})",
		"description": " Prevents CFML from automatically escaping single\n quotation mark characters that are contained in a variable.\n CFML does not evaluate the argument.\n\n Note: ColdFusion automatically escapes simple-variable,\n array-variable, and structure-variable references within a\n cfquery tag body or block.\n\nUSAGE:\nvoid preserveSingleQuotes(variable)\n\nPARAMETERS:\n\nvariable (string) - Variable that contains a string in which to preserve\n single quotation marks.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "quarter",
		"body": "quarter(${1:date})",
		"description": " Calculates the quarter of the year in which a date falls.\n\nUSAGE:\nnumeric quarter(date)\n\nPARAMETERS:\n\ndate (date)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "query",
		"body": "query()",
		"description": "\n\nUSAGE:\nquery query()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryAddColumn",
		"body": "queryAddColumn(${1:query}, ${2:column_name}, ${3:array_name})",
		"description": " Adds a column to a query and populates its rows with the\n contents of a one-dimensional array. Pads query columns,\n if necessary, to ensure that all columns have the same number\n of rows.\n\nUSAGE:\nnumeric queryAddColumn(query, column_name [, datatype], array_name)\n\nPARAMETERS:\n\nquery (query)\n\ncolumn_name (string)\n\ndatatype (string) - Column data type. Values: Integer, Bigint, Double, Decimal, Varchar, Binary, Bit, Time, Date.\n\narray_name (array)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryAddRow",
		"body": "queryAddRow(${1:query})",
		"description": " Adds a specified number of empty rows to a query.\n\nUSAGE:\nnumeric queryAddRow(query [, number/row(s)])\n\nPARAMETERS:\n\nquery (query)\n\nnumber/row(s) (Numeric / Array / Struct) - As of CF10+ you can pass a Structure whose keys map to the query column names to insert a row of data; or an Array of those Structures to insert multiple rows at once.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryColumnArray",
		"body": "queryColumnArray(${1:query})",
		"description": "return the column names as array, in the orders of the column in the database\n\nUSAGE:\narray queryColumnArray(query)\n\nPARAMETERS:\n\nquery (query)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryColumnCount",
		"body": "queryColumnCount(${1:query})",
		"description": "\n\nUSAGE:\nnumeric queryColumnCount(query)\n\nPARAMETERS:\n\nquery (query)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryColumnData",
		"body": "queryColumnData(${1:query}, ${2:columnName})",
		"description": "Returns the data in a query column.  See also valueArray which is supported on ACF2016+ and Lucee.\n\nUSAGE:\narray queryColumnData(query, columnName [, closure])\n\nPARAMETERS:\n\nquery (query)\n\ncolumnName (string)\n\nclosure (function)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryColumnExists",
		"body": "queryColumnExists(${1:query}, ${2:column})",
		"description": "\n\nUSAGE:\nboolean queryColumnExists(query, column)\n\nPARAMETERS:\n\nquery (query)\n\ncolumn (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryColumnList",
		"body": "queryColumnList(${1:query})",
		"description": "Returns the column names of a query as a list.\n\nUSAGE:\nstring queryColumnList(query [, delimiter])\n\nPARAMETERS:\n\nquery (query)\n\ndelimiter (string). Default: ,.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryConvertForGrid",
		"body": "queryConvertForGrid(${1:query}, ${2:page}, ${3:pageSize})",
		"description": " Converts query data to a structure that contains a paged subset of the query.\n\nUSAGE:\nstruct queryConvertForGrid(query, page, pageSize)\n\nPARAMETERS:\n\nquery (string) - No Help Available\n\npage (numeric) - No Help Available\n\npageSize (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryCurrentRow",
		"body": "queryCurrentRow(${1:query})",
		"description": "\n\nUSAGE:\nnumeric queryCurrentRow(query)\n\nPARAMETERS:\n\nquery (query)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryDeleteColumn",
		"body": "queryDeleteColumn(${1:query}, ${2:column})",
		"description": "\n\nUSAGE:\narray queryDeleteColumn(query, column)\n\nPARAMETERS:\n\nquery (query)\n\ncolumn (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryDeleteRow",
		"body": "queryDeleteRow(${1:query})",
		"description": "\n\nUSAGE:\nboolean queryDeleteRow(query [, row])\n\nPARAMETERS:\n\nquery (query)\n\nrow (numeric). Default: -9999.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryEach",
		"body": "queryEach(${1:query}, ${2:closure})",
		"description": "\n\nUSAGE:\nvoid queryEach(query, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\nquery (query)\n\nclosure (function)\n\nparallel (boolean) - Lucee-only\n\nmaxThreads (numeric) - Lucee-only. Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryEvery",
		"body": "queryEvery(${1:query}, ${2:closure})",
		"description": "\n\nUSAGE:\nboolean queryEvery(query, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\nquery (query)\n\nclosure (function)\n\nparallel (boolean)\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryExecute",
		"body": "queryExecute(${1:sql}, ${2|cfsqltype,list|}, ${3|datasource,cachename,dbtype|})",
		"description": "Executes a SQL query, returns the result.\n\nUSAGE:\nquery queryExecute(sql, params, options)\n\nPARAMETERS:\n\nsql (string) - SQL string to execute.\n\nparams (any) - Array or Struct of parameter values. When passing an array use ? as place holders. When passing a struct use :keyName where keyName is the name of the key in the structure corresponding to the parameter. The struct or array can be a struct with keys such as the following. Values: cfsqltype, list.\n\noptions (struct) - Struct containing query options, all cfquery tag attributes are supported except the name attribute. Values: datasource, cachename, dbtype.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryFilter",
		"body": "queryFilter(${1:query}, ${2:filter})",
		"description": "Filters query rows specified in filter criteria\n\nUSAGE:\nquery queryFilter(query, filter [, parallel] [, maxThreads])\n\nPARAMETERS:\n\nquery (query)\n\nfilter (function)\n\nparallel (boolean) - Lucee-only\n\nmaxThreads (numeric) - Lucee-only. Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryGetCell",
		"body": "queryGetCell(${1:query}, ${2:column_name})",
		"description": "\n\nUSAGE:\nany queryGetCell(query, column_name [, row_number])\n\nPARAMETERS:\n\nquery (query)\n\ncolumn_name (string)\n\nrow_number (numeric). Default: -9999.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryGetResult",
		"body": "queryGetResult(${1:query})",
		"description": " Returns the metadata of a query.\n\nUSAGE:\nstruct queryGetResult(query)\n\nPARAMETERS:\n\nquery (query) - The query whose metadata is to be returned.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryGetRow",
		"body": "queryGetRow(${1:query}, ${2:rowNumber})",
		"description": "Returns a struct having all the columns as keys and their corresponding values.\n\nUSAGE:\nstruct queryGetRow(query, rowNumber)\n\nPARAMETERS:\n\nquery () - query object do get data from.\n\nrowNumber () - position of the row to be returned.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryKeyExists",
		"body": "queryKeyExists(${1:query}, ${2:key})",
		"description": "Determines whether the specified column (key) is present in a query.\n\nUSAGE:\nboolean queryKeyExists(query, key)\n\nPARAMETERS:\n\nquery (query) - Query Object to test.\n\nkey (string) - Key to test\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryMap",
		"body": "queryMap(${1:query}, ${2:closure})",
		"description": "Maps each query row using a function to manipulate the rows fields\n\nUSAGE:\nquery queryMap(query, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\nquery (query)\n\nclosure (function)\n\nparallel (boolean)\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryNew",
		"body": "queryNew(${1:columnList})",
		"description": "Creates a new query object. The query can be populated with data using functions queryAddRow, querySetCell, or by passing it in to the rowData argument.\n\nUSAGE:\nquery queryNew(columnList [, columnTypeList] [, rowData])\n\nPARAMETERS:\n\ncolumnList (string) - A string or a variable that contains one. Delimited list\n of column names, or an empty string.\n\ncolumnTypeList (string) - CF7+ Comma-delimited list specifying column data types. Values: Integer, BigInt, Double, Decimal, VarChar, Binary, Bit, Time, Data.\n\nrowData (any) - CF10+ Data to populate the query. Can be a struct (with keys matching column names), an array of structs, or an array of arrays (in same order as columnList)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryRecordCount",
		"body": "queryRecordCount(${1:query})",
		"description": "\n\nUSAGE:\nnumeric queryRecordCount(query)\n\nPARAMETERS:\n\nquery (query)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryReduce",
		"body": "queryReduce(${1:query}, ${2:closure})",
		"description": "Reduces query columns just like in array or collection\n\nUSAGE:\nany queryReduce(query, closure [, initialValue])\n\nPARAMETERS:\n\nquery (query)\n\nclosure (function)\n\ninitialValue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "queryRowData",
		"body": "queryRowData(${1:query}, ${2:rowNumber})",
		"description": "\n\nUSAGE:\nstruct queryRowData(query, rowNumber)\n\nPARAMETERS:\n\nquery (query)\n\nrowNumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "querySetCell",
		"body": "querySetCell(${1:query}, ${2:column}, ${3:value})",
		"description": " Sets a cell to a value. If no row number is specified,\n the cell on the last row is set.\n\nUSAGE:\nboolean querySetCell(query, column, value [, row])\n\nPARAMETERS:\n\nquery (query)\n\ncolumn (string)\n\nvalue (any)\n\nrow (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "querySlice",
		"body": "querySlice(${1:query}, ${2:offset})",
		"description": "Returns a query containing a subset of another query\n\nUSAGE:\nquery querySlice(query, offset [, length])\n\nPARAMETERS:\n\nquery (query)\n\noffset (numeric) - The first row to include in the new query\n\nlength (numeric) - The number of rows to include in the new query, defaults to all remaining rows\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "querySome",
		"body": "querySome(${1:query}, ${2:closure})",
		"description": "\n\nUSAGE:\nboolean querySome(query, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\nquery (query)\n\nclosure (function)\n\nparallel (boolean)\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "querySort",
		"body": "querySort(${1:query}, ${2:sortFunction})",
		"description": "Sorts a query.\n\nUSAGE:\nboolean querySort(query, sortFunction [, direction])\n\nPARAMETERS:\n\nquery (query) - The query you want to sort\n\nsortFunction (function) - CF2016+ or Lucee5.1.0.13+ a function with two arguments each corresponding to a query row. The function returns -1 if first row is less than second, 0 if equal, or 1 if first row is greater than second. Lucee4.5+ accepts a column name to sort by instead of a function.\n\ndirection (string) - Lucee4.5+ Only supported on Lucee when second argument is a column name instead of a callback function.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "quotedValueList",
		"body": "quotedValueList(${1:column})",
		"description": " Gets the values of each record returned from an executed query.\n CFML does not evaluate the arguments\n\nUSAGE:\nstring quotedValueList(column [, delimiter])\n\nPARAMETERS:\n\ncolumn (QueryColumn)\n\ndelimiter (string). Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "rand",
		"body": "rand()",
		"description": " Generates a pseudo-random number in the range 0 - 1.\n\nUSAGE:\nnumeric rand( [algorithm])\n\nPARAMETERS:\n\nalgorithm (string) - The algorithm to use to generated the random number.. Default: CFMX_COMPAT. Values: CFMX_COMPAT, SHA1PRNG, IBMSecureRandom.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "randomize",
		"body": "randomize(${1:number})",
		"description": " Seeds the pseudo-random number generator with an\n integer number, ensuring repeatable number patterns.\n\nUSAGE:\nnumeric randomize(number [, algorithm])\n\nPARAMETERS:\n\nnumber (numeric)\n\nalgorithm (string) - The algorithm to use to generated the random number.. Default: CFMX_COMPAT. Values: CFMX_COMPAT, SHA1PRNG, IBMSecureRandom.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "randRange",
		"body": "randRange(${1:number1}, ${2:number2})",
		"description": "Generates a random integer between two specified numbers.\n Requests for random integers that are greater than 100,000,000\n result in non-random numbers, to prevent overflow during\n internal computations.\n\nUSAGE:\nnumeric randRange(number1, number2 [, algorithm])\n\nPARAMETERS:\n\nnumber1 (numeric)\n\nnumber2 (numeric)\n\nalgorithm (string) - CF7+ The algorithm to use to generated the random number.. Default: CFMX_COMPAT. Values: CFMX_COMPAT, SHA1PRNG, IBMSecureRandom, NativePRNG, NativePRNGBlocking, NativePRNGNonBlocking.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "reEscape",
		"body": "reEscape(${1:string})",
		"description": "Escapes regular expression control characters within a string.\n\nUSAGE:\nstring reEscape(string)\n\nPARAMETERS:\n\nstring () - The string you that to escape.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "reFind",
		"body": "reFind(${1:reg_expression}, ${2:String})",
		"description": "Uses a regular expression (RE) to search a string for a pattern, starting from a specified position. The search is case sensitive.\n\nUSAGE:\nany reFind(reg_expression, String [, start] [, returnsubexpressions] [, scope])\n\nPARAMETERS:\n\nreg_expression (Regex)\n\nString (string) - A string or a variable that contains one. String in which\n to search.\n\nstart (numeric). Default: 1.\n\nreturnsubexpressions (boolean) - True: if the regular expression is found, the first array\n element contains the length and position, respectively,\n of the first match.\n If the regular expression contains parentheses that\n group subexpressions, each subsequent array element\n contains the length and position, respectively, of\n the first occurrence of each group.\n If the regular expression is not found, the arrays each\n contain one element with the value 0.\n False: the function returns the position in the string\n where the match begins. Default. Values: true, false.\n\nscope (string) - CF2016+ * one: returns the first value that matches the regex.\n * all: returns all values that match the regex.. Default: one. Values: one, all.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "reFindNoCase",
		"body": "reFindNoCase(${1:reg_expression}, ${2:string})",
		"description": "Uses a regular expression (RE) to search a string for a pattern, starting from a specified position. The search is case-insensitive.\n\nUSAGE:\nany reFindNoCase(reg_expression, string [, start] [, returnsubexpressions] [, scope])\n\nPARAMETERS:\n\nreg_expression (Regex)\n\nstring (string) - A string or a variable that contains one. String in which\n to search.\n\nstart (numeric). Default: 1.\n\nreturnsubexpressions (boolean) - True: if the regular expression is found, the first array\n element contains the length and position, respectively,\n of the first match.\n If the regular expression contains parentheses that\n group subexpressions, each subsequent array element\n contains the length and position, respectively, of\n the first occurrence of each group.\n If the regular expression is not found, the arrays each\n contain one element with the value 0.\n False: the function returns the position in the string\n where the match begins. Default. Values: true, false.\n\nscope (string) - CF2016+ * one: returns the first value that matches the regex.\n * all: returns all values that match the regex.. Default: one. Values: one, all.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "releaseCOMObject",
		"body": "releaseCOMObject(${1:objectName})",
		"description": " Releases a COM Object and frees up resources that it used.\n\nUSAGE:\nvoid releaseCOMObject(objectName)\n\nPARAMETERS:\n\nobjectName (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "reMatch",
		"body": "reMatch(${1:reg_expression}, ${2:string})",
		"description": "Uses a regular expression (RE) to search a string for a pattern, starting from a specified position.\n\nUSAGE:\narray reMatch(reg_expression, string)\n\nPARAMETERS:\n\nreg_expression (string) - Regular expression for which to search. Case sensitive.\n\nstring (string) - A string or a variable that contains one. String in which to search.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "reMatchNoCase",
		"body": "reMatchNoCase(${1:reg_expression}, ${2:string})",
		"description": "Uses a regular expression (RE) to search a string for a pattern, starting from a specified position.\n\nUSAGE:\narray reMatchNoCase(reg_expression, string)\n\nPARAMETERS:\n\nreg_expression (string) - Regular expression for which to search. Case insensitive.\n\nstring (string) - A string or a variable that contains one. String in which to search.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "removeCachedQuery",
		"body": "removeCachedQuery(${1:SQL}, ${2:datasource})",
		"description": " Removes the query with the details you provide from query cache.\n\nUSAGE:\nvoid removeCachedQuery(SQL, datasource [, params] [, region])\n\nPARAMETERS:\n\nSQL () - The Query SQL.\n\ndatasource () - The datasource you ran the query on..\n\nparams () -  Array of parameter values passed to SQL.\n\nregion () - Specifies the cache region where you can place the cache object.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "removeChars",
		"body": "removeChars(${1:String}, ${2:start}, ${3:count})",
		"description": " Removes characters from a string.\n\nUSAGE:\nstring removeChars(String, start, count)\n\nPARAMETERS:\n\nString (string) - The string or variable containing a string to process.\n\nstart (numeric) - The starting position in the string to process.\n\ncount (numeric) - Number of characters to remove.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "render",
		"body": "render(${1||})",
		"description": "Executes CFML/Lucee code that you provide as a string.\n\nUSAGE:\nvoid render(CFML [, dialect])\n\nPARAMETERS:\n\nCFML (string) - String to evaluate including some CFML/Lucee code Values: .\n\ndialect (string) - The dialect you want details for. Default: current template's dialect. Values: CFML, Lucee.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "repeatString",
		"body": "repeatString(${1:String}, ${2:count})",
		"description": " Creates a string that contains a specified number of\n repetitions of the specified string.\n\nUSAGE:\nstring repeatString(String, count)\n\nPARAMETERS:\n\nString (string)\n\ncount (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "replace",
		"body": "replace(${1:String}, ${2:substring1}, ${3:substring2})",
		"description": "Replaces occurrences of substring1 in a string with substring2,\n in a specified scope. The search is case-sensitive. Function returns original string with replacements made.\n\nUSAGE:\nstring replace(String, substring1, substring2 [, scope])\n\nPARAMETERS:\n\nString (string) - String to search\n\nsubstring1 (string) - Substring to find within string\n\nsubstring2 (string) - Substring to replace substring1 with. As of CF2016+ you can also pass a callback function in this argument `function(pattern, position, originalString)`.\n\nscope (string) - * one: replace the first occurrence\n * all: replace all occurrences. Default: one. Values: one, all.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "replaceList",
		"body": "replaceList(${1:String}, ${2:list1}, ${3:list2})",
		"description": "Replaces occurrences of the elements from a delimited list\n in a string with corresponding elements from another delimited\n list. The search is case-sensitive.\n\nUSAGE:\nstring replaceList(String, list1, list2 [, delimiter] [, delimiterList1] [, delimiterList2] [, includeEmptyFields])\n\nPARAMETERS:\n\nString (string) - A string, or a variable that contains one, within which to replace substring\n\nlist1 (string) - List of substrings for which to search\n\nlist2 (string) - List of replacement substrings\n\ndelimiter (string) - Common delimiter for both search and replacement.. Default: ,.\n\ndelimiterList1 (string) - Delimiter for search.. Default: ,.\n\ndelimiterList2 (string) - Delimiter for replacement.. Default: ,.\n\nincludeEmptyFields (boolean) - When true, zero-length list elements are preserved.. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "replaceListNoCase",
		"body": "replaceListNoCase(${1:String}, ${2:list1}, ${3:list2})",
		"description": "Replaces occurrences of the elements from a delimited list\n in a string with corresponding elements from another delimited\n list. The search is case-insensitive.\n\nUSAGE:\nstring replaceListNoCase(String, list1, list2 [, delimiter] [, delimiterList1] [, delimiterList2] [, includeEmptyFields])\n\nPARAMETERS:\n\nString (string) - A string, or a variable that contains one, within which to replace substring\n\nlist1 (string) - List of substrings for which to search\n\nlist2 (string) - List of replacement substrings\n\ndelimiter (string) - Common delimiter for both search and replacement.. Default: ,.\n\ndelimiterList1 (string) - Delimiter for search.. Default: ,.\n\ndelimiterList2 (string) - Delimiter for replacement.. Default: ,.\n\nincludeEmptyFields (boolean) - When true, zero-length list elements are preserved.. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "replaceNoCase",
		"body": "replaceNoCase(${1:String}, ${2:substring1}, ${3:substring2})",
		"description": " Replaces occurrences of substring1 with substring2, in the\n specified scope. The search is case-insensitive.\n\nUSAGE:\nstring replaceNoCase(String, substring1, substring2 [, scope])\n\nPARAMETERS:\n\nString (string) - A string (or variable that contains one) within which to\n replace substring\n\nsubstring1 (string)\n\nsubstring2 (string)\n\nscope (string) - * one: Replace the first occurrence (default)\n * all: Replace all occurrences Values: one, all.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "reReplace",
		"body": "reReplace(${1:string}, ${2:regex}, ${3:substring})",
		"description": "Uses a regular expression (regex) to search a string for a string pattern and replace it with another. The search is case-sensitive.\n\nUSAGE:\nstring reReplace(string, regex, substring [, scope])\n\nPARAMETERS:\n\nstring (string) - A string or a variable that contains one\n\nregex (Regex) - Regular expression to replace.\n\nsubstring (string) - A string or a variable that contains one. Replaces substring with the regex match\n\nscope (string) - * one: Replace the first occurrence of the regular\n expression. Default.\n * all: Replace all occurrences of the regular expression.. Default: one. Values: one, all.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "reReplaceNoCase",
		"body": "reReplaceNoCase(${1:String}, ${2:reg_expression}, ${3:substring})",
		"description": "Uses a regular expression to search a string for a string\n pattern and replace it with another. The search is\n case-insensitive.\n\nUSAGE:\nstring reReplaceNoCase(String, reg_expression, substring [, scope])\n\nPARAMETERS:\n\nString (string) - A string or a variable that contains one\n\nreg_expression (Regex) - Regular expression to replace.\n\nsubstring (string) - A string or a variable that contains one. Replaces\n reg_expression\n\nscope (string) - * one: Replace the first occurrence of the regular\n expression. Default.\n * all: Replace all occurrences of the regular expression. Values: one, all.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "restDeleteApplication",
		"body": "restDeleteApplication(${1:dirPath})",
		"description": " Unregisters the directory path if it is already registered.\n\nUSAGE:\nvoid restDeleteApplication(dirPath)\n\nPARAMETERS:\n\ndirPath () - Path to the directory to be unregistered. If the path is not valid, it results in an error.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "restInitApplication",
		"body": "restInitApplication(${1:dirPath}, ${2:serviceMapping}, ${3:password})",
		"description": "Scans all the CFCs in dirPath, and places those that are REST enabled at the serviceMapping URL. Requires the web admin password under Lucee.\n\nUSAGE:\nvoid restInitApplication(dirPath, serviceMapping [, default], password)\n\nPARAMETERS:\n\ndirPath (string) - The path to a folder of CFCs to scan. Should be a full file system path\n\nserviceMapping (string) - The root of the exposed API, minus the server-wide prefix. E.g. to expose at '/rest/api/' you should set this to 'api'.\n\ndefault (string) - If the mapping is a default mapping set this to true (Lucee only)\n\npassword (string) - The password for the web admin (Lucee only)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "restSetResponse",
		"body": "restSetResponse(${1:response})",
		"description": " Sets the custom responses.\n\nUSAGE:\nvoid restSetResponse(response)\n\nPARAMETERS:\n\nresponse () - A struct that contains the response details.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "reverse",
		"body": "reverse(${1:String})",
		"description": " Reverses the order of items, such as the characters in a\n string and the digits in a number\n\nUSAGE:\nstring reverse(String)\n\nPARAMETERS:\n\nString (string) - A string or a variable that contains one\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "right",
		"body": "right(${1:String}, ${2:count})",
		"description": " Gets a specified number of characters from a string,\n beginning at the right.\n\nUSAGE:\nstring right(String, count)\n\nPARAMETERS:\n\nString (string)\n\ncount (numeric) - A positive integer or a variable that contains one.\n Number of characters to return.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "rJustify",
		"body": "rJustify(${1:String}, ${2:length})",
		"description": " Right justifies characters of a string.\n\nUSAGE:\nstring rJustify(String, length)\n\nPARAMETERS:\n\nString (string)\n\nlength (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "round",
		"body": "round(${1:number})",
		"description": " Rounds a number to the closest integer.\n\nUSAGE:\nnumeric round(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "rTrim",
		"body": "rTrim(${1:String})",
		"description": " Removes spaces from the end of a string.\n\nUSAGE:\nstring rTrim(String)\n\nPARAMETERS:\n\nString (string) - A string or a variable that contains one\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "second",
		"body": "second(${1:date})",
		"description": " Extracts the ordinal for the second from a date/time object.\n\nUSAGE:\nnumeric second(date)\n\nPARAMETERS:\n\ndate (date) - A date/time object\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sendGatewayMessage",
		"body": "sendGatewayMessage(${1:gatewayID}, ${2:data})",
		"description": " Sends an outgoing message through a ColdFusion MX event gateway.\n\nUSAGE:\nstring sendGatewayMessage(gatewayID, data)\n\nPARAMETERS:\n\ngatewayID (string) - Identifier of the gateway to send the message.\n\ndata (struct) - A ColdFusion structure.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "serialize",
		"body": "serialize(${1:objToBeSerialized}, ${2:type}, ${3:useCustomSerializer})",
		"description": "Serializes the object to a specified type\n\nUSAGE:\nstring serialize(objToBeSerialized, type, useCustomSerializer)\n\nPARAMETERS:\n\nobjToBeSerialized () - An object to be serialized.\n\ntype () - A type to which the object will be serialized. ColdFusion, by default supports XML and JSON formats. You can also implement support for other types in the CustomSerializer CFC.\n\nuseCustomSerializer () - Boolean. Whether to use the custom serializer or not. The default value is true. The custom serializer will be always used for XML deserialization. If false, the XML/JSON deserialization will be done using the default ColdFusion behavior. If any other type is passed with useCustomSerializer as false, then TypeNotSupportedException will be thrown.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "serializeJSON",
		"body": "serializeJSON(${1:var})",
		"description": "Converts a ColdFusion variable into a JSON (JavaScript Object Notation) string.\n\nUSAGE:\nstring serializeJSON(var [, serializeQueryByColumns] [, useCustomSerializer])\n\nPARAMETERS:\n\nvar (variableName) - A ColdFusion variable.\n\nserializeQueryByColumns (boolean) - A Boolean value that specifies how to serialize ColdFusion queries.. Default: false.\n\nuseCustomSerializer (boolean) - CF11+ Use custom serializer if defined. See: https://helpx.adobe.com/coldfusion/developing-applications/changes-in-coldfusion/restful-web-services-in-coldfusion.html. Default: true.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "serializeXML",
		"body": "serializeXML(${1:objToBeSerialized}, ${2:useCustomSerializer})",
		"description": "Serializes a ColdFusion object to XML.\n\nUSAGE:\nstring serializeXML(objToBeSerialized, useCustomSerializer)\n\nPARAMETERS:\n\nobjToBeSerialized () - An object to be serialized.\n\nuseCustomSerializer () - Boolean. Whether to use the custom serializer or not. The default value is true. The custom serializer will be always used for XML deserialization. If false, the XML/JSON deserialization will be done using the default ColdFusion behavior. If any other type is passed with useCustomSerializer as false, then TypeNotSupportedException will be thrown..\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sessionGetMetadata",
		"body": "sessionGetMetadata(${1:region})",
		"description": " Returns meta data related to the current session.\n\nUSAGE:\nstruct sessionGetMetadata(region)\n\nPARAMETERS:\n\nregion () - Name of the cache region.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sessionInvalidate",
		"body": "sessionInvalidate()",
		"description": "Clears session scope and makes the current session identifiers no longer valid. This function does not invalidate J2EE sessions, only CF sessions (CFID/CFToken)\n\nUSAGE:\nvoid sessionInvalidate()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sessionRotate",
		"body": "sessionRotate()",
		"description": "Creates a new session (using new session ids) and copies session scope into this new session, then invalidates the old session. Used after a valid login to prevent session fixation.\n\nUSAGE:\nvoid sessionRotate()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sessionstartTime",
		"body": "sessionstartTime()",
		"description": "Provides information about the time when the current users session scope was created\n\nUSAGE:\ndate sessionstartTime()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "setEncoding",
		"body": "setEncoding(${1:scope_name}, ${2|utf-8,iso-8859-1,windows-1252,us-ascii,shift_jis,iso-2022-jp,euc-jp,euc-kr,big5,euc-cn,utf-16|})",
		"description": " Sets the character encoding (character set) of Form and URL\n scope variable values; used when the character encoding of\n the input to a form, or the character encoding of a URL, is\n not in UTF-8 encoding.\n\nUSAGE:\nvoid setEncoding(scope_name, charset)\n\nPARAMETERS:\n\nscope_name (string)\n\ncharset (string) - The character encoding in which text in the scope\n variables is encoded. Values: utf-8, iso-8859-1, windows-1252, us-ascii, shift_jis, iso-2022-jp, euc-jp, euc-kr, big5, euc-cn, utf-16.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "setLocale",
		"body": "setLocale(${1|Chinese (China),Chinese (Hong Kong),Chinese (Taiwan),Dutch (Belgian),Dutch (Standard),English (Australian),English (Canadian),English (New Zealand),English (US),English (UK),French (Belgian),French (Canadian),French (Standard),French (Swiss),German (Austrian),German (Standard),German (Swiss),Italian (Standard),Italian (Swiss),Japanese,Korean,Norwegian (Bokmal),Norwegian (Nynorsk),Portuguese (Brazilian),Portuguese (Standard),Spanish (Modern),Spanish (Standard),Swedish|})",
		"description": " Sets the country/language locale for CFML processing\n and the page returned to the client. The locale value\n determines the default format of date, time, number, and\n currency values, according to language and regional\n conventions.\n\nUSAGE:\nstring setLocale(new_locale)\n\nPARAMETERS:\n\nnew_locale (string) - The name of a locale; for example, \"English (US)\" Values: Chinese (China), Chinese (Hong Kong), Chinese (Taiwan), Dutch (Belgian), Dutch (Standard), English (Australian), English (Canadian), English (New Zealand), English (US), English (UK), French (Belgian), French (Canadian), French (Standard), French (Swiss), German (Austrian), German (Standard), German (Swiss), Italian (Standard), Italian (Swiss), Japanese, Korean, Norwegian (Bokmal), Norwegian (Nynorsk), Portuguese (Brazilian), Portuguese (Standard), Spanish (Modern), Spanish (Standard), Swedish.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "setProfileString",
		"body": "setProfileString(${1:inipath}, ${2:section}, ${3:entry}, ${4:value})",
		"description": "Sets the value of a profile entry in an initialization file.\n\nUSAGE:\nstring setProfileString(inipath, section, entry, value)\n\nPARAMETERS:\n\ninipath (string) - Absolute path of initialization file\n\nsection (string) - Section of the initialization file in which the entry is\n to be set\n\nentry (string) - Name of the entry to set\n\nvalue (string) - Value to which to set the entry\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "setTimezone",
		"body": "setTimezone(${1:timezone})",
		"description": "Change the timezone defintion for the current request\n\nUSAGE:\nstring setTimezone(timezone)\n\nPARAMETERS:\n\ntimezone (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "setVariable",
		"body": "setVariable(${1:name}, ${2:value})",
		"description": "Sets a variable in the name parameter to the value of the value parameter.\n\nUSAGE:\nvoid setVariable(name, value)\n\nPARAMETERS:\n\nname (string) - Variable name\n\nvalue (string) - A string, the name of a string, or a number\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sgn",
		"body": "sgn(${1:number})",
		"description": " Determines the sign of a number.\n\nUSAGE:\nnumeric sgn(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sin",
		"body": "sin(${1:number})",
		"description": " Calculates the sine of an angle that is entered in radians.\n\nUSAGE:\nnumeric sin(number)\n\nPARAMETERS:\n\nnumber (numeric)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sizeOf",
		"body": "sizeOf(${1:obj})",
		"description": "Returns the size in bytes of a given object\n\nUSAGE:\nany sizeOf(obj [, complex])\n\nPARAMETERS:\n\nobj (any)\n\ncomplex (boolean)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sleep",
		"body": "sleep(${1:duration})",
		"description": "Causes the current thread to stop processing for a specified period of time.\n\nUSAGE:\nvoid sleep(duration)\n\nPARAMETERS:\n\nduration () - Time, in milliseconds, to stop processing the current thread\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "soundEx",
		"body": "soundEx(${1:str})",
		"description": "Soundex is a phonetic algorithm for indexing names by sound, as pronounced in English. The goal is for homophones to be encoded to the same representation so that they can be matched despite minor differences in spelling. The algorithm mainly encodes consonants; a vowel will not be encoded unless it is the first letter. Soundex is the most widely known of all phonetic algorithms, as it is a standard feature of MS SQL and Oracle, and is often used (incorrectly) as a synonym for 'phonetic algorithm'\n\nUSAGE:\nString soundEx(str)\n\nPARAMETERS:\n\nstr (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spanExcluding",
		"body": "spanExcluding(${1:String}, ${2:set})",
		"description": " Gets characters from a string, from the beginning to a\n character that is in a specified set of characters. The\n search is case-sensitive.\n\nUSAGE:\nstring spanExcluding(String, set)\n\nPARAMETERS:\n\nString (string)\n\nset (string) - A string or a variable that contains a set of characters.\n Must contain one or more characters\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spanIncluding",
		"body": "spanIncluding(${1:String}, ${2:set})",
		"description": " Gets characters from a string, from the beginning to a\n character that is not in a specified set of characters. The\n search is case-sensitive.\n\nUSAGE:\nstring spanIncluding(String, set)\n\nPARAMETERS:\n\nString (string)\n\nset (string) - A string or a variable that contains a set of characters.\n Must contain one or more characters\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetAddAutoFilter",
		"body": "spreadsheetAddAutoFilter(${1:spreadsheetObj}, ${2:autofilter})",
		"description": "A function to add auto filters to the spreadsheet.\n\nUSAGE:\nvoid spreadsheetAddAutoFilter(spreadsheetObj, autofilter)\n\nPARAMETERS:\n\nspreadsheetObj (any) - Excel spreadsheet object\n\nautofilter (string) - The Excel filter that needs to be applied to the sheet. Note that the vale should not contain spaces or invalid characters.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetAddColumn",
		"body": "spreadsheetAddColumn(${1:spreadsheetObj}, ${2:data}, ${3:startrow}, ${4:startcolumn}, ${5:insert})",
		"description": " Adds a column or column data to an Excel spreadsheet object.\n\nUSAGE:\nvoid spreadsheetAddColumn(spreadsheetObj, data, startrow, startcolumn, insert [, insert])\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\ndata (string) - No Help Available\n\nstartrow (numeric) - No Help Available\n\nstartcolumn (numeric) - No Help Available\n\ninsert (boolean) - No Help Available\n\ninsert (boolean) - No Help Available Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetAddFreezePane",
		"body": "spreadsheetAddFreezePane(${1:spreadsheetObj}, ${2:column}, ${3:row})",
		"description": " Adds freeze pane to spreadsheet\n\nUSAGE:\nvoid spreadsheetAddFreezePane(spreadsheetObj, column, row [, endColumn] [, endRow])\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - Spreadsheet variable\n\ncolumn (numeric) - No Help Available\n\nrow (numeric) - No Help Available\n\nendColumn (numeric) - No Help Available\n\nendRow (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetAddimage",
		"body": "spreadsheetAddimage(${1:spreadsheetObj}, ${2:imagefilepath}, ${3:anchor})",
		"description": " Adds an image to an Excel spreadsheet object.\n\nUSAGE:\nvoid spreadsheetAddimage(spreadsheetObj, imagefilepath, anchor)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nimagefilepath (string) - No Help Available\n\nanchor (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetAddInfo",
		"body": "spreadsheetAddInfo(${1:spreadsheetObj}, ${2:info})",
		"description": " Adds information to an Excel spreadsheet object.\n\nUSAGE:\nvoid spreadsheetAddInfo(spreadsheetObj, info)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\ninfo (struct) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetAddPagebreaks",
		"body": "spreadsheetAddPagebreaks(${1:SpreadsheetObj}, ${2:rowbreaks}, ${3:colbreaks})",
		"description": "A function to add page breaks for rows and columns to a Spreadsheet Object.\n\nUSAGE:\nvoid spreadsheetAddPagebreaks(SpreadsheetObj, rowbreaks, colbreaks)\n\nPARAMETERS:\n\nSpreadsheetObj (any) - Excel spreadsheet object to apply page break to.\n\nrowbreaks (string) - Comma-delimited row numbers where the page breaks will be applied.\n\ncolbreaks (string) - Comma-delimited column numbers where the page breaks will be applied.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetAddRow",
		"body": "spreadsheetAddRow(${1:spreadsheetObj}, ${2:data})",
		"description": "Adds a row to an Excel spreadsheet object.\n\nUSAGE:\nvoid spreadsheetAddRow(spreadsheetObj, data [, row] [, column] [, insert] [, datatype])\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - The speadsheet\n\ndata (string) - A comma seperated list of cell values.\n\nrow (numeric) - Row number at which to insert, if omitted appended.\n\ncolumn (numeric) - Column number at which to insert data.. Default: 1.\n\ninsert (boolean) - When true appends data to spreadsheetObj, when false attempts to update rows.. Default: true. Values: true, false.\n\ndatatype (array) - CF11+ List of datatype expressions with values such as `STRING` `NUMERIC` or `DATE`. For example use `DATE:1;NUMERIC:2-2;STRING\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetAddRows",
		"body": "spreadsheetAddRows(${1:spreadsheetObj}, ${2:data})",
		"description": "Adds multiple rows from a query or array to an Excel spreadsheet object.\n\nUSAGE:\nvoid spreadsheetAddRows(spreadsheetObj, data [, row] [, column] [, insert] [, datatype] [, includeColumnNames])\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - The spreadsheet object variable\n\ndata (any) - A query or array\n\nrow (numeric) - The row number in the spreadsheet at which to insert the data. If omitted rows are appended.\n\ncolumn (numeric) - The column number to start, all columns to the left will be empty.\n\ninsert (boolean) - When true appends the row `data` to the `spreadsheetObj`. When `false` attempts to update the spreadsheet object rows.. Default: true. Values: true, false.\n\ndatatype (array) - CF11+ An array of datatype expressions with values `STRING` `NUMERIC` or `DATE`. For example use `DATE:1;NUMERIC:2-2;STRING\n\nincludeColumnNames (boolean) - CF2016+ When `true` writes column names as headers in the spreadsheet.. Default: false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetAddSplitPane",
		"body": "spreadsheetAddSplitPane(${1:spreadsheetObj}, ${2:x}, ${3:y}, ${4:splitColumn}, ${5:splitRow})",
		"description": " Adds split pane to spreadsheet.\n\nUSAGE:\nvoid spreadsheetAddSplitPane(spreadsheetObj, x, y, splitColumn, splitRow [, position])\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - Spreadsheet variable\n\nx (numeric) - X position for split\n\ny (numeric) - Y position for split\n\nsplitColumn (numeric) - Split Column\n\nsplitRow (numeric) - Split Row\n\nposition (string) - Specify which pane has the focus Values: LOWER_LEFT, LOWER_RIGHT, UPPER_LEFT, UPPER_RIGHT.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetCreateSheet",
		"body": "spreadsheetCreateSheet(${1:spreadsheetObj}, ${2:name})",
		"description": " Create spreadsheet from given spreadsheet object\n\nUSAGE:\nvoid spreadsheetCreateSheet(spreadsheetObj, name)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nname (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetDeleteColumn",
		"body": "spreadsheetDeleteColumn(${1:spreadsheetObj}, ${2:column})",
		"description": " Deletes the data from a column of an Excel spreadsheet object. It does not delete the column.\n\nUSAGE:\nvoid spreadsheetDeleteColumn(spreadsheetObj, column)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\ncolumn (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetDeleteColumns",
		"body": "spreadsheetDeleteColumns(${1:spreadsheetObj}, ${2:range})",
		"description": " Deletes the data from multiple columns of an Excel spreadsheet object. This function does not remove the columns.\n\nUSAGE:\nvoid spreadsheetDeleteColumns(spreadsheetObj, range)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nrange (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetDeleteRow",
		"body": "spreadsheetDeleteRow(${1:spreadsheetObj}, ${2:row})",
		"description": " Deletes all data from a row of an Excel spreadsheet object. It does not delete the row.\n\nUSAGE:\nvoid spreadsheetDeleteRow(spreadsheetObj, row)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nrow (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetDeleteRows",
		"body": "spreadsheetDeleteRows(${1:spreadsheetObj}, ${2:range})",
		"description": " Deletes all data from multiple rows of an Excel spreadsheet object. It does not delete the row.\n\nUSAGE:\nvoid spreadsheetDeleteRows(spreadsheetObj, range)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nrange (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetFormatCell",
		"body": "spreadsheetFormatCell(${1:spreadsheetObj}, ${2:format}, ${3:row}, ${4:column})",
		"description": " Formats the contents of a single cell of an Excel spreadsheet object.\n\nUSAGE:\nvoid spreadsheetFormatCell(spreadsheetObj, format, row, column)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nformat (string) - No Help Available\n\nrow (numeric) - No Help Available\n\ncolumn (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetFormatCellRange",
		"body": "spreadsheetFormatCellRange(${1:spreadsheetObj}, ${2:format}, ${3:startRow}, ${4:startColumn}, ${5:endRow}, ${6:endColumn})",
		"description": " Formats the cells within the given range.\n\nUSAGE:\nvoid spreadsheetFormatCellRange(spreadsheetObj, format, startRow, startColumn, endRow, endColumn)\n\nPARAMETERS:\n\nspreadsheetObj () - The Excel spreadsheet object for which you want to format the cells.\n\nformat () - A structure that contains format information.\n\nstartRow () - The number of the first row to format.\n\nstartColumn () - The number of the first column to format.\n\nendRow () - The number of the last row to format.\n\nendColumn () - The number of the last column to format.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetFormatColumn",
		"body": "spreadsheetFormatColumn(${1:spreadsheetObj}, ${2:format}, ${3:column})",
		"description": " Formats the contents of a single column of an Excel spreadsheet object.\n\nUSAGE:\nvoid spreadsheetFormatColumn(spreadsheetObj, format, column)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nformat (string) - No Help Available\n\ncolumn (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetFormatColumns",
		"body": "spreadsheetFormatColumns(${1:spreadsheetObj}, ${2:format}, ${3:columns})",
		"description": " Formats the contents of a multipe columns of an Excel spreadsheet object.\n\nUSAGE:\nvoid spreadsheetFormatColumns(spreadsheetObj, format, columns)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nformat (string) - No Help Available\n\ncolumns (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetFormatRow",
		"body": "spreadsheetFormatRow(${1:spreadsheetObj}, ${2:format}, ${3:row})",
		"description": " Formats the contents of a single row of an Excel spreadsheet object.\n\nUSAGE:\nvoid spreadsheetFormatRow(spreadsheetObj, format, row)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nformat (string) - No Help Available\n\nrow (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetFormatRows",
		"body": "spreadsheetFormatRows(${1:spreadsheetObj}, ${2:format}, ${3:row})",
		"description": " Formats the contents of a multipe rows of an Excel spreadsheet object.\n\nUSAGE:\nvoid spreadsheetFormatRows(spreadsheetObj, format, row)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nformat (string) - No Help Available\n\nrow (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetGetCellComment",
		"body": "spreadsheetGetCellComment(${1:author})",
		"description": " Gets the comment for an Excel spreadsheet object cell as a structure with formatting information, or all comments for the object.\n\nUSAGE:\narray spreadsheetGetCellComment(author [, column] [, comment] [, row])\n\nPARAMETERS:\n\nauthor (string) - No Help Available\n\ncolumn (numeric) - No Help Available\n\ncomment (string) - No Help Available\n\nrow (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetGetCellFormula",
		"body": "spreadsheetGetCellFormula(${1:spreadsheetObj}, ${2:row}, ${3:column})",
		"description": " Gets the formula for a for an Excel spreadsheet object cell, or all formulas for the object.\n\nUSAGE:\nstring spreadsheetGetCellFormula(spreadsheetObj, row, column)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nrow (numeric) - No Help Available\n\ncolumn (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetGetCellValue",
		"body": "spreadsheetGetCellValue(${1:spreadsheetObj}, ${2:row}, ${3:column})",
		"description": " Gets the Value for a for an Excel spreadsheet object cell.\n\nUSAGE:\nstring spreadsheetGetCellValue(spreadsheetObj, row, column)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nrow (string) - No Help Available\n\ncolumn (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetGetColumnCount",
		"body": "spreadsheetGetColumnCount(${1:spreadsheetObj})",
		"description": "Returns the number of columns in a given spreadsheet.\n\nUSAGE:\nnumeric spreadsheetGetColumnCount(spreadsheetObj [, sheet])\n\nPARAMETERS:\n\nspreadsheetObj (any) - The spreadsheet object\n\nsheet (string) - The sheet name or sheet number\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetInfo",
		"body": "spreadsheetInfo(${1:spreadsheetObj})",
		"description": " Returns spreadsheet property\n\nUSAGE:\nstruct spreadsheetInfo(spreadsheetObj)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetMergeCells",
		"body": "spreadsheetMergeCells(${1:spreadsheetObj}, ${2:startrow}, ${3:endrow}, ${4:startcolumn}, ${5:endcolumn})",
		"description": " Merges a rectangular block of two or more Excel spreadsheet object cells.\n\nUSAGE:\nvoid spreadsheetMergeCells(spreadsheetObj, startrow, endrow, startcolumn, endcolumn)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nstartrow (numeric) - No Help Available\n\nendrow (numeric) - No Help Available\n\nstartcolumn (numeric) - No Help Available\n\nendcolumn (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetNew",
		"body": "spreadsheetNew()",
		"description": " Creates a ColdFusion spreadsheet object, which represents a single sheet of an Excel document.\n\nUSAGE:\nany spreadsheetNew( [sheetname] [, xmlFormat])\n\nPARAMETERS:\n\nsheetname (string) - String value to be used as the sheet name.\n\nxmlFormat (boolean) - Boolean value to indicate the use of Excels xlsx format.. Default: false. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetRead",
		"body": "spreadsheetRead(${1:fileName}, ${2:spreadsheetObj})",
		"description": " Create a new spreadsheet variable from specified file\n\nUSAGE:\nvoid spreadsheetRead(fileName, spreadsheetObj)\n\nPARAMETERS:\n\nfileName (string) - No Help Available\n\nspreadsheetObj (variableName) - Spreadsheet name or number\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetReadBinary",
		"body": "spreadsheetReadBinary(${1:spreadsheetObj})",
		"description": " Reads spreadsheet file into a binary object\n\nUSAGE:\nvoid spreadsheetReadBinary(spreadsheetObj)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - Spreadsheet file\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetRemoveSheet",
		"body": "spreadsheetRemoveSheet(${1:spreadsheetObj}, ${2:sheetname})",
		"description": "Deletes a spreadsheet.\n\nUSAGE:\nvoid spreadsheetRemoveSheet(spreadsheetObj, sheetname)\n\nPARAMETERS:\n\nspreadsheetObj () - The Excel spreadsheet object from which you delete the sheet.\n\nsheetname () - Name of the sheet that must be removed.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetSetActiveSheet",
		"body": "spreadsheetSetActiveSheet(${1:spreadsheetObj})",
		"description": " Sets active sheet in given spreadsheet\n\nUSAGE:\nvoid spreadsheetSetActiveSheet(spreadsheetObj [, name])\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nname (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetSetActiveSheetNumber",
		"body": "spreadsheetSetActiveSheetNumber(${1:spreadsheetObj})",
		"description": " Sets number of active sheet in given spreadsheet\n\nUSAGE:\nvoid spreadsheetSetActiveSheetNumber(spreadsheetObj [, number])\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nnumber (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetSetCellComment",
		"body": "spreadsheetSetCellComment(${1:spreadsheetObj}, ${2:comment}, ${3:row}, ${4:column})",
		"description": " Specifies the comment for an Excel spreadsheet object cell.\n\nUSAGE:\nvoid spreadsheetSetCellComment(spreadsheetObj, comment, row, column)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\ncomment (string) - No Help Available\n\nrow (numeric) - No Help Available\n\ncolumn (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetSetCellFormula",
		"body": "spreadsheetSetCellFormula(${1:spreadsheetObj}, ${2:formula}, ${3:row}, ${4:column})",
		"description": " Specifies the formula for an Excel spreadsheet object cell.\n\nUSAGE:\nvoid spreadsheetSetCellFormula(spreadsheetObj, formula, row, column)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nformula (string) - No Help Available\n\nrow (numeric) - No Help Available\n\ncolumn (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetSetCellValue",
		"body": "spreadsheetSetCellValue(${1:spreadsheetObj}, ${2:value}, ${3:row}, ${4:column})",
		"description": " Specifies the value of an Excel spreadsheet object cell.\n\nUSAGE:\nvoid spreadsheetSetCellValue(spreadsheetObj, value, row, column)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nvalue (string) - No Help Available\n\nrow (numeric) - No Help Available\n\ncolumn (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetSetColumnWidth",
		"body": "spreadsheetSetColumnWidth(${1:spreadsheetObj}, ${2:columnNumber}, ${3:width})",
		"description": " Sets the width of a column in a worksheet.\n\nUSAGE:\nvoid spreadsheetSetColumnWidth(spreadsheetObj, columnNumber, width)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - The Excel spreadsheet object to which to set the column width.\n\ncolumnNumber (numeric) - Specifies the column to set the width.\n\nwidth (numeric) - Specifies the width in points.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetSetFooter",
		"body": "spreadsheetSetFooter(${1:spreadsheetObj}, ${2:leftFooter}, ${3:centerFooter}, ${4:rightFooter})",
		"description": " Adds a footer to the specified worksheet.\n\nUSAGE:\nvoid spreadsheetSetFooter(spreadsheetObj, leftFooter, centerFooter, rightFooter)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - The Excel spreadsheet object to which to add the footer.\n\nleftFooter (string) - Adds the footer in the left side of the worksheet.\n\ncenterFooter (string) - Adds the footer in the center of the worksheet.\n\nrightFooter (string) - Adds the footer in the right side of the worksheet.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetSetHeader",
		"body": "spreadsheetSetHeader(${1:spreadsheetObj}, ${2:leftHeader}, ${3:centerHeader}, ${4:rightHeader})",
		"description": " Adds a header to the specified worksheet.\n\nUSAGE:\nvoid spreadsheetSetHeader(spreadsheetObj, leftHeader, centerHeader, rightHeader)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - The Excel spreadsheet object to which to add the header.\n\nleftHeader (string) - Adds the header in the left side of the worksheet.\n\ncenterHeader (string) - Adds the header in the center of the worksheet.\n\nrightHeader (string) - Adds the header in the right side of the worksheet.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetSetRowHeight",
		"body": "spreadsheetSetRowHeight(${1:spreadsheetObj}, ${2:rowNumber}, ${3:height})",
		"description": " Sets the height of a row in a worksheet.\n\nUSAGE:\nvoid spreadsheetSetRowHeight(spreadsheetObj, rowNumber, height)\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - The Excel spreadsheet object to which to set the column width.\n\nrowNumber (numeric) - Specifies the row to set the height.\n\nheight (numeric) - Specifies the height in points.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetShiftColumns",
		"body": "spreadsheetShiftColumns(${1:spreadsheetObj}, ${2:start})",
		"description": " shifts one or more columns in Excel spreadsheet object left or right.\n\nUSAGE:\nvoid spreadsheetShiftColumns(spreadsheetObj, start [, end] [, start])\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nstart (numeric) - No Help Available\n\nend (numeric) - No Help Available\n\nstart (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetShiftRows",
		"body": "spreadsheetShiftRows(${1:spreadsheetObj}, ${2:start}, ${3:end})",
		"description": " shifts one or more rows in Excel spreadsheet object up or down. . The contents of the shifted row, including empty cells, overwrites data in the column to which it is shfted.\n\nUSAGE:\nvoid spreadsheetShiftRows(spreadsheetObj, start, end [, rows])\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nstart (numeric) - No Help Available\n\nend (numeric) - No Help Available\n\nrows (numeric) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "spreadsheetwrite",
		"body": "spreadsheetwrite(${1:spreadsheetObj}, ${2:fileName})",
		"description": " Writes Spreadsheet object into file\n\nUSAGE:\nvoid spreadsheetwrite(spreadsheetObj, fileName [, password] [, overwrite])\n\nPARAMETERS:\n\nspreadsheetObj (variableName) - No Help Available\n\nfileName (string) - No Help Available\n\npassword (string) - No Help Available\n\noverwrite (boolean) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sqr",
		"body": "sqr(${1:number})",
		"description": " Calculates the square root of a number.\n\nUSAGE:\nnumeric sqr(number)\n\nPARAMETERS:\n\nnumber (numeric) - A positive integer or a variable that contains one.\n Number whose square root to get.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sslCertificateInstall",
		"body": "sslCertificateInstall(${1:host})",
		"description": "Installs certificates of a specific host into the JVM certificate store\n\nUSAGE:\nvoid sslCertificateInstall(host [, port])\n\nPARAMETERS:\n\nhost (string)\n\nport (numeric). Default: 443.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "sslCertificateList",
		"body": "sslCertificateList(${1:host})",
		"description": "List all Certificates available on a specific host\n\nUSAGE:\nquery sslCertificateList(host [, port])\n\nPARAMETERS:\n\nhost (string)\n\nport (numeric). Default: 443.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "storeAddACL",
		"body": "storeAddACL(${1:url}, ${2:ACLObject})",
		"description": "Adds ACL to existing ACL for object or bucket.\n\nUSAGE:\nvoid storeAddACL(url, ACLObject)\n\nPARAMETERS:\n\nurl () - Amazon S3 URLs (content or object).\n\nACLObject () - An array of struct where each struct represents a permission or grant as discussed in ACLObject.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "storeGetACL",
		"body": "storeGetACL(${1:ulr}, ${2:ACLObject})",
		"description": " Gets the ACL object or bucket.\n\nUSAGE:\nany storeGetACL(ulr, ACLObject)\n\nPARAMETERS:\n\nulr () - Amazon S3 URLs (content or object)\n\nACLObject () - An array of struct where each struct represents a permission or grant as discussed in ACLObject.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "storeGetMetadata",
		"body": "storeGetMetadata(${1:url})",
		"description": " Returns the metadata related to the object or bucket.\n\nUSAGE:\nstruct storeGetMetadata(url)\n\nPARAMETERS:\n\nurl () - Amazon S3 URLs (bucket or object).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "storeSetACL",
		"body": "storeSetACL(${1:url}, ${2:ACLObject})",
		"description": " Sets the ACL for object or bucket.\n\nUSAGE:\nvoid storeSetACL(url, ACLObject)\n\nPARAMETERS:\n\nurl () - Amazon S3 URLs (content or object).\n\nACLObject () - An array of struct where each struct represents a permission or grant as discussed in ACLObject.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "storeSetMetadata",
		"body": "storeSetMetadata(${1:url}, ${2:region})",
		"description": "Sets the metadata on bucket or object.\n\nUSAGE:\nvoid storeSetMetadata(url, region)\n\nPARAMETERS:\n\nurl () - Amazon S3 URLs (bucket or object).\n\nregion () - Represents the metadata. See Standard keys for a list of standard keys in metadata.You can also have custom metadata apart from the standard ones.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "stringLen",
		"body": "stringLen(${1:string})",
		"description": "Get the length of a string.\n\nUSAGE:\nnumeric stringLen(string)\n\nPARAMETERS:\n\nstring (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "stripCR",
		"body": "stripCR(${1:String})",
		"description": " Deletes return characters from a string.\n\nUSAGE:\nstring stripCR(String)\n\nPARAMETERS:\n\nString (string) - A string or a variable that contains one\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structAppend",
		"body": "structAppend(${1:destStruct}, ${2:sourceStruct})",
		"description": "Appends one structure to another.\n\nUSAGE:\nboolean structAppend(destStruct, sourceStruct [, overwriteFlag])\n\nPARAMETERS:\n\ndestStruct (struct) - Structure to append.\n\nsourceStruct (struct) - Structure that contains the data to append to destStruct\n\noverwriteFlag (boolean) - Yes: values in sourceStruct overwrite corresponding values in\n destStruct. Default.. Default: true. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structClear",
		"body": "structClear(${1:structure})",
		"description": " Removes all data from a structure.\n\nUSAGE:\nboolean structClear(structure)\n\nPARAMETERS:\n\nstructure (struct) - Structure to clear\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structCopy",
		"body": "structCopy(${1:structure})",
		"description": " Copies a structure. Copies top-level keys, values, and arrays\n in the structure by value; copies nested structures by\n reference.\n\nUSAGE:\nstruct structCopy(structure)\n\nPARAMETERS:\n\nstructure (struct) - Structure to copy\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structCount",
		"body": "structCount(${1:structure})",
		"description": " Counts the keys in a structure.\n\nUSAGE:\nnumeric structCount(structure)\n\nPARAMETERS:\n\nstructure (struct) - Structure to access\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structDelete",
		"body": "structDelete(${1:structure}, ${2:key})",
		"description": "Removes an element from a structure.\n\nUSAGE:\nboolean structDelete(structure, key [, indicateNotExisting])\n\nPARAMETERS:\n\nstructure (string) - Structure or a variable that contains one. Contains element\n to remove\n\nkey (string) - Element to remove\n\nindicateNotExisting (boolean) - When true this function will return true only if they key that will be deleted existed. When false (default) this function will return true if the key is successfully removed. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structEach",
		"body": "structEach(${1:structure}, ${2:callback})",
		"description": "Used to loop over elements in a structure by accessing key-value pairs.\n\nUSAGE:\nvoid structEach(structure, callback)\n\nPARAMETERS:\n\nstructure (string) - Structure or a variable that contains one.\n\ncallback (UDF) - Closure or function reference that will be called for each iteration. The arguments passed to the callback are:\n\n<strong>key:</strong> Name of the key in the struct\n<strong>value:</strong> Value of the key in the struct\n<strong>struct:</strong> Lucee4.5+ A reference to the original struct\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structEvery",
		"body": "structEvery(${1:struct}, ${2:closure})",
		"description": "This function calls a given closure/function with every element in a given struct and returns true, if all of the closure calls returns true\n\nUSAGE:\nboolean structEvery(struct, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\nstruct (struct)\n\nclosure (function)\n\nparallel (boolean)\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structFilter",
		"body": "structFilter(${1:structure}, ${2:function})",
		"description": "Used to filter the key-value pairs in a structure.\n\nUSAGE:\nstruct structFilter(structure, function)\n\nPARAMETERS:\n\nstructure (struct) - Name of the structure to filter\n\nfunction (function) - Inline function/closure executed for each key in the structure. Returns true if the key-value pair in the structure should be included in the filtered struct. Support for passing the original struct to the closure function added in CF11 Update 5.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structFind",
		"body": "structFind(${1:structure}, ${2:key})",
		"description": " Determines the value associated with a key in a structure.\n\nUSAGE:\nany structFind(structure, key)\n\nPARAMETERS:\n\nstructure (struct) - Structure that contains the value to return\n\nkey (string) - Key whose value to return\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structFindKey",
		"body": "structFindKey(${1:top}, ${2:value}, ${3|one,all|})",
		"description": " Searches recursively through a substructure of nested arrays,\n structures, and other elements, for structures whose keys\n match the search key in the value parameter.\n\nUSAGE:\narray structFindKey(top, value, scope)\n\nPARAMETERS:\n\ntop (any) - CFML object (structure or array) from which to start\n search. This attribute requires an object, not a name of\n an object.\n\nvalue (string) - String or a variable that contains one for which to search.\n\nscope (string) - * one: returns one matching key. Default.\n * all: returns all matching keys Values: one, all.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structFindValue",
		"body": "structFindValue(${1:top}, ${2:value})",
		"description": " Searches recursively through a substructure of nested arrays,\n structures, and other elements for structures with values that\n match the search key in the value parameter.\n\nUSAGE:\narray structFindValue(top, value [, scope])\n\nPARAMETERS:\n\ntop (any) - CFML object (a structure or an array) from which to\n start search. This attribute requires an object, not a\n name of an object.\n\nvalue (string) - String or a variable that contains one for which to search.\n The type must be a simple object. Arrays and structures\n are not supported.\n\nscope (string) - one: function returns one matching key (default)\n all: function returns all matching keys Values: one, all.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structGet",
		"body": "structGet(${1:path})",
		"description": "Returns a value in a structure or a structure in the specified path.\n\nUSAGE:\nany structGet(path)\n\nPARAMETERS:\n\npath (string) - Pathname of variable that contains structure or array from which CFML retrieves the value. If there is no structure or array present in the path, this function creates structures or arrays to make it a valid variable path.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structInsert",
		"body": "structInsert(${1:structure}, ${2:key}, ${3:value})",
		"description": " Inserts a key-value pair into a structure.\n\nUSAGE:\nboolean structInsert(structure, key, value [, allowoverwrite])\n\nPARAMETERS:\n\nstructure (struct) - Structure to contain the new key-value pair.\n\nkey (string) - Key that contains the inserted value.\n\nvalue (any) - Value to add.\n\nallowoverwrite (boolean) - Whether to allow overwriting a key. Default: False. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structIsEmpty",
		"body": "structIsEmpty(${1:structure})",
		"description": " Determines whether a structure contains data.\n\nUSAGE:\nboolean structIsEmpty(structure)\n\nPARAMETERS:\n\nstructure (struct) - Structure to test\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structKeyArray",
		"body": "structKeyArray(${1:structure})",
		"description": "Returns the keys in a CFML structure as an array. If structure does not exist throws an exception.\n\nUSAGE:\narray structKeyArray(structure)\n\nPARAMETERS:\n\nstructure (struct)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structKeyExists",
		"body": "structKeyExists(${1:structure}, ${2:key})",
		"description": "Determines whether a specific key is present in a structure.\n\nUSAGE:\nboolean structKeyExists(structure, key)\n\nPARAMETERS:\n\nstructure (struct) - Name of structure to test\n\nkey (string) - Key to test\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structKeyList",
		"body": "structKeyList(${1:structure})",
		"description": " Extracts keys from a CFML structure.\n\nUSAGE:\nstring structKeyList(structure [, delimiter])\n\nPARAMETERS:\n\nstructure (struct) - Structure from which to extract a list of keys\n\ndelimiter (string) - Character that separates keys in list. Default: comma.. Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structKeyTranslate",
		"body": "structKeyTranslate(${1:structure})",
		"description": "Converts structure key/value pairs where the key contains a period (.) into nested structures key / value pairs\n\nUSAGE:\nnumeric structKeyTranslate(structure [, deepTranslation] [, leaveOriginalKey])\n\nPARAMETERS:\n\nstructure (struct)\n\ndeepTranslation (boolean)\n\nleaveOriginalKey (boolean)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structMap",
		"body": "structMap(${1:struct}, ${2:function})",
		"description": "Iterates over every entry of the Struct and calls the closure function to work on the key value pair of the struct. The returned value will be set for the same key in a new struct and the new struct will be returned.\n\nUSAGE:\nstruct structMap(struct, function)\n\nPARAMETERS:\n\nstruct (struct) - The input struct.\n\nfunction (any) - Closure or a function reference that will be called for each of the iteration. The arguments passed to the callback are\r\n\r\nkey: key for the current iteration\r\nvalue: the value for the current iteration\r\nstruct: a reference of the original struct\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structNew",
		"body": "structNew()",
		"description": "Creates a structure.\n\nUSAGE:\nstruct structNew( [structType])\n\nPARAMETERS:\n\nstructType (string) - CF2016+ Lucee4.5+ If set to `ordered` the order in which elements are added to the structure will be maintained. In Lucee `linked` can be used in place of `ordered`. Values: ordered.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structReduce",
		"body": "structReduce(${1:struct}, ${2:function}, ${3:initialVal})",
		"description": "Iterates over every entry of the struct and calls the closure to work on the key value pair of the struct. This function will reduce the struct to a single value and will return the value.\n\nUSAGE:\nany structReduce(struct, function, initialVal)\n\nPARAMETERS:\n\nstruct (struct) - The input struct.\n\nfunction (any) - Closure or a function reference that will be called for each of the iteration. The arguments passed to the callback are\r\n\r\nresult: the result of the reduce operation after the previous iteration\r\nkey: key for the current iteration\r\nvalue: the value for the current iteration\r\nstruct: a reference of the original struct\n\ninitialVal (any) - Initial value which will be used for the reduce operation. The type is any.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structSome",
		"body": "structSome(${1:struct}, ${2:closure})",
		"description": "This function calls a given closure/function with every element in a given struct and returns true, if one of the closure calls returns true\n\nUSAGE:\nboolean structSome(struct, closure [, parallel] [, maxThreads])\n\nPARAMETERS:\n\nstruct (struct)\n\nclosure (function)\n\nparallel (boolean)\n\nmaxThreads (numeric). Default: 20.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structSort",
		"body": "structSort(${1:base}, ${2|numeric,text,textnocase|}, ${3:sortorder}, ${4:pathtosubelement})",
		"description": " Returns a sorted array of the top level keys in a structure.\n Sorts using alphabetic or numeric sorting, and can sort based\n on the values of any structure element.\n\nUSAGE:\narray structSort(base, sorttype, sortorder, pathtosubelement)\n\nPARAMETERS:\n\nbase (struct)\n\nsorttype (string) - * numeric\n * text: case sensitive Default.\n * textnocase Values: numeric, text, textnocase.\n\nsortorder (string) - * asc: ascending (a to z) sort order. Default.\n * desc: descending (z to a) sort order\n\npathtosubelement (string) - String or a variable that contains one\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "structUpdate",
		"body": "structUpdate(${1:structure}, ${2:key}, ${3:value})",
		"description": " Updates a key with a value.\n\nUSAGE:\nboolean structUpdate(structure, key, value)\n\nPARAMETERS:\n\nstructure (struct) - Structure to update\n\nkey (string) - Key, the value of which to update\n\nvalue (any) - New value\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "systemCacheClear",
		"body": "systemCacheClear()",
		"description": "Clears all caches or the specified cache\n\nUSAGE:\nvoid systemCacheClear( [cacheName])\n\nPARAMETERS:\n\ncacheName (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "systemOutput",
		"body": "systemOutput(${1:obj})",
		"description": "Writes the given string to the output stream\n\nUSAGE:\nboolean systemOutput(obj [, addNewLine] [, doErrorStream])\n\nPARAMETERS:\n\nobj (any)\n\naddNewLine (boolean)\n\ndoErrorStream (boolean)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "tan",
		"body": "tan(${1:number})",
		"description": " Calculates the tangent of an angle that is entered in radians.\n\nUSAGE:\nnumeric tan(number)\n\nPARAMETERS:\n\nnumber (numeric) - Angle, in radians, for which to calculate the tangent\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "threadJoin",
		"body": "threadJoin(${1:Param1})",
		"description": " No Help Available\n\nUSAGE:\nvoid threadJoin(Param1)\n\nPARAMETERS:\n\nParam1 () - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "threadTerminate",
		"body": "threadTerminate(${1:threadname})",
		"description": " Terminates the thread specified by the threadName parameter.\n\nUSAGE:\nvoid threadTerminate(threadname)\n\nPARAMETERS:\n\nthreadname (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "throw",
		"body": "throw()",
		"description": "Throws a developer-specified exception, which can be caught\n with a catch block.\n\nUSAGE:\nnumeric throw( [message] [, type] [, detail] [, errorcode] [, extendedinfo] [, object])\n\nPARAMETERS:\n\nmessage (string) - Message that describes exception event.\n\ntype (string) - * A custom type\n * Application\n Do not enter another predefined type; types are not\n generated by CFML applications. If you specify\n Application, you need not specify a type for cfcatch.. Default: Custom. Values: Custom, Application, Database, Template, Security, Object, MissingInclude, Expression, Lock, SearchEngine.\n\ndetail (string) - Description of the event. CFML appends error position\n to description; server uses this parameter if an error is\n not caught by your code.\n\nerrorcode (string) - A custom error code that you supply.\n\nextendedinfo (string) - A custom error code that you supply.\n\nobject (any) - Requires the value of the cfobject tag name attribute.\n\n Throws a Java exception from a CFML tag.\n\n This attribute is mutually exclusive with all other\n attributes of this tag.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "timeFormat",
		"body": "timeFormat(${1:time})",
		"description": "Formats a time value using US English time formatting conventions. If no mask is specified, returns a time value using the hh:mm tt format. For international time formatting, see LSTimeFormat.\n\nUSAGE:\nstring timeFormat(time [, mask])\n\nPARAMETERS:\n\ntime (date) - A date/time value or string to convert\n\nmask (string) - Masking characters that determine the format.\n `h`,`hh`,`H`,`HH`: Hours\n `m`,`mm`: Minutes\n`s`,`ss`: Seconds\n `l`: Milliseconds\n`t`: A or P\n`tt`: AM or PM\n`z`: Time zone in literal format, for example GMT\n`Z`: Time zone in hours offset (RFC822), for example +0400\n`X`,`XX`,`XXX`: Time zone in hourse of offset in ISO 8601 format\n`\"short\"`: `h:mm tt`\n`\"medium\"`: `h:mm:ss tt`. Default: hh:mm tt. Values: short, medium, long, full.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "toBase64",
		"body": "toBase64(${1:string_or_object})",
		"description": " Calculates the Base64 representation of a string or binary\n object. The Base64 format uses printable characters, allowing\n binary data to be sent in forms and e-mail, and stored in a\n database or file.\n\nUSAGE:\nstring toBase64(string_or_object [, encoding])\n\nPARAMETERS:\n\nstring_or_object (any) - A string, the name of a string, or a binary object.\n\nencoding (string) - For a string, defines how characters are represented in a\n byte array. Values: utf-8, iso-8859-1, windows-1252, us-ascii, shift_jis, iso-2022-jp, euc-jp, euc-kr, big5, euc-cn, utf-16.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "toBinary",
		"body": "toBinary(${1:base64_or_object})",
		"description": " Calculates the binary representation of Base64-encoded data.\n\nUSAGE:\nbinary toBinary(base64_or_object)\n\nPARAMETERS:\n\nbase64_or_object (any) - A string or a variable that contains one:\n * In Base64 format to convert to binary\n * In binary format to test whether it is valid\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "toNumeric",
		"body": "toNumeric(${1:value})",
		"description": "Cast a value to a number.\n\nUSAGE:\nnumeric toNumeric(value [, radix])\n\nPARAMETERS:\n\nvalue (any)\n\nradix (any) - The base of the value.. Default: 10. Values: 2, ..., 36, bin, oct, dec, hex.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "toScript",
		"body": "toScript(${1:cfvar}, ${2:javascriptvar})",
		"description": " Creates a JavaScript or ActionScript expression that\n assigns the value of a ColdFusion variable to a JavaScript\n or ActionScript variable. This function can convert\n ColdFusion strings, numbers, arrays, structures, and\n queries to JavaScript or ActionScript syntax that defines\n equivalent variables and values.\n\nUSAGE:\nstring toScript(cfvar, javascriptvar [, outputformat] [, asformat])\n\nPARAMETERS:\n\ncfvar (any) - A ColdFusion variable. This can contain one of the following:\n String, Number, Array, Structure or Query.\n\njavascriptvar (string) - A string that specifies the name of the JavaScript variable\n that the toScript function creates.\n\noutputformat (boolean) - A Boolean value that determines whether to create\n WDDX (JavaScript) or ActionScript style output for\n structures and queries.\n Default: true. Default: true. Values: true, false.\n\nasformat (boolean) - A Boolean value that specifies whether to use\n ActionScript shortcuts in the script.\n Default: false Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "toString",
		"body": "toString(${1:any_value})",
		"description": " Converts a value to a string.\nLucee parses numbers with one decimal place.\ncomplex object types can only be used in combination with the member syntax.\n\nUSAGE:\nstring toString(any_value [, encoding])\n\nPARAMETERS:\n\nany_value (any) - Value to convert to a string\n\nencoding (string) - The character encoding (character set) of the string.. Default: The default value is the encoding of the page on which the function is called.. Values: utf-8, iso-8859-1, windows-1252, us-ascii, shift_jis, iso-2022-jp, euc-jp, euc-kr, big5, euc-cn, utf-16.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "trace",
		"body": "trace()",
		"description": " Displays and logs debugging data about the state of an\n application at the time the cftrace tag executes. Tracks\n runtime logic flow, variable values, and execution time.\n Displays output at the end of the request or in the debugging\n section at the end of the request;\n\n CFML logs cftrace output to the file logs\\cftrace.log, in\n the CFML installation directory.\n\n Note: To permit this tag to execute, you must enable debugging\n in the CFML Administrator. Optionally, to report trace\n summaries, enable the trace section.\n\nUSAGE:\nvoid trace( [abort] [, category] [, inline] [, text] [, type] [, var])\n\nPARAMETERS:\n\nabort (boolean) - Calls cfabort tag when the tag is executed Values: true, false.\n\ncategory (string) - User-defined string for identifying trace groups\n\ninline (boolean) - Displays trace code in line on the page in the\n location of the cftrace tag, addition to the debugging\n information output. Values: true, false.\n\ntext (string) - User-defined string, which can include simple variable,\n but not complex variables such as arrays. Outputs to cflog\n text attribute\n\ntype (string) - Corresponds to the cflog type attribute; displays an\n appropriate icon.\n\n * Information\n * Warning\n * Error\n * Fatal Information. Default: information. Values: information, warning, error, fatal information.\n\nvar (string) - The name of a simple or complex variable to display.\n\n Useful for displaying a temporary value, or a value that\n does not display on any CFM page.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "transactionCommit",
		"body": "transactionCommit()",
		"description": " No Help Available\n\nUSAGE:\nvoid transactionCommit()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "transactionRollback",
		"body": "transactionRollback()",
		"description": " Rollback current transaction\n\nUSAGE:\nvoid transactionRollback( [savepoint])\n\nPARAMETERS:\n\nsavepoint (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "transactionSetSavepoint",
		"body": "transactionSetSavepoint(${1:savepoint})",
		"description": " Set savepoint for transaction\n\nUSAGE:\nvoid transactionSetSavepoint(savepoint)\n\nPARAMETERS:\n\nsavepoint (string) - No Help Available\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "trim",
		"body": "trim(${1:String})",
		"description": " Removes leading and trailing spaces from a string.\n\nUSAGE:\nstring trim(String)\n\nPARAMETERS:\n\nString (string) - A string or a variable that contains one\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "trueFalseFormat",
		"body": "trueFalseFormat(${1:value})",
		"description": "\n\nUSAGE:\nstring trueFalseFormat(value)\n\nPARAMETERS:\n\nvalue (any)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "uCase",
		"body": "uCase(${1:String})",
		"description": " Converts the alphabetic characters in a string to uppercase.\n\nUSAGE:\nstring uCase(String)\n\nPARAMETERS:\n\nString (string) - A string or a variable that contains one\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "ucFirst",
		"body": "ucFirst(${1:string})",
		"description": "Transforms the first letter of a string to uppercase\n\nUSAGE:\nstring ucFirst(string [, doAll] [, doLowerIfAllUppercase])\n\nPARAMETERS:\n\nstring (string)\n\ndoAll (boolean)\n\ndoLowerIfAllUppercase (boolean)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "unserializeJava",
		"body": "unserializeJava(${1:string})",
		"description": "\n\nUSAGE:\nany unserializeJava(string)\n\nPARAMETERS:\n\nstring (string)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "urlDecode",
		"body": "urlDecode(${1:urlencodedstring})",
		"description": "Decodes a URL-encoded string.\n\nUSAGE:\nstring urlDecode(urlencodedstring [, charset])\n\nPARAMETERS:\n\nurlencodedstring (string)\n\ncharset (string) - The character encoding in which the string is encoded. Values: utf-8, iso-8859-1, windows-1252, us-ascii, shift_jis, iso-2022-jp, euc-jp, euc-kr, big5, euc-cn, utf-16.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "urlEncode",
		"body": "urlEncode(${1:string})",
		"description": "Returns an url-encoded string with respect to charset.\n\nUSAGE:\nstring urlEncode(string [, charset] [, force])\n\nPARAMETERS:\n\nstring (string)\n\ncharset (string) - The character encoding in which the string will be encoded.. Default: utf-8. Values: utf-8, iso-8859-1, windows-1252, us-ascii, shift_jis, iso-2022-jp, euc-jp, euc-kr, big5, euc-cn, utf-16.\n\nforce (boolean). Default: true.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "urlEncodedFormat",
		"body": "urlEncodedFormat(${1:String})",
		"description": "Generates a URL-encoded string. For example, it replaces spaces\n with %20, and non-alphanumeric characters with equivalent\n hexadecimal escape sequences. Passes arbitrary strings within a\n URL.\n\nUSAGE:\nstring urlEncodedFormat(String [, charset])\n\nPARAMETERS:\n\nString (string) - A string or a variable that contains one\n\ncharset (string) - The character encoding in which the string is encoded. Values: utf-8, iso-8859-1, windows-1252, us-ascii, shift_jis, iso-2022-jp, euc-jp, euc-kr, big5, euc-cn, utf-16.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "urlSessionFormat",
		"body": "urlSessionFormat(${1|cgi.script_name|})",
		"description": "If the client does not accept cookies appends session identifiers `CFID`, `CFTOKEN` and / or `JSESSIONID` to the URL.\n\nUSAGE:\nstring urlSessionFormat(requesturl)\n\nPARAMETERS:\n\nrequesturl (URL) - URL of a CFML page Values: cgi.script_name.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "val",
		"body": "val(${1:String})",
		"description": " Converts numeric characters that occur at the beginning of a\n string to a number. If conversion fails, returns zero.\n\nUSAGE:\nnumeric val(String)\n\nPARAMETERS:\n\nString (string) - A string or a variable that contains one\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "valueArray",
		"body": "valueArray(${1:query}, ${2:column})",
		"description": "Returns an array of values for the given query and column.\n\nUSAGE:\narray valueArray(query, column)\n\nPARAMETERS:\n\nquery (query) - A query object\n\ncolumn (string) - The column name whose values you want\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "valueList",
		"body": "valueList(${1:column})",
		"description": "Returns each value from a column of an executed query.\n CFML does not evaluate the arguments.\n A delimited list of the values of each record returned from an\n executed query column\n\nUSAGE:\nstring valueList(column [, delimiter])\n\nPARAMETERS:\n\ncolumn (QueryColumn) - Name of an executed query and column. Separate query name\n and column name with a period.\n\ndelimiter (string) - A delimiter character to separate column data items.\n Default: comma (,).. Default: ,. Values: ,, |, ;, chr(9), chr(10), chr(13).\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "verifyClient",
		"body": "verifyClient()",
		"description": " Verifies whether request is from valid client or not\n\nUSAGE:\nvoid verifyClient()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "webserviceNew",
		"body": "webserviceNew(${1:url})",
		"description": "Creates a web service proxy object, a reference to a remote webservice. This function is a replacement for <code>createObject(\"webservice\",...)</code>.\n\nUSAGE:\nwebserviceProxy webserviceNew(url [, arguments])\n\nPARAMETERS:\n\nurl (string) - URL of the Webservice\n\narguments (struct) - Additional arguments\n(URL params are not allowed in url itself and must be set here)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "week",
		"body": "week(${1:date})",
		"description": " From a date/time object, determines the week number within\n the year. An integer in the range 1-53; the ordinal of the\n week, within the year.\n\nUSAGE:\nnumeric week(date)\n\nPARAMETERS:\n\ndate (date) - A date/time object in the range 100 AD-9999 AD.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "wrap",
		"body": "wrap(${1:String}, ${2:limit})",
		"description": " Wraps text so that each line has a specified maximum number\n of characters.\n\nUSAGE:\nstring wrap(String, limit [, strip])\n\nPARAMETERS:\n\nString (string) - String or variable that contains one. The text to wrap.\n\nlimit (numeric) - Positive integer maximum number of characters to allow on\n a line.\n\nstrip (boolean) - whether to remove all existing newline and carriage return\n characters in the input string with spaces before wrapping\n the text. Default: False. Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "writeBody",
		"body": "writeBody()",
		"description": " n/a\n\nUSAGE:\nvoid writeBody()\n\nPARAMETERS:\n\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "writeDump",
		"body": "writeDump(${1:var})",
		"description": "Outputs the elements, variables and values of most kinds of CFML objects. Useful for debugging. You can display the contents of simple and complex variables, objects, components, user-defined functions, and other elements. Equivalent to the cfdump tag, useful in cfscript.\n\nUSAGE:\nvoid writeDump(var [, expand] [, format] [, abort] [, hide] [, keys] [, label] [, metainfo] [, output] [, show] [, showUDfs] [, top])\n\nPARAMETERS:\n\nvar (variableName) - Variable to display. Enclose a variable name in pound\n signs.\n\nexpand (boolean) - Yes: In Internet Explorer and Mozilla, expands views. Default: true. Values: true, false.\n\nformat (string) - specify whether to save the results of a cfdump to a file in text or HTML format. Default: text. Values: html, text.\n\nabort (boolean) - Boolean value to immediately abort after displaying the dump. Values: true, false.\n\nhide (string) - hide column or keys.\n\nkeys (numeric) - For a structure, number of keys to display.\n\nlabel (string) - A string; header for the dump output.\n\nmetainfo (boolean) - Includes information about the query in the cfdump results.. Default: true. Values: true, false.\n\noutput (string) - Where to send the results of cfdump.. Default: browser. Values: browser, console, filename.\n\nshow (string) - show column or keys.\n\nshowUDfs (boolean) - show UDFs in cfdump output.. Default: true. Values: true, false.\n\ntop (numeric) - The number of rows to display.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "writeLog",
		"body": "writeLog(${1:text})",
		"description": "Writes a message to a log file.\n\nUSAGE:\nvoid writeLog(text [, type] [, application] [, file] [, log])\n\nPARAMETERS:\n\ntext (string) - Message to log. The date / time will be logged automatically for you.\n\ntype (string) - Type or severity of the log message Values: information, warning, error, fatal.\n\napplication (boolean) - Logs the application name, if it is specified in Application.cfc or a cfapplication tag.. Default: true. Values: true, false.\n\nfile (string) - The file name to log to. You cannot specify a directory path or file extension (extension will be `.log`). If the file does not exist, it is created automatically. The log file will be located in your CF server logs directory.\n\nlog (string) - If you omit the file attribute, writes messages to standard\n log file. Ignored, if you specify file attribute.\n\n Application: writes to Application.log, normally used for\n application-specific messages.\n Scheduler: writes to Scheduler.log, normally used to log\n the execution of scheduled tasks. Values: Application, Scheduler.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "writeOutput",
		"body": "writeOutput(${1:string})",
		"description": " Appends text to the page-output stream.\n This function writes to the page-output stream regardless of\n conditions established by the cfsetting tag.\n\nUSAGE:\nstring writeOutput(string [, encodeFor])\n\nPARAMETERS:\n\nstring (string) - A string, or a variable that contains one\n\nencodeFor (string) - CF2016+ Wraps the result with an encodeFor function. Values: html, htmlattribute, javascript, css, xml, xmlattribute, url, xpath, ldap, dn.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "wsGetAllChannels",
		"body": "wsGetAllChannels()",
		"description": "Provides all the channels defined in the Application.cfc as an array.\n\nUSAGE:\nvoid wsGetAllChannels( [channelName])\n\nPARAMETERS:\n\nchannelName () - If specified, returns all sub-channels listed under the entered channel name. If left unspecified, the function returns all channels registered under the current application.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "wsGetSubscribers",
		"body": "wsGetSubscribers(${1:channel})",
		"description": "Returns an array of struct with clientID and subscriberInfo as the keys.\n\nUSAGE:\narray wsGetSubscribers(channel)\n\nPARAMETERS:\n\nchannel () - Channel whose list of subscribers you wish to retrieve.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "wsPublish",
		"body": "wsPublish(${1:channel}, ${2:message})",
		"description": " Sends messages to a specific channel based on the filter criteria (which is a struct).\n\nUSAGE:\nvoid wsPublish(channel, message [, filterCriteria])\n\nPARAMETERS:\n\nchannel () - Specific channel to which the server publishes its response.\n\nmessage () - Response sent by the server to all clients subscribed to a specific channel.\n\nfilterCriteria () - Conditions to filter eligible clients that need to be notified for a given channel.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "wsSendMessage",
		"body": "wsSendMessage(${1:message})",
		"description": " Sends messages to a specific client that invokes the method. This can be included as a part of the function that is called by the invoke WebSocket JavaScript method.\n\nUSAGE:\nvoid wsSendMessage(message)\n\nPARAMETERS:\n\nmessage () - The message object. This can be of type Any.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "xmlChildPos",
		"body": "xmlChildPos(${1:elem}, ${2:childname}, ${3:n})",
		"description": "Gets the position of a child element within an XML document\n object.\n The position, in an XmlChildren array, of the Nth child that\n has the specified name.\n\nUSAGE:\nnumeric xmlChildPos(elem, childname, n)\n\nPARAMETERS:\n\nelem (xml) - XML element within which to search\n\nchildname (string) - XML child element for which to search\n\nn (numeric) - Index of XML child element for which to search\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "xmlElemNew",
		"body": "xmlElemNew(${1:xmlobj}, ${2:childname})",
		"description": "Creates an XML document object element\n\nUSAGE:\nxml xmlElemNew(xmlobj [, namespace], childname)\n\nPARAMETERS:\n\nxmlobj (xml) - The name of an XML object. An XML document or an element.\n\nnamespace (string) - URI of the namespace to which this element belongs.\n\nchildname (string) - The name of the element to create. This element becomes a\n child element of xmlObj in the tree.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "xmlFormat",
		"body": "xmlFormat(${1:String})",
		"description": "Escapes XML special characters in a string, so that the string is safe to use with XML.\n\nUSAGE:\nstring xmlFormat(String [, escapeChars])\n\nPARAMETERS:\n\nString (string) - The string to escape\n\nescapeChars (boolean) - When true escapes restricted characters according to the W3C XML standard.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "xmlGetNodeType",
		"body": "xmlGetNodeType(${1:xmlNode})",
		"description": "Determines the type of an XML document object node.\n\nUSAGE:\nstring xmlGetNodeType(xmlNode)\n\nPARAMETERS:\n\nxmlNode (xml) - An XML DOM object node.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "xmlNew",
		"body": "xmlNew()",
		"description": "Creates an XML document object.\n\nUSAGE:\nxml xmlNew( [casesensitive])\n\nPARAMETERS:\n\ncasesensitive (boolean) - Maintains the case of document elements and attributes.\n Default: false Values: true, false.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "xmlParse",
		"body": "xmlParse(${1:xmlString})",
		"description": "Converts an XML document that is represented as a string\n variable into an XML document object.\n\nUSAGE:\nxml xmlParse(xmlString [, caseSensitive] [, validator])\n\nPARAMETERS:\n\nxmlString (string) - Any of the following:\n - A string containing XML text.\n - The name of an XML file.\n - The URL of an XML file; valid protocol identifiers\n include http, https, ftp, and file.\n\ncaseSensitive (boolean) - Maintains the case of document elements and attributes.\n Default: false Values: true, false.\n\nvalidator (string) - Any of the following:\n - The name of a Document Type Definition (DTD) or\n XML Schema file.\n - The URL of a DTD or Schema file; valid protocol\n identifiers include http, https, ftp, and file.\n - A string representation of a DTD or Schema.\n - An empty string; in this case, the XML file must\n contain an embedded DTD or Schema identifier, which\n is used to validate the document.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "xmlSearch",
		"body": "xmlSearch(${1:xmldoc}, ${2:xpathstring})",
		"description": "Get XML values according to given XPath\n\nUSAGE:\narray xmlSearch(xmldoc, xpathstring)\n\nPARAMETERS:\n\nxmldoc (xml) - XML document object\n\nxpathstring (string) - XPath expression\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "xmlTransform",
		"body": "xmlTransform(${1:xml}, ${2:xsl})",
		"description": "Applies an Extensible Stylesheet Language Transformation (XSLT)\n to an XML document object that is represented as a string\n variable. An XSLT converts an XML document to another format\n or representation by applying an Extensible Stylesheet\n Language (XSL) stylesheet to it.\n\nUSAGE:\nstring xmlTransform(xml, xsl [, parameters])\n\nPARAMETERS:\n\nxml (xml) - An XML document in string format, or an XML document object.\n\nxsl (string) - XSLT transformation to apply; can be any of the following:\n - A string containing XSL text.\n - The name of an XSTLT file. Relative paths start at\n the directory containing the current CFML page.\n - The URL of an XSLT file; valid protocol identifiers\n include http, https, ftp, and file. Relative paths start\n at the directory containing the current CFML page.\n\nparameters (struct) - A structure containing XSL template parameter name-value\n pairs to use in transforming the document. The XSL transform\n defined in the xslString parameter uses these parameter values\n in processing the xml.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "xmlValidate",
		"body": "xmlValidate(${1:xmlDoc})",
		"description": "Uses a Document Type Definition (DTD) or XML Schema to validate an XML text document or an XML document object. Returns keys `status` (boolean), `errors` (array), `fatalerrors` (array) and `warnings` (array)\n\nUSAGE:\nstruct xmlValidate(xmlDoc [, validator])\n\nPARAMETERS:\n\nxmlDoc (any) - Any of the following:\n - A string containing an XML document.\n - The name of an XML file.\n - The URL of an XML file; valid protocol identifiers\n include http, https, ftp, and file.\n - An XML document object, such as one generated by\n the XmlParse function.\n\nvalidator (string) - Any of the following:\n - A string containing a DTD or Schema.\n - The name of a DTD or Schema file.\n - The URL of a DTD or Schema file; valid protocol\n identifiers include http, https, ftp, and file. If this argument is omitted the xml document must have a `!DOCTYPE` `xsi:schemaLocation` or `xsi:noNamespaceSchemaLocation` tag pointing to the DTD or schema location.\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "year",
		"body": "year(${1:date})",
		"description": " From a date/time object, gets the year value.\n\nUSAGE:\nnumeric year(date)\n\nPARAMETERS:\n\ndate (date)\n",
		"scope": "text.html.cfm"
	},
	{
		"prefix": "yesNoFormat",
		"body": "yesNoFormat(${1:value})",
		"description": " Yes, for a true value; No for a false value, empty string or null. Throws an exception for other values.\n\nUSAGE:\nstring yesNoFormat(value)\n\nPARAMETERS:\n\nvalue (any) - A Boolean value or empty string\n",
		"scope": "text.html.cfm"
	}
]